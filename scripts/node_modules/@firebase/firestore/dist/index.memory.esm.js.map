{"version":3,"file":"index.memory.esm.js","sources":["../src/core/version.ts","../src/auth/user.ts","../src/util/error.ts","../src/api/credentials.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/util/obj.ts","../src/util/byte_string.ts","../src/util/types.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/field_value.ts","../src/model/document.ts","../src/core/target.ts","../src/core/query.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/remote/rpc_error.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/remote/serializer.ts","../src/platform/platform.ts","../src/util/log.ts","../src/util/assert.ts","../src/util/misc.ts","../src/core/database_info.ts","../src/util/obj_map.ts","../src/model/mutation_batch.ts","../src/local/reference_set.ts","../src/local/persistence_promise.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/util/async_queue.ts","../src/local/lru_garbage_collector.ts","../src/core/target_id_generator.ts","../src/local/memory_index_manager.ts","../src/local/local_store.ts","../src/local/persistence.ts","../src/util/input_validation.ts","../src/util/api.ts","../src/api/blob.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/api/user_data_reader.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/core/transaction.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/transaction_runner.ts","../src/core/sync_engine.ts","../src/core/event_manager.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/remote_document_change_buffer.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/core/component_provider.ts","../src/core/firestore_client.ts","../src/util/async_observer.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../src/api/database.ts","../src/platform/config.ts","../src/remote/connectivity_monitor_noop.ts","../src/platform_browser/browser_connectivity_monitor.ts","../src/remote/stream_bridge.ts","../src/platform_browser/webchannel_connection.ts","../index.memory.ts","../src/platform_browser/browser_init.ts","../src/platform_browser/browser_platform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\n\n/** The semver (www.semver.org) version of the SDK. */\nexport const SDK_VERSION = firebase.SDK_VERSION;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        throw new FirestoreError(\n          Code.ABORTED,\n          'getToken aborted due to token change.'\n        );\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static readonly MIN = new SnapshotVersion(new Timestamp(0, 0));\n\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static forDeletedDoc(): SnapshotVersion {\n    return SnapshotVersion.MIN;\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static EMPTY_PATH = new ResourcePath([]);\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static EMPTY_PATH = new FieldPath([]);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = PlatformSupport.getPlatform().atob(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return PlatformSupport.getPlatform().btoa(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './field_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport {\n  valueEquals,\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport interface TransformOperation {\n  /**\n   * Computes the local transform result against the provided `previousValue`,\n   * optionally using the provided localWriteTime.\n   */\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value;\n\n  /**\n   * Computes a final transform result after the transform has been acknowledged\n   * by the server, potentially using the server-provided transformResult.\n   */\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value;\n\n  /**\n   * If this transform operation is not idempotent, returns the base value to\n   * persist for this transform. If a base value is returned, the transform\n   * operation is always applied to this base value, even if document has\n   * already been updated.\n   *\n   * Base values provide consistent behavior for non-idempotent transforms and\n   * allow us to return the same latency-compensated value even if the backend\n   * has already applied the transform operation. The base value is null for\n   * idempotent transforms, as they can be re-played even if the backend has\n   * already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent transforms.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value | null;\n\n  isEqual(other: TransformOperation): boolean;\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform implements TransformOperation {\n  private constructor() {}\n  static instance = new ServerTimestampTransform();\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return serverTimestamp(localWriteTime!, previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    return transformResult!;\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Server timestamps are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return other instanceof ServerTimestampTransform;\n  }\n}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    const values = coercedFieldValuesArray(previousValue);\n    for (const toUnion of this.elements) {\n      if (!values.some(element => valueEquals(element, toUnion))) {\n        values.push(toUnion);\n      }\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayUnionTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    let values = coercedFieldValuesArray(previousValue);\n    for (const toRemove of this.elements) {\n      values = values.filter(element => !valueEquals(element, toRemove));\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayRemoveTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation implements TransformOperation {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n    // precision and resolves overflows by reducing precision, we do not\n    // manually cap overflows at 2^63.\n    const baseValue = this.computeBaseValue(previousValue);\n    const sum = this.asNumber(baseValue) + this.asNumber(this.operand);\n    if (isInteger(baseValue) && isInteger(this.operand)) {\n      return this.serializer.toInteger(sum);\n    } else {\n      return this.serializer.toDouble(sum);\n    }\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    debugAssert(\n      transformResult !== null,\n      \"Didn't receive transformResult for NUMERIC_ADD transform\"\n    );\n    return transformResult;\n  }\n\n  /**\n   * Inspects the provided value, returning the provided value if it is already\n   * a NumberValue, otherwise returning a coerced value of 0.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof NumericIncrementTransformOperation &&\n      valueEquals(this.operand, other.operand)\n    );\n  }\n\n  private asNumber(value: api.Value): number {\n    return normalizeNumber(value.integerValue || value.doubleValue);\n  }\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './field_value';\nimport { FieldPath } from './path';\nimport { TransformOperation } from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: SortedSet<FieldPath>) {\n    // TODO(dimond): validation of FieldMask\n  }\n\n  static fromSet(fields: SortedSet<FieldPath>): FieldMask {\n    return new FieldMask(fields);\n  }\n\n  static fromArray(fields: FieldPath[]): FieldMask {\n    let fieldsAsSet = new SortedSet<FieldPath>(FieldPath.comparator);\n    fields.forEach(fieldPath => (fieldsAsSet = fieldsAsSet.add(fieldPath)));\n    return new FieldMask(fieldsAsSet);\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    let found = false;\n    this.fields.forEach(fieldMaskPath => {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return this.fields.isEqual(other.fields);\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n\n  isEqual(other: FieldTransform): boolean {\n    return (\n      this.field.isEqual(other.field) && this.transform.isEqual(other.transform)\n    );\n  }\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  static readonly NONE = new Precondition();\n\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  /**\n   * Returns true if the preconditions is valid for the given document\n   * (or null if no document is available).\n   */\n  isValidFor(maybeDoc: MaybeDocument | null): boolean {\n    if (this.updateTime !== undefined) {\n      return (\n        maybeDoc instanceof Document &&\n        maybeDoc.version.isEqual(this.updateTime)\n      );\n    } else if (this.exists !== undefined) {\n      return this.exists === maybeDoc instanceof Document;\n    } else {\n      debugAssert(this.isNone, 'Precondition should be empty');\n      return true;\n    }\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing a new remote document. If the input document doesn't match the\n   * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n   * returned.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param mutationResult The result of applying the mutation from the backend.\n   * @return The mutated document. The returned document may be an\n   *     UnknownDocument if the mutation could not be applied to the locally\n   *     cached base document.\n   */\n  abstract applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing the new local view of a document. Both the input and returned\n   * documents can be null.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param baseDoc The state of the document prior to this mutation batch. The\n   *     input document can be null if the client has no knowledge of the\n   *     pre-mutation state of the document.\n   * @param localWriteTime A timestamp indicating the local write time of the\n   *     batch this mutation is a part of.\n   * @return The mutated document. The returned document may be null, but only\n   *     if maybeDoc was null and the mutation would not create a new document.\n   */\n  abstract applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null;\n\n  /**\n   * If this mutation is not idempotent, returns the base value to persist with\n   * this mutation. If a base value is returned, the mutation is always applied\n   * to this base value, even if document has already been updated.\n   *\n   * The base value is a sparse object that consists of only the document\n   * fields for which this mutation contains a non-idempotent transformation\n   * (e.g. a numeric increment). The provided value guarantees consistent\n   * behavior for non-idempotent transforms and allow us to return the same\n   * latency-compensated value even if the backend has already applied the\n   * mutation. The base value is null for idempotent mutations, as they can be\n   * re-played even if the backend has already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent mutations.\n   */\n  abstract extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null;\n\n  abstract isEqual(other: Mutation): boolean;\n\n  protected verifyKeyMatches(maybeDoc: MaybeDocument | null): void {\n    if (maybeDoc != null) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply a mutation to a document with the same key'\n      );\n    }\n  }\n\n  /**\n   * Returns the version from the given document for use as the result of a\n   * mutation. Mutations are defined to return the version of the base document\n   * only if it is an existing document. Deleted and unknown documents have a\n   * post-mutation version of SnapshotVersion.MIN.\n   */\n  protected static getPostMutationVersion(\n    maybeDoc: MaybeDocument | null\n  ): SnapshotVersion {\n    if (maybeDoc instanceof Document) {\n      return maybeDoc.version;\n    } else {\n      return SnapshotVersion.MIN;\n    }\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by SetMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    const version = mutationResult.version;\n    return new Document(this.key, version, this.value, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    return new Document(this.key, version, this.value, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof SetMutation &&\n      this.key.isEqual(other.key) &&\n      this.value.isEqual(other.value) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by PatchMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, mutationResult.version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof PatchMutation &&\n      this.key.isEqual(other.key) &&\n      this.fieldMask.isEqual(other.fieldMask) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Patches the data of document if available or creates a new document. Note\n   * that this does not check whether or not the precondition of this patch\n   * holds.\n   */\n  private patchDocument(maybeDoc: MaybeDocument | null): ObjectValue {\n    let data: ObjectValue;\n    if (maybeDoc instanceof Document) {\n      data = maybeDoc.data();\n    } else {\n      data = ObjectValue.EMPTY;\n    }\n    return this.patchObject(data);\n  }\n\n  private patchObject(data: ObjectValue): ObjectValue {\n    const builder = data.toBuilder();\n    this.fieldMask.fields.forEach(fieldPath => {\n      if (!fieldPath.isEmpty()) {\n        const newValue = this.data.field(fieldPath);\n        if (newValue !== null) {\n          builder.set(fieldPath, newValue);\n        } else {\n          builder.delete(fieldPath);\n        }\n      }\n    });\n    return builder.build();\n  }\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    hardAssert(\n      mutationResult.transformResults != null,\n      'Transform results missing for TransformMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.serverTransformResults(\n      maybeDoc,\n      mutationResult.transformResults!\n    );\n\n    const version = mutationResult.version;\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.localTransformResults(\n      localWriteTime,\n      maybeDoc,\n      baseDoc\n    );\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, doc.version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null {\n    let baseObject: ObjectValueBuilder | null = null;\n    for (const fieldTransform of this.fieldTransforms) {\n      const existingValue =\n        maybeDoc instanceof Document\n          ? maybeDoc.field(fieldTransform.field)\n          : undefined;\n      const coercedValue = fieldTransform.transform.computeBaseValue(\n        existingValue || null\n      );\n\n      if (coercedValue != null) {\n        if (baseObject == null) {\n          baseObject = ObjectValue.newBuilder().set(\n            fieldTransform.field,\n            coercedValue\n          );\n        } else {\n          baseObject = baseObject.set(fieldTransform.field, coercedValue);\n        }\n      }\n    }\n    return baseObject ? baseObject.build() : null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof TransformMutation &&\n      this.key.isEqual(other.key) &&\n      arrayEquals(this.fieldTransforms, other.fieldTransforms, (l, r) =>\n        l.isEqual(r)\n      ) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Asserts that the given MaybeDocument is actually a Document and verifies\n   * that it matches the key for this mutation. Since we only support\n   * transformations with precondition exists this method is guaranteed to be\n   * safe.\n   */\n  private requireDocument(maybeDoc: MaybeDocument | null): Document {\n    debugAssert(\n      maybeDoc instanceof Document,\n      'Unknown MaybeDocument type ' + maybeDoc\n    );\n    debugAssert(\n      maybeDoc.key.isEqual(this.key),\n      'Can only transform a document with the same key'\n    );\n    return maybeDoc;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use after a\n   * TransformMutation has been acknowledged by the server.\n   *\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @param serverTransformResults The transform results received by the server.\n   * @return The transform results list.\n   */\n  private serverTransformResults(\n    baseDoc: MaybeDocument | null,\n    serverTransformResults: Array<api.Value | null>\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    hardAssert(\n      this.fieldTransforms.length === serverTransformResults.length,\n      `server transform result count (${serverTransformResults.length}) ` +\n        `should match field transform count (${this.fieldTransforms.length})`\n    );\n\n    for (let i = 0; i < serverTransformResults.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const transform = fieldTransform.transform;\n      let previousValue: api.Value | null = null;\n      if (baseDoc instanceof Document) {\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n      transformResults.push(\n        transform.applyToRemoteDocument(\n          previousValue,\n          serverTransformResults[i]\n        )\n      );\n    }\n    return transformResults;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use when applying a\n   * TransformMutation locally.\n   *\n   * @param localWriteTime The local time of the transform mutation (used to\n   *     generate ServerTimestampValues).\n   * @param maybeDoc The current state of the document after applying all\n   *     previous mutations.\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @return The transform results list.\n   */\n  private localTransformResults(\n    localWriteTime: Timestamp,\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    for (const fieldTransform of this.fieldTransforms) {\n      const transform = fieldTransform.transform;\n\n      let previousValue: api.Value | null = null;\n      if (maybeDoc instanceof Document) {\n        previousValue = maybeDoc.field(fieldTransform.field);\n      }\n\n      if (previousValue === null && baseDoc instanceof Document) {\n        // If the current document does not contain a value for the mutated\n        // field, use the value that existed before applying this mutation\n        // batch. This solves an edge case where a PatchMutation clears the\n        // values in a nested map before the TransformMutation is applied.\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n\n      transformResults.push(\n        transform.applyToLocalView(previousValue, localWriteTime)\n      );\n    }\n    return transformResults;\n  }\n\n  private transformObject(\n    data: ObjectValue,\n    transformResults: api.Value[]\n  ): ObjectValue {\n    debugAssert(\n      transformResults.length === this.fieldTransforms.length,\n      'TransformResults length mismatch.'\n    );\n\n    const builder = data.toBuilder();\n    for (let i = 0; i < this.fieldTransforms.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const fieldPath = fieldTransform.field;\n      builder.set(fieldPath, transformResults[i]);\n    }\n    return builder.build();\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by DeleteMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    return new NoDocument(this.key, mutationResult.version, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply mutation to document with same key'\n      );\n    }\n    return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof DeleteMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof VerifyMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\nimport { SortedSet } from '../util/sorted_set';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  static EMPTY = new ObjectValue({ mapValue: {} });\n\n  constructor(public readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  /** Returns a new Builder instance that is based on an empty object. */\n  static newBuilder(): ObjectValueBuilder {\n    return ObjectValue.EMPTY.toBuilder();\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  /**\n   * Returns a FieldMask built from all FieldPaths starting from this\n   * ObjectValue, including paths from nested objects.\n   */\n  fieldMask(): FieldMask {\n    return this.extractFieldMask(this.proto.mapValue!);\n  }\n\n  private extractFieldMask(value: api.MapValue): FieldMask {\n    let fields = new SortedSet<FieldPath>(FieldPath.comparator);\n    forEach(value.fields || {}, (key, value) => {\n      const currentPath = new FieldPath([key]);\n      if (typeOrder(value) === TypeOrder.ObjectValue) {\n        const nestedMask = this.extractFieldMask(value.mapValue!);\n        const nestedFields = nestedMask.fields;\n        if (nestedFields.isEmpty()) {\n          // Preserve the empty map by adding it to the FieldMask.\n          fields = fields.add(currentPath);\n        } else {\n          // For nested and non-empty ObjectValues, add the FieldPath of the\n          // leaf nodes.\n          nestedFields.forEach(nestedPath => {\n            fields = fields.add(currentPath.child(nestedPath));\n          });\n        }\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n        // nodes.\n        fields = fields.add(currentPath);\n      }\n    });\n    return FieldMask.fromSet(fields);\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n\n  /** Creates a ObjectValueBuilder instance that is based on the current value. */\n  toBuilder(): ObjectValueBuilder {\n    return new ObjectValueBuilder(this);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.EMPTY_PATH,\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.EMPTY_PATH to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './field_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n\n  static compareByField(field: FieldPath, d1: Document, d2: Document): number {\n    const v1 = d1.field(field);\n    const v2 = d2.field(field);\n    if (v1 !== null && v2 !== null) {\n      return valueCompare(v1, v2);\n    } else {\n      return fail(\"Trying to compare documents on fields that don't exist\");\n    }\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport { Bound, Filter, OrderBy } from './query';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport class Target {\n  private memoizedCanonicalId: string | null = null;\n\n  /**\n   * Initializes a Target with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   *\n   * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n   * using this constructor, because `Query` provides an implicit `orderBy`\n   * property.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n\n  canonicalId(): string {\n    if (this.memoizedCanonicalId === null) {\n      let canonicalId = this.path.canonicalString();\n      if (this.collectionGroup !== null) {\n        canonicalId += '|cg:' + this.collectionGroup;\n      }\n      canonicalId += '|f:';\n      canonicalId += this.filters.map(f => f.canonicalId()).join(',');\n      canonicalId += '|ob:';\n      canonicalId += this.orderBy.map(o => o.canonicalId()).join(',');\n\n      if (!isNullOrUndefined(this.limit)) {\n        canonicalId += '|l:';\n        canonicalId += this.limit!;\n      }\n      if (this.startAt) {\n        canonicalId += '|lb:';\n        canonicalId += this.startAt.canonicalId();\n      }\n      if (this.endAt) {\n        canonicalId += '|ub:';\n        canonicalId += this.endAt.canonicalId();\n      }\n      this.memoizedCanonicalId = canonicalId;\n    }\n    return this.memoizedCanonicalId;\n  }\n\n  toString(): string {\n    let str = this.path.canonicalString();\n    if (this.collectionGroup !== null) {\n      str += ' collectionGroup=' + this.collectionGroup;\n    }\n    if (this.filters.length > 0) {\n      str += `, filters: [${this.filters.join(', ')}]`;\n    }\n    if (!isNullOrUndefined(this.limit)) {\n      str += ', limit: ' + this.limit;\n    }\n    if (this.orderBy.length > 0) {\n      str += `, orderBy: [${this.orderBy.join(', ')}]`;\n    }\n    if (this.startAt) {\n      str += ', startAt: ' + this.startAt.canonicalId();\n    }\n    if (this.endAt) {\n      str += ', endAt: ' + this.endAt.canonicalId();\n    }\n    return `Target(${str})`;\n  }\n\n  isEqual(other: Target): boolean {\n    if (this.limit !== other.limit) {\n      return false;\n    }\n\n    if (this.orderBy.length !== other.orderBy.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.orderBy.length; i++) {\n      if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n        return false;\n      }\n    }\n\n    if (this.filters.length !== other.filters.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.filters.length; i++) {\n      if (!this.filters[i].isEqual(other.filters[i])) {\n        return false;\n      }\n    }\n\n    if (this.collectionGroup !== other.collectionGroup) {\n      return false;\n    }\n\n    if (!this.path.isEqual(other.path)) {\n      return false;\n    }\n\n    if (\n      this.startAt !== null\n        ? !this.startAt.isEqual(other.startAt)\n        : other.startAt !== null\n    ) {\n      return false;\n    }\n\n    return this.endAt !== null\n      ? this.endAt.isEqual(other.endAt)\n      : other.endAt === null;\n  }\n\n  isDocumentQuery(): boolean {\n    return (\n      DocumentKey.isDocumentKey(this.path) &&\n      this.collectionGroup === null &&\n      this.filters.length === 0\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  canonicalId,\n  valueCompare,\n  arrayValueContains,\n  valueEquals,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport { Target } from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n */\nexport class Query {\n  static atPath(path: ResourcePath): Query {\n    return new Query(path);\n  }\n\n  private memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  private memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      this.assertValidBound(this.startAt);\n    }\n    if (this.endAt) {\n      this.assertValidBound(this.endAt);\n    }\n  }\n\n  get orderBy(): OrderBy[] {\n    if (this.memoizedOrderBy === null) {\n      const inequalityField = this.getInequalityFilterField();\n      const firstOrderByField = this.getFirstOrderByField();\n      if (inequalityField !== null && firstOrderByField === null) {\n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        if (inequalityField.isKeyField()) {\n          this.memoizedOrderBy = [KEY_ORDERING_ASC];\n        } else {\n          this.memoizedOrderBy = [\n            new OrderBy(inequalityField),\n            KEY_ORDERING_ASC\n          ];\n        }\n      } else {\n        debugAssert(\n          inequalityField === null ||\n            (firstOrderByField !== null &&\n              inequalityField.isEqual(firstOrderByField)),\n          'First orderBy should match inequality field.'\n        );\n        this.memoizedOrderBy = [];\n        let foundKeyOrdering = false;\n        for (const orderBy of this.explicitOrderBy) {\n          this.memoizedOrderBy.push(orderBy);\n          if (orderBy.field.isKeyField()) {\n            foundKeyOrdering = true;\n          }\n        }\n        if (!foundKeyOrdering) {\n          // The order of the implicit key ordering always matches the last\n          // explicit order by\n          const lastDirection =\n            this.explicitOrderBy.length > 0\n              ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n              : Direction.ASCENDING;\n          this.memoizedOrderBy.push(\n            lastDirection === Direction.ASCENDING\n              ? KEY_ORDERING_ASC\n              : KEY_ORDERING_DESC\n          );\n        }\n      }\n    }\n    return this.memoizedOrderBy;\n  }\n\n  addFilter(filter: Filter): Query {\n    debugAssert(\n      this.getInequalityFilterField() == null ||\n        !(filter instanceof FieldFilter) ||\n        !filter.isInequality() ||\n        filter.field.isEqual(this.getInequalityFilterField()!),\n      'Query must only have one inequality field.'\n    );\n\n    debugAssert(\n      !this.isDocumentQuery(),\n      'No filtering allowed for document query'\n    );\n\n    const newFilters = this.filters.concat([filter]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      newFilters,\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  addOrderBy(orderBy: OrderBy): Query {\n    debugAssert(\n      !this.startAt && !this.endAt,\n      'Bounds must be set after orderBy'\n    );\n    // TODO(dimond): validate that orderBy does not list the same key twice.\n    const newOrderBy = this.explicitOrderBy.concat([orderBy]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      newOrderBy,\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToFirst(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.First,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToLast(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.Last,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withStartAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      bound,\n      this.endAt\n    );\n  }\n\n  withEndAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      bound\n    );\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new Query(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  // TODO(b/29183165): This is used to get a unique string from a query to, for\n  // example, use as a dictionary key, but the implementation is subject to\n  // collisions. Make it collision-free.\n  canonicalId(): string {\n    return `${this.toTarget().canonicalId()}|lt:${this.limitType}`;\n  }\n\n  toString(): string {\n    return `Query(target=${this.toTarget().toString()}; limitType=${\n      this.limitType\n    })`;\n  }\n\n  isEqual(other: Query): boolean {\n    return (\n      this.toTarget().isEqual(other.toTarget()) &&\n      this.limitType === other.limitType\n    );\n  }\n\n  docComparator(d1: Document, d2: Document): number {\n    let comparedOnKeyField = false;\n    for (const orderBy of this.orderBy) {\n      const comp = orderBy.compare(d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  }\n\n  matches(doc: Document): boolean {\n    return (\n      this.matchesPathAndCollectionGroup(doc) &&\n      this.matchesOrderBy(doc) &&\n      this.matchesFilters(doc) &&\n      this.matchesBounds(doc)\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter && filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter) {\n        if (operators.indexOf(filter.op) >= 0) {\n          return filter.op;\n        }\n      }\n    }\n    return null;\n  }\n\n  isDocumentQuery(): boolean {\n    return this.toTarget().isDocumentQuery();\n  }\n\n  isCollectionGroupQuery(): boolean {\n    return this.collectionGroup !== null;\n  }\n\n  /**\n   * Converts this `Query` instance to it's corresponding `Target`\n   * representation.\n   */\n  toTarget(): Target {\n    if (!this.memoizedTarget) {\n      if (this.limitType === LimitType.First) {\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          this.orderBy,\n          this.filters,\n          this.limit,\n          this.startAt,\n          this.endAt\n        );\n      } else {\n        // Flip the orderBy directions since we want the last results\n        const orderBys = [] as OrderBy[];\n        for (const orderBy of this.orderBy) {\n          const dir =\n            orderBy.dir === Direction.DESCENDING\n              ? Direction.ASCENDING\n              : Direction.DESCENDING;\n          orderBys.push(new OrderBy(orderBy.field, dir));\n        }\n\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const startAt = this.endAt\n          ? new Bound(this.endAt.position, !this.endAt.before)\n          : null;\n        const endAt = this.startAt\n          ? new Bound(this.startAt.position, !this.startAt.before)\n          : null;\n\n        // Now return as a LimitType.First query.\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          orderBys,\n          this.filters,\n          this.limit,\n          startAt,\n          endAt\n        );\n      }\n    }\n    return this.memoizedTarget!;\n  }\n\n  private matchesPathAndCollectionGroup(doc: Document): boolean {\n    const docPath = doc.key.path;\n    if (this.collectionGroup !== null) {\n      // NOTE: this.path is currently always empty since we don't expose Collection\n      // Group queries rooted at a document path yet.\n      return (\n        doc.key.hasCollectionId(this.collectionGroup) &&\n        this.path.isPrefixOf(docPath)\n      );\n    } else if (DocumentKey.isDocumentKey(this.path)) {\n      // exact match for document queries\n      return this.path.isEqual(docPath);\n    } else {\n      // shallow ancestor queries by default\n      return this.path.isImmediateParentOf(docPath);\n    }\n  }\n\n  /**\n   * A document must have a value for every ordering clause in order to show up\n   * in the results.\n   */\n  private matchesOrderBy(doc: Document): boolean {\n    for (const orderBy of this.explicitOrderBy) {\n      // order by key always matches\n      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private matchesFilters(doc: Document): boolean {\n    for (const filter of this.filters) {\n      if (!filter.matches(doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Makes sure a document is within the bounds, if provided.\n   */\n  private matchesBounds(doc: Document): boolean {\n    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    return true;\n  }\n\n  private assertValidBound(bound: Bound): void {\n    debugAssert(\n      bound.position.length <= this.orderBy.length,\n      'Bound is longer than orderBy'\n    );\n  }\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n  abstract canonicalId(): string;\n  abstract isEqual(filter: Filter): boolean;\n}\n\nexport class Operator {\n  static LESS_THAN = new Operator('<');\n  static LESS_THAN_OR_EQUAL = new Operator('<=');\n  static EQUAL = new Operator('==');\n  static GREATER_THAN = new Operator('>');\n  static GREATER_THAN_OR_EQUAL = new Operator('>=');\n  static ARRAY_CONTAINS = new Operator('array-contains');\n  static IN = new Operator('in');\n  static ARRAY_CONTAINS_ANY = new Operator('array-contains-any');\n\n  static fromString(op: string): Operator {\n    switch (op) {\n      case '<':\n        return Operator.LESS_THAN;\n      case '<=':\n        return Operator.LESS_THAN_OR_EQUAL;\n      case '==':\n        return Operator.EQUAL;\n      case '>=':\n        return Operator.GREATER_THAN_OR_EQUAL;\n      case '>':\n        return Operator.GREATER_THAN;\n      case 'array-contains':\n        return Operator.ARRAY_CONTAINS;\n      case 'in':\n        return Operator.IN;\n      case 'array-contains-any':\n        return Operator.ARRAY_CONTAINS_ANY;\n      default:\n        return fail('Unknown FieldFilter operator: ' + op);\n    }\n  }\n\n  constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n\n  isEqual(other: Operator): boolean {\n    return this.name === other.name;\n  }\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN) {\n        debugAssert(\n          isArray(value),\n          'Comparing on key with IN, but filter value not an ArrayValue'\n        );\n        debugAssert(\n          (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n          'Comparing on key with IN, but an array value was not a RefValue'\n        );\n        return new KeyFieldInFilter(field, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      this.field.canonicalString() +\n      this.op.toString() +\n      canonicalId(this.value)\n    );\n  }\n\n  isEqual(other: Filter): boolean {\n    if (other instanceof FieldFilter) {\n      return (\n        this.op.isEqual(other.op) &&\n        this.field.isEqual(other.field) &&\n        valueEquals(this.value, other.value)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} ${this.op} ${canonicalId(\n      this.value\n    )}`;\n  }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'KeyFieldInFilter expects an ArrayValue');\n    this.keys = (value.arrayValue.values || []).map(v => {\n      debugAssert(\n        isReferenceValue(v),\n        'Comparing on key with IN, but an array value was not a ReferenceValue'\n      );\n      return DocumentKey.fromName(v.referenceValue);\n    });\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport class Direction {\n  static ASCENDING = new Direction('asc');\n  static DESCENDING = new Direction('desc');\n\n  private constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return `${this.before ? 'b' : 'a'}:${this.position\n      .map(p => canonicalId(p))\n      .join(',')}`;\n  }\n\n  /**\n   * Returns true if a document sorts before a bound using the provided sort\n   * order.\n   */\n  sortsBeforeDocument(orderBy: OrderBy[], doc: Document): boolean {\n    debugAssert(\n      this.position.length <= orderBy.length,\n      \"Bound has more components than query's orderBy\"\n    );\n    let comparison = 0;\n    for (let i = 0; i < this.position.length; i++) {\n      const orderByComponent = orderBy[i];\n      const component = this.position[i];\n      if (orderByComponent.field.isKeyField()) {\n        debugAssert(\n          isReferenceValue(component),\n          'Bound has a non-key value where the key path is being used.'\n        );\n        comparison = DocumentKey.comparator(\n          DocumentKey.fromName(component.referenceValue),\n          doc.key\n        );\n      } else {\n        const docValue = doc.field(orderByComponent.field);\n        debugAssert(\n          docValue !== null,\n          'Field should exist since document matched the orderBy already.'\n        );\n        comparison = valueCompare(component, docValue);\n      }\n      if (orderByComponent.dir === Direction.DESCENDING) {\n        comparison = comparison * -1;\n      }\n      if (comparison !== 0) {\n        break;\n      }\n    }\n    return this.before ? comparison <= 0 : comparison < 0;\n  }\n\n  isEqual(other: Bound | null): boolean {\n    if (other === null) {\n      return false;\n    }\n    if (\n      this.before !== other.before ||\n      this.position.length !== other.position.length\n    ) {\n      return false;\n    }\n    for (let i = 0; i < this.position.length; i++) {\n      const thisPosition = this.position[i];\n      const otherPosition = other.position[i];\n      if (!valueEquals(thisPosition, otherPosition)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  readonly dir: Direction;\n  private readonly isKeyOrderBy: boolean;\n\n  constructor(readonly field: FieldPath, dir?: Direction) {\n    if (dir === undefined) {\n      dir = Direction.ASCENDING;\n    }\n    this.dir = dir;\n    this.isKeyOrderBy = field.isKeyField();\n  }\n\n  compare(d1: Document, d2: Document): number {\n    const comparison = this.isKeyOrderBy\n      ? Document.compareByKey(d1, d2)\n      : Document.compareByField(this.field, d1, d2);\n    switch (this.dir) {\n      case Direction.ASCENDING:\n        return comparison;\n      case Direction.DESCENDING:\n        return -1 * comparison;\n      default:\n        return fail('Unknown direction: ' + this.dir);\n    }\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return this.field.canonicalString() + this.dir.toString();\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} (${this.dir})`;\n  }\n\n  isEqual(other: OrderBy): boolean {\n    return this.dir === other.dir && this.field.isEqual(other.field);\n  }\n}\n\nconst KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nconst KEY_ORDERING_DESC = new OrderBy(\n  FieldPath.keyField(),\n  Direction.DESCENDING\n);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !this.query.isEqual(other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.MIN,\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (target.isDocumentQuery()) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.forDeletedDoc())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && targetData.target.isDocumentQuery()) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  Operator,\n  OrderBy,\n  Query\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/field_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING.name] = 'ASCENDING';\n  dirs[Direction.DESCENDING.name] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN.name] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN.name] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL.name] = 'EQUAL';\n  ops[Operator.ARRAY_CONTAINS.name] = 'ARRAY_CONTAINS';\n  ops[Operator.IN.name] = 'IN';\n  ops[Operator.ARRAY_CONTAINS_ANY.name] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\nexport interface SerializerOptions {\n  /**\n   * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n   * setting this flag to true, the serializer will use the Proto3 JSON format.\n   *\n   * For a description of the Proto3 JSON format check\n   * https://developers.google.com/protocol-buffers/docs/proto3#json\n   */\n  useProto3Json: boolean;\n}\n\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    private databaseId: DatabaseId,\n    private options: SerializerOptions\n  ) {}\n\n  fromRpcStatus(status: api.Status): FirestoreError {\n    const code =\n      status.code === undefined\n        ? Code.UNKNOWN\n        : mapCodeFromRpcCode(status.code);\n    return new FirestoreError(code, status.message || '');\n  }\n\n  /**\n   * Returns a value for a number (or null) that's appropriate to put into\n   * a google.protobuf.Int32Value proto.\n   * DO NOT USE THIS FOR ANYTHING ELSE.\n   * This method cheats. It's typed as returning \"number\" because that's what\n   * our generated proto interfaces say Int32Value must be. But GRPC actually\n   * expects a { value: <number> } struct.\n   */\n  private toInt32Proto(val: number | null): number | { value: number } | null {\n    if (this.options.useProto3Json || isNullOrUndefined(val)) {\n      return val;\n    } else {\n      return { value: val };\n    }\n  }\n\n  /**\n   * Returns a number (or null) from a google.protobuf.Int32Value proto.\n   */\n  private fromInt32Proto(\n    val: number | { value: number } | undefined\n  ): number | null {\n    let result;\n    if (typeof val === 'object') {\n      result = val.value;\n    } else {\n      result = val;\n    }\n    return isNullOrUndefined(result) ? null : result;\n  }\n\n  /**\n   * Returns an IntegerValue for `value`.\n   */\n  toInteger(value: number): api.Value {\n    return { integerValue: '' + value };\n  }\n\n  /**\n   * Returns an DoubleValue for `value` that is encoded based the serializer's\n   * `useProto3Json` setting.\n   */\n  toDouble(value: number): api.Value {\n    if (this.options.useProto3Json) {\n      if (isNaN(value)) {\n        return { doubleValue: 'NaN' };\n      } else if (value === Infinity) {\n        return { doubleValue: 'Infinity' };\n      } else if (value === -Infinity) {\n        return { doubleValue: '-Infinity' };\n      }\n    }\n    return { doubleValue: isNegativeZero(value) ? '-0' : value };\n  }\n\n  /**\n   * Returns a value for a number that's appropriate to put into a proto.\n   * The return value is an IntegerValue if it can safely represent the value,\n   * otherwise a DoubleValue is returned.\n   */\n  toNumber(value: number): api.Value {\n    return isSafeInteger(value) ? this.toInteger(value) : this.toDouble(value);\n  }\n\n  /**\n   * Returns a value for a Date that's appropriate to put into a proto.\n   */\n  toTimestamp(timestamp: Timestamp): api.Timestamp {\n    if (this.options.useProto3Json) {\n      // Serialize to ISO-8601 date format, but with full nano resolution.\n      // Since JS Date has only millis, let's only use it for the seconds and\n      // then manually add the fractions to the end.\n      const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n      // Remove .xxx frac part and Z in the end.\n      const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n      // Pad the fraction out to 9 digits (nanos).\n      const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n      return `${strUntilSeconds}.${nanoStr}Z`;\n    } else {\n      return {\n        seconds: '' + timestamp.seconds,\n        nanos: timestamp.nanoseconds\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    }\n  }\n\n  private fromTimestamp(date: api.Timestamp): Timestamp {\n    const timestamp = normalizeTimestamp(date);\n    return new Timestamp(timestamp.seconds, timestamp.nanos);\n  }\n\n  /**\n   * Returns a value for bytes that's appropriate to put in a proto.\n   *\n   * Visible for testing.\n   */\n  toBytes(bytes: Blob | ByteString): string | Uint8Array {\n    if (this.options.useProto3Json) {\n      return bytes.toBase64();\n    } else {\n      return bytes.toUint8Array();\n    }\n  }\n\n  /**\n   * Returns a ByteString based on the proto string value.\n   */\n  fromBytes(value: string | Uint8Array | undefined): ByteString {\n    if (this.options.useProto3Json) {\n      hardAssert(\n        value === undefined || typeof value === 'string',\n        'value must be undefined or a string when using proto3 Json'\n      );\n      return ByteString.fromBase64String(value ? value : '');\n    } else {\n      hardAssert(\n        value === undefined || value instanceof Uint8Array,\n        'value must be undefined or Uint8Array'\n      );\n      return ByteString.fromUint8Array(value ? value : new Uint8Array());\n    }\n  }\n\n  toVersion(version: SnapshotVersion): api.Timestamp {\n    return this.toTimestamp(version.toTimestamp());\n  }\n\n  fromVersion(version: api.Timestamp): SnapshotVersion {\n    hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n  }\n\n  toResourceName(path: ResourcePath, databaseId?: DatabaseId): string {\n    return this.fullyQualifiedPrefixPath(databaseId || this.databaseId)\n      .child('documents')\n      .child(path)\n      .canonicalString();\n  }\n\n  fromResourceName(name: string): ResourcePath {\n    const resource = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resource),\n      'Tried to deserialize invalid key ' + resource.toString()\n    );\n    return resource;\n  }\n\n  toName(key: DocumentKey): string {\n    return this.toResourceName(key.path);\n  }\n\n  fromName(name: string): DocumentKey {\n    const resource = this.fromResourceName(name);\n    hardAssert(\n      resource.get(1) === this.databaseId.projectId,\n      'Tried to deserialize key from different project: ' +\n        resource.get(1) +\n        ' vs ' +\n        this.databaseId.projectId\n    );\n    hardAssert(\n      (!resource.get(3) && !this.databaseId.database) ||\n        resource.get(3) === this.databaseId.database,\n      'Tried to deserialize key from different database: ' +\n        resource.get(3) +\n        ' vs ' +\n        this.databaseId.database\n    );\n    return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n  }\n\n  toQueryPath(path: ResourcePath): string {\n    return this.toResourceName(path);\n  }\n\n  fromQueryPath(name: string): ResourcePath {\n    const resourceName = this.fromResourceName(name);\n    // In v1beta1 queries for collections at the root did not have a trailing\n    // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n    // ability to read the v1beta1 form for compatibility with queries persisted\n    // in the local target cache.\n    if (resourceName.length === 4) {\n      return ResourcePath.EMPTY_PATH;\n    }\n    return this.extractLocalPathFromResourceName(resourceName);\n  }\n\n  get encodedDatabaseId(): string {\n    const path = new ResourcePath([\n      'projects',\n      this.databaseId.projectId,\n      'databases',\n      this.databaseId.database\n    ]);\n    return path.canonicalString();\n  }\n\n  private fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n    return new ResourcePath([\n      'projects',\n      databaseId.projectId,\n      'databases',\n      databaseId.database\n    ]);\n  }\n\n  private extractLocalPathFromResourceName(\n    resourceName: ResourcePath\n  ): ResourcePath {\n    hardAssert(\n      resourceName.length > 4 && resourceName.get(4) === 'documents',\n      'tried to deserialize invalid key ' + resourceName.toString()\n    );\n    return resourceName.popFirst(5);\n  }\n\n  /** Creates an api.Document from key and fields (but no create/update time) */\n  toMutationDocument(key: DocumentKey, fields: ObjectValue): api.Document {\n    return {\n      name: this.toName(key),\n      fields: fields.proto.mapValue.fields\n    };\n  }\n\n  toDocument(document: Document): api.Document {\n    debugAssert(\n      !document.hasLocalMutations,\n      \"Can't serialize documents with mutations.\"\n    );\n    return {\n      name: this.toName(document.key),\n      fields: document.toProto().mapValue.fields,\n      updateTime: this.toTimestamp(document.version.toTimestamp())\n    };\n  }\n\n  fromDocument(\n    document: api.Document,\n    hasCommittedMutations?: boolean\n  ): Document {\n    const key = this.fromName(document.name!);\n    const version = this.fromVersion(document.updateTime!);\n    const data = new ObjectValue({ mapValue: { fields: document.fields } });\n    return new Document(key, version, data, {\n      hasCommittedMutations: !!hasCommittedMutations\n    });\n  }\n\n  private fromFound(doc: api.BatchGetDocumentsResponse): Document {\n    hardAssert(\n      !!doc.found,\n      'Tried to deserialize a found document from a missing document.'\n    );\n    assertPresent(doc.found.name, 'doc.found.name');\n    assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n    const key = this.fromName(doc.found.name);\n    const version = this.fromVersion(doc.found.updateTime);\n    const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n    return new Document(key, version, data, {});\n  }\n\n  private fromMissing(result: api.BatchGetDocumentsResponse): NoDocument {\n    hardAssert(\n      !!result.missing,\n      'Tried to deserialize a missing document from a found document.'\n    );\n    hardAssert(\n      !!result.readTime,\n      'Tried to deserialize a missing document without a read time.'\n    );\n    const key = this.fromName(result.missing);\n    const version = this.fromVersion(result.readTime);\n    return new NoDocument(key, version);\n  }\n\n  fromMaybeDocument(result: api.BatchGetDocumentsResponse): MaybeDocument {\n    if ('found' in result) {\n      return this.fromFound(result);\n    } else if ('missing' in result) {\n      return this.fromMissing(result);\n    }\n    return fail('invalid batch get response: ' + JSON.stringify(result));\n  }\n\n  fromWatchChange(change: api.ListenResponse): WatchChange {\n    let watchChange: WatchChange;\n    if ('targetChange' in change) {\n      assertPresent(change.targetChange, 'targetChange');\n      // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n      // if unset\n      const state = this.fromWatchTargetChangeState(\n        change.targetChange.targetChangeType || 'NO_CHANGE'\n      );\n      const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n      const resumeToken = this.fromBytes(change.targetChange.resumeToken);\n      const causeProto = change.targetChange!.cause;\n      const cause = causeProto && this.fromRpcStatus(causeProto);\n      watchChange = new WatchTargetChange(\n        state,\n        targetIds,\n        resumeToken,\n        cause || null\n      );\n    } else if ('documentChange' in change) {\n      assertPresent(change.documentChange, 'documentChange');\n      const entityChange = change.documentChange;\n      assertPresent(entityChange.document, 'documentChange.name');\n      assertPresent(entityChange.document.name, 'documentChange.document.name');\n      assertPresent(\n        entityChange.document.updateTime,\n        'documentChange.document.updateTime'\n      );\n      const key = this.fromName(entityChange.document.name);\n      const version = this.fromVersion(entityChange.document.updateTime);\n      const data = new ObjectValue({\n        mapValue: { fields: entityChange.document.fields }\n      });\n      const doc = new Document(key, version, data, {});\n      const updatedTargetIds = entityChange.targetIds || [];\n      const removedTargetIds = entityChange.removedTargetIds || [];\n      watchChange = new DocumentWatchChange(\n        updatedTargetIds,\n        removedTargetIds,\n        doc.key,\n        doc\n      );\n    } else if ('documentDelete' in change) {\n      assertPresent(change.documentDelete, 'documentDelete');\n      const docDelete = change.documentDelete;\n      assertPresent(docDelete.document, 'documentDelete.document');\n      const key = this.fromName(docDelete.document);\n      const version = docDelete.readTime\n        ? this.fromVersion(docDelete.readTime)\n        : SnapshotVersion.forDeletedDoc();\n      const doc = new NoDocument(key, version);\n      const removedTargetIds = docDelete.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n    } else if ('documentRemove' in change) {\n      assertPresent(change.documentRemove, 'documentRemove');\n      const docRemove = change.documentRemove;\n      assertPresent(docRemove.document, 'documentRemove');\n      const key = this.fromName(docRemove.document);\n      const removedTargetIds = docRemove.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n    } else if ('filter' in change) {\n      // TODO(dimond): implement existence filter parsing with strategy.\n      assertPresent(change.filter, 'filter');\n      const filter = change.filter;\n      assertPresent(filter.targetId, 'filter.targetId');\n      const count = filter.count || 0;\n      const existenceFilter = new ExistenceFilter(count);\n      const targetId = filter.targetId;\n      watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n    } else {\n      return fail('Unknown change type ' + JSON.stringify(change));\n    }\n    return watchChange;\n  }\n\n  fromWatchTargetChangeState(\n    state: api.TargetChangeTargetChangeType\n  ): WatchTargetChangeState {\n    if (state === 'NO_CHANGE') {\n      return WatchTargetChangeState.NoChange;\n    } else if (state === 'ADD') {\n      return WatchTargetChangeState.Added;\n    } else if (state === 'REMOVE') {\n      return WatchTargetChangeState.Removed;\n    } else if (state === 'CURRENT') {\n      return WatchTargetChangeState.Current;\n    } else if (state === 'RESET') {\n      return WatchTargetChangeState.Reset;\n    } else {\n      return fail('Got unexpected TargetChange.state: ' + state);\n    }\n  }\n\n  versionFromListenResponse(change: api.ListenResponse): SnapshotVersion {\n    // We have only reached a consistent snapshot for the entire stream if there\n    // is a read_time set and it applies to all targets (i.e. the list of\n    // targets is empty). The backend is guaranteed to send such responses.\n    if (!('targetChange' in change)) {\n      return SnapshotVersion.MIN;\n    }\n    const targetChange = change.targetChange!;\n    if (targetChange.targetIds && targetChange.targetIds.length) {\n      return SnapshotVersion.MIN;\n    }\n    if (!targetChange.readTime) {\n      return SnapshotVersion.MIN;\n    }\n    return this.fromVersion(targetChange.readTime);\n  }\n\n  toMutation(mutation: Mutation): api.Write {\n    let result: api.Write;\n    if (mutation instanceof SetMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.value)\n      };\n    } else if (mutation instanceof DeleteMutation) {\n      result = { delete: this.toName(mutation.key) };\n    } else if (mutation instanceof PatchMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.data),\n        updateMask: this.toDocumentMask(mutation.fieldMask)\n      };\n    } else if (mutation instanceof TransformMutation) {\n      result = {\n        transform: {\n          document: this.toName(mutation.key),\n          fieldTransforms: mutation.fieldTransforms.map(transform =>\n            this.toFieldTransform(transform)\n          )\n        }\n      };\n    } else if (mutation instanceof VerifyMutation) {\n      result = {\n        verify: this.toName(mutation.key)\n      };\n    } else {\n      return fail('Unknown mutation type ' + mutation.type);\n    }\n\n    if (!mutation.precondition.isNone) {\n      result.currentDocument = this.toPrecondition(mutation.precondition);\n    }\n\n    return result;\n  }\n\n  fromMutation(proto: api.Write): Mutation {\n    const precondition = proto.currentDocument\n      ? this.fromPrecondition(proto.currentDocument)\n      : Precondition.NONE;\n\n    if (proto.update) {\n      assertPresent(proto.update.name, 'name');\n      const key = this.fromName(proto.update.name);\n      const value = new ObjectValue({\n        mapValue: { fields: proto.update.fields }\n      });\n      if (proto.updateMask) {\n        const fieldMask = this.fromDocumentMask(proto.updateMask);\n        return new PatchMutation(key, value, fieldMask, precondition);\n      } else {\n        return new SetMutation(key, value, precondition);\n      }\n    } else if (proto.delete) {\n      const key = this.fromName(proto.delete);\n      return new DeleteMutation(key, precondition);\n    } else if (proto.transform) {\n      const key = this.fromName(proto.transform.document!);\n      const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n        this.fromFieldTransform(transform)\n      );\n      hardAssert(\n        precondition.exists === true,\n        'Transforms only support precondition \"exists == true\"'\n      );\n      return new TransformMutation(key, fieldTransforms);\n    } else if (proto.verify) {\n      const key = this.fromName(proto.verify);\n      return new VerifyMutation(key, precondition);\n    } else {\n      return fail('unknown mutation proto: ' + JSON.stringify(proto));\n    }\n  }\n\n  private toPrecondition(precondition: Precondition): api.Precondition {\n    debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n    if (precondition.updateTime !== undefined) {\n      return {\n        updateTime: this.toVersion(precondition.updateTime)\n      };\n    } else if (precondition.exists !== undefined) {\n      return { exists: precondition.exists };\n    } else {\n      return fail('Unknown precondition');\n    }\n  }\n\n  private fromPrecondition(precondition: api.Precondition): Precondition {\n    if (precondition.updateTime !== undefined) {\n      return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n    } else if (precondition.exists !== undefined) {\n      return Precondition.exists(precondition.exists);\n    } else {\n      return Precondition.NONE;\n    }\n  }\n\n  private fromWriteResult(\n    proto: api.WriteResult,\n    commitTime: api.Timestamp\n  ): MutationResult {\n    // NOTE: Deletes don't have an updateTime.\n    let version = proto.updateTime\n      ? this.fromVersion(proto.updateTime)\n      : this.fromVersion(commitTime);\n\n    if (version.isEqual(SnapshotVersion.MIN)) {\n      // The Firestore Emulator currently returns an update time of 0 for\n      // deletes of non-existing documents (rather than null). This breaks the\n      // test \"get deleted doc while offline with source=cache\" as NoDocuments\n      // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n      // TODO(#2149): Remove this when Emulator is fixed\n      version = this.fromVersion(commitTime);\n    }\n\n    let transformResults: api.Value[] | null = null;\n    if (proto.transformResults && proto.transformResults.length > 0) {\n      transformResults = proto.transformResults;\n    }\n    return new MutationResult(version, transformResults);\n  }\n\n  fromWriteResults(\n    protos: api.WriteResult[] | undefined,\n    commitTime?: api.Timestamp\n  ): MutationResult[] {\n    if (protos && protos.length > 0) {\n      hardAssert(\n        commitTime !== undefined,\n        'Received a write result without a commit time'\n      );\n      return protos.map(proto => this.fromWriteResult(proto, commitTime));\n    } else {\n      return [];\n    }\n  }\n\n  private toFieldTransform(fieldTransform: FieldTransform): api.FieldTransform {\n    const transform = fieldTransform.transform;\n    if (transform instanceof ServerTimestampTransform) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        setToServerValue: 'REQUEST_TIME'\n      };\n    } else if (transform instanceof ArrayUnionTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        appendMissingElements: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof ArrayRemoveTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        removeAllFromArray: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof NumericIncrementTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        increment: transform.operand\n      };\n    } else {\n      throw fail('Unknown transform: ' + fieldTransform.transform);\n    }\n  }\n\n  private fromFieldTransform(proto: api.FieldTransform): FieldTransform {\n    let transform: TransformOperation | null = null;\n    if ('setToServerValue' in proto) {\n      hardAssert(\n        proto.setToServerValue === 'REQUEST_TIME',\n        'Unknown server value transform proto: ' + JSON.stringify(proto)\n      );\n      transform = ServerTimestampTransform.instance;\n    } else if ('appendMissingElements' in proto) {\n      const values = proto.appendMissingElements!.values || [];\n      transform = new ArrayUnionTransformOperation(values);\n    } else if ('removeAllFromArray' in proto) {\n      const values = proto.removeAllFromArray!.values || [];\n      transform = new ArrayRemoveTransformOperation(values);\n    } else if ('increment' in proto) {\n      transform = new NumericIncrementTransformOperation(\n        this,\n        proto.increment!\n      );\n    } else {\n      fail('Unknown transform proto: ' + JSON.stringify(proto));\n    }\n    const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n    return new FieldTransform(fieldPath, transform!);\n  }\n\n  toDocumentsTarget(target: Target): api.DocumentsTarget {\n    return { documents: [this.toQueryPath(target.path)] };\n  }\n\n  fromDocumentsTarget(documentsTarget: api.DocumentsTarget): Target {\n    const count = documentsTarget.documents!.length;\n    hardAssert(\n      count === 1,\n      'DocumentsTarget contained other than 1 document: ' + count\n    );\n    const name = documentsTarget.documents![0];\n    return Query.atPath(this.fromQueryPath(name)).toTarget();\n  }\n\n  toQueryTarget(target: Target): api.QueryTarget {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const result: api.QueryTarget = { structuredQuery: {} };\n    const path = target.path;\n    if (target.collectionGroup !== null) {\n      debugAssert(\n        path.length % 2 === 0,\n        'Collection Group queries should be within a document path or root.'\n      );\n      result.parent = this.toQueryPath(path);\n      result.structuredQuery!.from = [\n        {\n          collectionId: target.collectionGroup,\n          allDescendants: true\n        }\n      ];\n    } else {\n      debugAssert(\n        path.length % 2 !== 0,\n        'Document queries with filters are not supported.'\n      );\n      result.parent = this.toQueryPath(path.popLast());\n      result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n    }\n\n    const where = this.toFilter(target.filters);\n    if (where) {\n      result.structuredQuery!.where = where;\n    }\n\n    const orderBy = this.toOrder(target.orderBy);\n    if (orderBy) {\n      result.structuredQuery!.orderBy = orderBy;\n    }\n\n    const limit = this.toInt32Proto(target.limit);\n    if (limit !== null) {\n      result.structuredQuery!.limit = limit;\n    }\n\n    if (target.startAt) {\n      result.structuredQuery!.startAt = this.toCursor(target.startAt);\n    }\n    if (target.endAt) {\n      result.structuredQuery!.endAt = this.toCursor(target.endAt);\n    }\n\n    return result;\n  }\n\n  fromQueryTarget(target: api.QueryTarget): Target {\n    let path = this.fromQueryPath(target.parent!);\n\n    const query = target.structuredQuery!;\n    const fromCount = query.from ? query.from.length : 0;\n    let collectionGroup: string | null = null;\n    if (fromCount > 0) {\n      hardAssert(\n        fromCount === 1,\n        'StructuredQuery.from with more than one collection is not supported.'\n      );\n      const from = query.from![0];\n      if (from.allDescendants) {\n        collectionGroup = from.collectionId!;\n      } else {\n        path = path.child(from.collectionId!);\n      }\n    }\n\n    let filterBy: Filter[] = [];\n    if (query.where) {\n      filterBy = this.fromFilter(query.where);\n    }\n\n    let orderBy: OrderBy[] = [];\n    if (query.orderBy) {\n      orderBy = this.fromOrder(query.orderBy);\n    }\n\n    let limit: number | null = null;\n    if (query.limit) {\n      limit = this.fromInt32Proto(query.limit);\n    }\n\n    let startAt: Bound | null = null;\n    if (query.startAt) {\n      startAt = this.fromCursor(query.startAt);\n    }\n\n    let endAt: Bound | null = null;\n    if (query.endAt) {\n      endAt = this.fromCursor(query.endAt);\n    }\n\n    return new Query(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    ).toTarget();\n  }\n\n  toListenRequestLabels(\n    targetData: TargetData\n  ): api.ApiClientObjectMap<string> | null {\n    const value = this.toLabel(targetData.purpose);\n    if (value == null) {\n      return null;\n    } else {\n      return {\n        'goog-listen-tags': value\n      };\n    }\n  }\n\n  private toLabel(purpose: TargetPurpose): string | null {\n    switch (purpose) {\n      case TargetPurpose.Listen:\n        return null;\n      case TargetPurpose.ExistenceFilterMismatch:\n        return 'existence-filter-mismatch';\n      case TargetPurpose.LimboResolution:\n        return 'limbo-document';\n      default:\n        return fail('Unrecognized query purpose: ' + purpose);\n    }\n  }\n\n  toTarget(targetData: TargetData): api.Target {\n    let result: api.Target;\n    const target = targetData.target;\n\n    if (target.isDocumentQuery()) {\n      result = { documents: this.toDocumentsTarget(target) };\n    } else {\n      result = { query: this.toQueryTarget(target) };\n    }\n\n    result.targetId = targetData.targetId;\n\n    if (targetData.resumeToken.approximateByteSize() > 0) {\n      result.resumeToken = this.toBytes(targetData.resumeToken);\n    }\n\n    return result;\n  }\n\n  private toFilter(filters: Filter[]): api.Filter | undefined {\n    if (filters.length === 0) {\n      return;\n    }\n    const protos = filters.map(filter => {\n      if (filter instanceof FieldFilter) {\n        return this.toUnaryOrFieldFilter(filter);\n      } else {\n        return fail('Unrecognized filter: ' + JSON.stringify(filter));\n      }\n    });\n    if (protos.length === 1) {\n      return protos[0];\n    }\n    return { compositeFilter: { op: 'AND', filters: protos } };\n  }\n\n  private fromFilter(filter: api.Filter | undefined): Filter[] {\n    if (!filter) {\n      return [];\n    } else if (filter.unaryFilter !== undefined) {\n      return [this.fromUnaryFilter(filter)];\n    } else if (filter.fieldFilter !== undefined) {\n      return [this.fromFieldFilter(filter)];\n    } else if (filter.compositeFilter !== undefined) {\n      return filter.compositeFilter\n        .filters!.map(f => this.fromFilter(f))\n        .reduce((accum, current) => accum.concat(current));\n    } else {\n      return fail('Unknown filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  private toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n    if (orderBys.length === 0) {\n      return;\n    }\n    return orderBys.map(order => this.toPropertyOrder(order));\n  }\n\n  private fromOrder(orderBys: api.Order[]): OrderBy[] {\n    return orderBys.map(order => this.fromPropertyOrder(order));\n  }\n\n  private toCursor(cursor: Bound): api.Cursor {\n    return {\n      before: cursor.before,\n      values: cursor.position\n    };\n  }\n\n  private fromCursor(cursor: api.Cursor): Bound {\n    const before = !!cursor.before;\n    const position = cursor.values || [];\n    return new Bound(position, before);\n  }\n\n  // visible for testing\n  toDirection(dir: Direction): api.OrderDirection {\n    return DIRECTIONS[dir.name];\n  }\n\n  // visible for testing\n  fromDirection(dir: api.OrderDirection | undefined): Direction | undefined {\n    switch (dir) {\n      case 'ASCENDING':\n        return Direction.ASCENDING;\n      case 'DESCENDING':\n        return Direction.DESCENDING;\n      default:\n        return undefined;\n    }\n  }\n\n  // visible for testing\n  toOperatorName(op: Operator): api.FieldFilterOp {\n    return OPERATORS[op.name];\n  }\n\n  fromOperatorName(op: api.FieldFilterOp): Operator {\n    switch (op) {\n      case 'EQUAL':\n        return Operator.EQUAL;\n      case 'GREATER_THAN':\n        return Operator.GREATER_THAN;\n      case 'GREATER_THAN_OR_EQUAL':\n        return Operator.GREATER_THAN_OR_EQUAL;\n      case 'LESS_THAN':\n        return Operator.LESS_THAN;\n      case 'LESS_THAN_OR_EQUAL':\n        return Operator.LESS_THAN_OR_EQUAL;\n      case 'ARRAY_CONTAINS':\n        return Operator.ARRAY_CONTAINS;\n      case 'IN':\n        return Operator.IN;\n      case 'ARRAY_CONTAINS_ANY':\n        return Operator.ARRAY_CONTAINS_ANY;\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified operator');\n      default:\n        return fail('Unknown operator');\n    }\n  }\n\n  toFieldPathReference(path: FieldPath): api.FieldReference {\n    return { fieldPath: path.canonicalString() };\n  }\n\n  fromFieldPathReference(fieldReference: api.FieldReference): FieldPath {\n    return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n  }\n\n  // visible for testing\n  toPropertyOrder(orderBy: OrderBy): api.Order {\n    return {\n      field: this.toFieldPathReference(orderBy.field),\n      direction: this.toDirection(orderBy.dir)\n    };\n  }\n\n  fromPropertyOrder(orderBy: api.Order): OrderBy {\n    return new OrderBy(\n      this.fromFieldPathReference(orderBy.field!),\n      this.fromDirection(orderBy.direction)\n    );\n  }\n\n  fromFieldFilter(filter: api.Filter): Filter {\n    return FieldFilter.create(\n      this.fromFieldPathReference(filter.fieldFilter!.field!),\n      this.fromOperatorName(filter.fieldFilter!.op!),\n      filter.fieldFilter!.value!\n    );\n  }\n\n  // visible for testing\n  toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n    if (filter.op === Operator.EQUAL) {\n      if (isNanValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NAN'\n          }\n        };\n      } else if (isNullValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NULL'\n          }\n        };\n      }\n    }\n    return {\n      fieldFilter: {\n        field: this.toFieldPathReference(filter.field),\n        op: this.toOperatorName(filter.op),\n        value: filter.value\n      }\n    };\n  }\n\n  fromUnaryFilter(filter: api.Filter): Filter {\n    switch (filter.unaryFilter!.op!) {\n      case 'IS_NAN':\n        const nanField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nanField, Operator.EQUAL, {\n          doubleValue: NaN\n        });\n      case 'IS_NULL':\n        const nullField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nullField, Operator.EQUAL, {\n          nullValue: 'NULL_VALUE'\n        });\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified filter');\n      default:\n        return fail('Unknown filter');\n    }\n  }\n\n  toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n    const canonicalFields: string[] = [];\n    fieldMask.fields.forEach(field =>\n      canonicalFields.push(field.canonicalString())\n    );\n    return {\n      fieldPaths: canonicalFields\n    };\n  }\n\n  fromDocumentMask(proto: api.DocumentMask): FieldMask {\n    const paths = proto.fieldPaths || [];\n    const fields = paths.map(path => FieldPath.fromServerFormat(path));\n    return FieldMask.fromArray(fields);\n  }\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\n\n/**\n * Provides a common interface to load anything platform dependent, e.g.\n * the connection implementation.\n *\n * An implementation of this must be provided at compile time for the platform.\n */\n// TODO: Consider only exposing the APIs of 'document' and 'window' that we\n// use in our client.\nexport interface Platform {\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection>;\n  newConnectivityMonitor(): ConnectivityMonitor;\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer;\n\n  /** Formats an object as a JSON string, suitable for logging. */\n  formatJSON(value: unknown): string;\n\n  /** Converts a Base64 encoded string to a binary string. */\n  atob(encoded: string): string;\n\n  /** Converts a binary string to a Base64 encoded string. */\n  btoa(raw: string): string;\n\n  /** The Platform's 'window' implementation or null if not available. */\n  readonly window: Window | null;\n\n  /** The Platform's 'document' implementation or null if not available. */\n  readonly document: Document | null;\n\n  /** True if and only if the Base64 conversion functions are available. */\n  readonly base64Available: boolean;\n}\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nexport class PlatformSupport {\n  private static platform: Platform;\n  static setPlatform(platform: Platform): void {\n    if (PlatformSupport.platform) {\n      fail('Platform already defined');\n    }\n    PlatformSupport.platform = platform;\n  }\n\n  static getPlatform(): Platform {\n    if (!PlatformSupport.platform) {\n      fail('Platform not set');\n    }\n    return PlatformSupport.platform;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    for (let i = 0; i < 20; i++) {\n      autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    debugAssert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Equatable } from './misc';\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType extends Equatable<KeyType>, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(private mapKeyFn: (key: KeyType) => string) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (otherKey.isEqual(key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport { ByteString } from '../util/byte_string';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { Mutation, MutationResult } from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) => l.isEqual(r)) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        l.isEqual(r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    readonly streamToken: ByteString,\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[],\n    streamToken: ByteString\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(\n      batch,\n      commitVersion,\n      results,\n      streamToken,\n      versionMap\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.MIN, return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (query.isDocumentQuery()) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (query.isCollectionGroupQuery()) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = query.asCollectionQueryAtPath(\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = mutation.applyToLocalView(\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!query.matches(doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport interface CancelablePromise<T> {\n  // We are not extending Promise, since Node's Promise API require us to\n  // implement 'finally', which is not fully supported on Web.\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2>;\n  catch<TResult = never>(\n    onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<T | TResult>;\n  cancel(): void;\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\nimport { CancelablePromise } from '../util/promise';\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: CancelablePromise<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { CancelablePromise, Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { PlatformSupport } from '../platform/platform';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n */\nclass DelayedOperation<T extends unknown> implements CancelablePromise<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  // Promise implementation.\n  readonly [Symbol.toStringTag]: 'Promise';\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n  catch = this.deferred.promise.catch.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // The last retryable operation. Retryable operation are run in order and\n  // retried with backoff.\n  private retryableTail: Promise<void> = Promise.resolve();\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.runDelayedOperationsEarly(TimerId.AsyncQueueRetry);\n  };\n\n  constructor() {\n    const window = PlatformSupport.getPlatform().window;\n    if (window) {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = PlatformSupport.getPlatform().window;\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.verifyNotFailed();\n\n    if (this._isShuttingDown) {\n      return;\n    }\n\n    this.retryableTail = this.retryableTail.then(() => {\n      const deferred = new Deferred<void>();\n      const retryingOp = async (): Promise<void> => {\n        try {\n          await op();\n          deferred.resolve();\n          this.backoff.reset();\n        } catch (e) {\n          if (e.name === 'IndexedDbTransactionError') {\n            logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n            this.backoff.backoffAndRun(retryingOp);\n          } else {\n            deferred.resolve();\n            throw e; // Failure will be handled by AsyncQueue\n          }\n        }\n      };\n      this.enqueueAndForget(retryingOp);\n      return deferred.promise;\n    });\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = error.stack || error.message || '';\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel\n   * the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): CancelablePromise<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail(\n        'AsyncQueue is already failed: ' +\n          (this.failure.stack || this.failure.message)\n      );\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Throws if no such operation exists. Pass TimerId.All to run\n   *  all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runDelayedOperationsEarly(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { CancelablePromise } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport class LruParams {\n  static readonly COLLECTION_DISABLED = -1;\n  static readonly MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n  static readonly DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LruParams.DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LruParams.COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: CancelablePromise<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LruParams.COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        return localStore\n          .collectGarbage(this.garbageCollector)\n          .then(() => this.scheduleGC(localStore))\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (\n      this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED\n    ) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, PatchMutation, Precondition } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { ByteString } from '../util/byte_string';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\n\nconst LOG_TAG = 'LocalStore';\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nexport class LocalStore {\n  /**\n   * The maximum time to leave a resume token buffered without writing it out.\n   * This value is arbitrary: it's long enough to avoid several writes\n   * (possibly indefinitely if updates come more frequently than this) but\n   * short enough that restarting after crashing will still have a pretty\n   * recent resume token.\n   */\n  private static readonly RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  protected mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  protected remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  protected localDocuments: LocalDocumentsView;\n\n  /**\n   * The set of document references maintained by any local views.\n   */\n  private localViewReferences = new ReferenceSet();\n\n  /** Maps a target to its `TargetData`. */\n  protected targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  protected targetDataByTarget = new SortedMap<TargetId, TargetData>(\n    primitiveComparator\n  );\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  private targetIdByTarget = new ObjectMap<Target, TargetId>(t =>\n    t.canonicalId()\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  protected lastDocumentChangeReadTime = SnapshotVersion.MIN;\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    protected persistence: Persistence,\n    private queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.persistence.referenceDelegate.setInMemoryPins(\n      this.localViewReferences\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Tells the LocalStore that the currently authenticated user has changed.\n   *\n   * In response the local store switches the mutation queue to the new user and\n   * returns any resulting document changes.\n   */\n  // PORTING NOTE: Android and iOS only return the documents affected by the\n  // change.\n  async handleUserChange(user: User): Promise<UserChangeResult> {\n    let newMutationQueue = this.mutationQueue;\n    let newLocalDocuments = this.localDocuments;\n\n    const result = await this.persistence.runTransaction(\n      'Handle user change',\n      'readonly',\n      txn => {\n        // Swap out the mutation queue, grabbing the pending mutation batches\n        // before and after.\n        let oldBatches: MutationBatch[];\n        return this.mutationQueue\n          .getAllMutationBatches(txn)\n          .next(promisedOldBatches => {\n            oldBatches = promisedOldBatches;\n\n            newMutationQueue = this.persistence.getMutationQueue(user);\n\n            // Recreate our LocalDocumentsView using the new\n            // MutationQueue.\n            newLocalDocuments = new LocalDocumentsView(\n              this.remoteDocuments,\n              newMutationQueue,\n              this.persistence.getIndexManager()\n            );\n            return newMutationQueue.getAllMutationBatches(txn);\n          })\n          .next(newBatches => {\n            const removedBatchIds: BatchId[] = [];\n            const addedBatchIds: BatchId[] = [];\n\n            // Union the old/new changed keys.\n            let changedKeys = documentKeySet();\n\n            for (const batch of oldBatches) {\n              removedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            for (const batch of newBatches) {\n              addedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            // Return the set of all (potentially) changed documents and the list\n            // of mutation batch IDs that were affected by change.\n            return newLocalDocuments\n              .getDocuments(txn, changedKeys)\n              .next(affectedDocuments => {\n                return {\n                  affectedDocuments,\n                  removedBatchIds,\n                  addedBatchIds\n                };\n              });\n          });\n      }\n    );\n\n    this.mutationQueue = newMutationQueue;\n    this.localDocuments = newLocalDocuments;\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n\n    return result;\n  }\n\n  /* Accept locally generated Mutations and commit them to storage. */\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult> {\n    const localWriteTime = Timestamp.now();\n    const keys = mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n\n    let existingDocs: MaybeDocumentMap;\n\n    return this.persistence\n      .runTransaction('Locally write mutations', 'readwrite', txn => {\n        // Load and apply all existing mutations. This lets us compute the\n        // current base state for all non-idempotent transforms before applying\n        // any additional user-provided writes.\n        return this.localDocuments.getDocuments(txn, keys).next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = mutation.extractBaseValue(\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  baseValue.fieldMask(),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return this.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n      })\n      .then(batch => {\n        const changes = batch.applyToLocalDocumentSet(existingDocs);\n        return { batchId: batch.batchId, changes };\n      });\n  }\n\n  /**\n   * Acknowledge the given batch.\n   *\n   * On the happy path when a batch is acknowledged, the local store will\n   *\n   *  + remove the batch from the mutation queue;\n   *  + apply the changes to the remote document cache;\n   *  + recalculate the latency compensated view implied by those changes (there\n   *    may be mutations in the queue that affect the documents but haven't been\n   *    acknowledged yet); and\n   *  + give the changed documents back the sync engine\n   *\n   * @returns The resulting (modified) documents.\n   */\n  acknowledgeBatch(\n    batchResult: MutationBatchResult\n  ): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Acknowledge batch',\n      'readwrite-primary',\n      txn => {\n        const affected = batchResult.batch.keys();\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n        return this.mutationQueue\n          .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n          .next(() =>\n            this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer)\n          )\n          .next(() => documentBuffer.apply(txn))\n          .next(() => this.mutationQueue.performConsistencyCheck(txn))\n          .next(() => this.localDocuments.getDocuments(txn, affected));\n      }\n    );\n  }\n\n  /**\n   * Remove mutations from the MutationQueue for the specified batch;\n   * LocalDocuments will be recalculated.\n   *\n   * @returns The resulting modified documents.\n   */\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Reject batch',\n      'readwrite-primary',\n      txn => {\n        let affectedKeys: DocumentKeySet;\n        return this.mutationQueue\n          .lookupMutationBatch(txn, batchId)\n          .next((batch: MutationBatch | null) => {\n            hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n            affectedKeys = batch.keys();\n            return this.mutationQueue.removeMutationBatch(txn, batch);\n          })\n          .next(() => {\n            return this.mutationQueue.performConsistencyCheck(txn);\n          })\n          .next(() => {\n            return this.localDocuments.getDocuments(txn, affectedKeys);\n          });\n      }\n    );\n  }\n\n  /**\n   * Returns the largest (latest) batch id in mutation queue that is pending server response.\n   * Returns `BATCHID_UNKNOWN` if the queue is empty.\n   */\n  getHighestUnacknowledgedBatchId(): Promise<BatchId> {\n    return this.persistence.runTransaction(\n      'Get highest unacknowledged batch id',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n      }\n    );\n  }\n\n  /** Returns the last recorded stream token for the current user. */\n  getLastStreamToken(): Promise<ByteString> {\n    return this.persistence.runTransaction(\n      'Get last stream token',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getLastStreamToken(txn);\n      }\n    );\n  }\n\n  /**\n   * Sets the stream token for the current user without acknowledging any\n   * mutation batch. This is usually only useful after a stream handshake or in\n   * response to an error that requires clearing the stream token.\n   */\n  setLastStreamToken(streamToken: ByteString): Promise<void> {\n    return this.persistence.runTransaction(\n      'Set last stream token',\n      'readwrite-primary',\n      txn => {\n        return this.mutationQueue.setLastStreamToken(txn, streamToken);\n      }\n    );\n  }\n\n  /**\n   * Returns the last consistent snapshot processed (used by the RemoteStore to\n   * determine whether to buffer incoming snapshots from the backend).\n   */\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion> {\n    return this.persistence.runTransaction(\n      'Get last remote snapshot version',\n      'readonly',\n      txn => this.targetCache.getLastRemoteSnapshotVersion(txn)\n    );\n  }\n\n  /**\n   * Update the \"ground-state\" (remote) documents. We assume that the remote\n   * event reflects any write batches that have been acknowledged or rejected\n   * (i.e. we do not re-apply local mutations to updates from this event).\n   *\n   * LocalDocuments are re-calculated if there are remaining mutations in the\n   * queue.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap> {\n    const remoteVersion = remoteEvent.snapshotVersion;\n    let newTargetDataByTargetMap = this.targetDataByTarget;\n\n    return this.persistence\n      .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n        newTargetDataByTargetMap = this.targetDataByTarget;\n\n        const promises = [] as Array<PersistencePromise<void>>;\n        remoteEvent.targetChanges.forEach((change, targetId) => {\n          const oldTargetData = newTargetDataByTargetMap.get(targetId);\n          if (!oldTargetData) {\n            return;\n          }\n\n          // Only update the remote keys if the target is still active. This\n          // ensures that we can persist the updated target data along with\n          // the updated assignment.\n          promises.push(\n            this.targetCache\n              .removeMatchingKeys(txn, change.removedDocuments, targetId)\n              .next(() => {\n                return this.targetCache.addMatchingKeys(\n                  txn,\n                  change.addedDocuments,\n                  targetId\n                );\n              })\n          );\n\n          const resumeToken = change.resumeToken;\n          // Update the resume token if the change includes one.\n          if (resumeToken.approximateByteSize() > 0) {\n            const newTargetData = oldTargetData\n              .withResumeToken(resumeToken, remoteVersion)\n              .withSequenceNumber(txn.currentSequenceNumber);\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n              targetId,\n              newTargetData\n            );\n\n            // Update the target data if there are target changes (or if\n            // sufficient time has passed since the last update).\n            if (\n              LocalStore.shouldPersistTargetData(\n                oldTargetData,\n                newTargetData,\n                change\n              )\n            ) {\n              promises.push(\n                this.targetCache.updateTargetData(txn, newTargetData)\n              );\n            }\n          }\n        });\n\n        let changedDocs = maybeDocumentMap();\n        let updatedKeys = documentKeySet();\n        remoteEvent.documentUpdates.forEach((key, doc) => {\n          updatedKeys = updatedKeys.add(key);\n        });\n\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n        // documents in advance in a single call.\n        promises.push(\n          documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n            remoteEvent.documentUpdates.forEach((key, doc) => {\n              const existingDoc = existingDocs.get(key);\n\n              // Note: The order of the steps below is important, since we want\n              // to ensure that rejected limbo resolutions (which fabricate\n              // NoDocuments with SnapshotVersion.MIN) never add documents to\n              // cache.\n              if (\n                doc instanceof NoDocument &&\n                doc.version.isEqual(SnapshotVersion.MIN)\n              ) {\n                // NoDocuments with SnapshotVersion.MIN are used in manufactured\n                // events. We remove these documents from cache since we lost\n                // access.\n                documentBuffer.removeEntry(key, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else if (\n                existingDoc == null ||\n                doc.version.compareTo(existingDoc.version) > 0 ||\n                (doc.version.compareTo(existingDoc.version) === 0 &&\n                  existingDoc.hasPendingWrites)\n              ) {\n                debugAssert(\n                  !SnapshotVersion.MIN.isEqual(remoteVersion),\n                  'Cannot add a document when the remote version is zero'\n                );\n                documentBuffer.addEntry(doc, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else {\n                logDebug(\n                  LOG_TAG,\n                  'Ignoring outdated watch update for ',\n                  key,\n                  '. Current version:',\n                  existingDoc.version,\n                  ' Watch version:',\n                  doc.version\n                );\n              }\n\n              if (remoteEvent.resolvedLimboDocuments.has(key)) {\n                promises.push(\n                  this.persistence.referenceDelegate.updateLimboDocument(\n                    txn,\n                    key\n                  )\n                );\n              }\n            });\n          })\n        );\n\n        // HACK: The only reason we allow a null snapshot version is so that we\n        // can synthesize remote events when we get permission denied errors while\n        // trying to resolve the state of a locally cached document that is in\n        // limbo.\n        if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {\n          const updateRemoteVersion = this.targetCache\n            .getLastRemoteSnapshotVersion(txn)\n            .next(lastRemoteSnapshotVersion => {\n              debugAssert(\n                remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n                'Watch stream reverted to previous snapshot?? ' +\n                  remoteVersion +\n                  ' < ' +\n                  lastRemoteSnapshotVersion\n              );\n              return this.targetCache.setTargetsMetadata(\n                txn,\n                txn.currentSequenceNumber,\n                remoteVersion\n              );\n            });\n          promises.push(updateRemoteVersion);\n        }\n\n        return PersistencePromise.waitFor(promises)\n          .next(() => documentBuffer.apply(txn))\n          .next(() => {\n            return this.localDocuments.getLocalViewOfDocuments(\n              txn,\n              changedDocs\n            );\n          });\n      })\n      .then(changedDocs => {\n        this.targetDataByTarget = newTargetDataByTargetMap;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Returns true if the newTargetData should be persisted during an update of\n   * an active target. TargetData should always be persisted when a target is\n   * being released and should not call this function.\n   *\n   * While the target is active, TargetData updates can be omitted when nothing\n   * about the target has changed except metadata like the resume token or\n   * snapshot version. Occasionally it's worth the extra write to prevent these\n   * values from getting too stale after a crash, but this doesn't have to be\n   * too frequent.\n   */\n  private static shouldPersistTargetData(\n    oldTargetData: TargetData,\n    newTargetData: TargetData,\n    change: TargetChange\n  ): boolean {\n    hardAssert(\n      newTargetData.resumeToken.approximateByteSize() > 0,\n      'Attempted to persist target data with no resume token'\n    );\n\n    // Always persist target data if we don't already have a resume token.\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n      return true;\n    }\n\n    // Don't allow resume token changes to be buffered indefinitely. This\n    // allows us to be reasonably up-to-date after a crash and avoids needing\n    // to loop over all active queries on shutdown. Especially in the browser\n    // we may not get time to do anything interesting while the current tab is\n    // closing.\n    const timeDelta =\n      newTargetData.snapshotVersion.toMicroseconds() -\n      oldTargetData.snapshotVersion.toMicroseconds();\n    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) {\n      return true;\n    }\n\n    // Otherwise if the only thing that has changed about a target is its resume\n    // token it's not worth persisting. Note that the RemoteStore keeps an\n    // in-memory view of the currently active targets which includes the current\n    // resume token, so stream failure or user changes will still use an\n    // up-to-date resume token regardless of what we do here.\n    const changes =\n      change.addedDocuments.size +\n      change.modifiedDocuments.size +\n      change.removedDocuments.size;\n    return changes > 0;\n  }\n\n  /**\n   * Notify local store of the changed views to locally pin documents.\n   */\n  notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void> {\n    for (const viewChange of viewChanges) {\n      const targetId = viewChange.targetId;\n\n      this.localViewReferences.addReferences(viewChange.addedKeys, targetId);\n      this.localViewReferences.removeReferences(\n        viewChange.removedKeys,\n        targetId\n      );\n\n      if (!viewChange.fromCache) {\n        const targetData = this.targetDataByTarget.get(targetId);\n        debugAssert(\n          targetData !== null,\n          `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n        );\n\n        // Advance the last limbo free snapshot version\n        const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n        const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n          lastLimboFreeSnapshotVersion\n        );\n        this.targetDataByTarget = this.targetDataByTarget.insert(\n          targetId,\n          updatedTargetData\n        );\n      }\n    }\n    return this.persistence.runTransaction(\n      'notifyLocalViewChanges',\n      'readwrite',\n      txn => {\n        return PersistencePromise.forEach(\n          viewChanges,\n          (viewChange: LocalViewChanges) => {\n            return PersistencePromise.forEach(\n              viewChange.removedKeys,\n              (key: DocumentKey) =>\n                this.persistence.referenceDelegate.removeReference(txn, key)\n            );\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Gets the mutation batch after the passed in batchId in the mutation queue\n   * or null if empty.\n   * @param afterBatchId If provided, the batch to search after.\n   * @returns The next mutation or null if there wasn't one.\n   */\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null> {\n    return this.persistence.runTransaction(\n      'Get next mutation batch',\n      'readonly',\n      txn => {\n        if (afterBatchId === undefined) {\n          afterBatchId = BATCHID_UNKNOWN;\n        }\n        return this.mutationQueue.getNextMutationBatchAfterBatchId(\n          txn,\n          afterBatchId\n        );\n      }\n    );\n  }\n\n  /**\n   * Read the current value of a Document with a given key or null if not\n   * found - used for testing.\n   */\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null> {\n    return this.persistence.runTransaction('read document', 'readonly', txn => {\n      return this.localDocuments.getDocument(txn, key);\n    });\n  }\n\n  /**\n   * Assigns the given target an internal ID so that its results can be pinned so\n   * they don't get GC'd. A target must be allocated in the local store before\n   * the store can be used to manage its view.\n   *\n   * Allocating an already allocated `Target` will return the existing `TargetData`\n   * for that `Target`.\n   */\n  allocateTarget(target: Target): Promise<TargetData> {\n    return this.persistence\n      .runTransaction('Allocate target', 'readwrite', txn => {\n        let targetData: TargetData;\n        return this.targetCache\n          .getTargetData(txn, target)\n          .next((cached: TargetData | null) => {\n            if (cached) {\n              // This target has been listened to previously, so reuse the\n              // previous targetID.\n              // TODO(mcg): freshen last accessed date?\n              targetData = cached;\n              return PersistencePromise.resolve(targetData);\n            } else {\n              return this.targetCache.allocateTargetId(txn).next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return this.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n            }\n          });\n      })\n      .then(targetData => {\n        if (this.targetDataByTarget.get(targetData.targetId) === null) {\n          this.targetDataByTarget = this.targetDataByTarget.insert(\n            targetData.targetId,\n            targetData\n          );\n          this.targetIdByTarget.set(target, targetData.targetId);\n        }\n        return targetData;\n      });\n  }\n\n  /**\n   * Returns the TargetData as seen by the LocalStore, including updates that may\n   * have not yet been persisted to the TargetCache.\n   */\n  // Visible for testing.\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetId = this.targetIdByTarget.get(target);\n    if (targetId !== undefined) {\n      return PersistencePromise.resolve<TargetData | null>(\n        this.targetDataByTarget.get(targetId)\n      );\n    } else {\n      return this.targetCache.getTargetData(transaction, target);\n    }\n  }\n\n  /**\n   * Unpin all the documents associated with the given target. If\n   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n   * directly removes the associated target data from the target cache.\n   *\n   * Releasing a non-existing `Target` is a no-op.\n   */\n  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n  releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void> {\n    const targetData = this.targetDataByTarget.get(targetId);\n    debugAssert(\n      targetData !== null,\n      `Tried to release nonexistent target: ${targetId}`\n    );\n\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n    return this.persistence\n      .runTransaction('Release target', mode, txn => {\n        // References for documents sent via Watch are automatically removed\n        // when we delete a target's data from the reference delegate.\n        // Since this does not remove references for locally mutated documents,\n        // we have to remove the target associations for these documents\n        // manually.\n        // This operation needs to be run inside the transaction since EagerGC\n        // uses the local view references during the transaction's commit.\n        // Fortunately, the operation is safe to be re-run in case the\n        // transaction fails since there are no side effects if the target has\n        // already been removed.\n        const removed = this.localViewReferences.removeReferencesForId(\n          targetId\n        );\n\n        if (!keepPersistedTargetData) {\n          return PersistencePromise.forEach(removed, (key: DocumentKey) =>\n            this.persistence.referenceDelegate.removeReference(txn, key)\n          ).next(() => {\n            this.persistence.referenceDelegate.removeTarget(txn, targetData!);\n          });\n        } else {\n          return PersistencePromise.resolve();\n        }\n      })\n      .then(() => {\n        this.targetDataByTarget = this.targetDataByTarget.remove(targetId);\n        this.targetIdByTarget.delete(targetData!.target);\n      });\n  }\n\n  /**\n   * Runs the specified query against the local store and returns the results,\n   * potentially taking advantage of query data from previous executions (such\n   * as the set of remote keys).\n   *\n   * @param usePreviousResults Whether results from previous executions can\n   * be used to optimize this query execution.\n   */\n  executeQuery(\n    query: Query,\n    usePreviousResults: boolean\n  ): Promise<QueryResult> {\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.MIN;\n    let remoteKeys = documentKeySet();\n\n    return this.persistence.runTransaction('Execute query', 'readonly', txn => {\n      return this.getTargetData(txn, query.toTarget())\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return this.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          this.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.MIN,\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    });\n  }\n\n  /**\n   * Returns the keys of the documents that are associated with the given\n   * target id in the remote table.\n   */\n  remoteDocumentKeys(targetId: TargetId): Promise<DocumentKeySet> {\n    return this.persistence.runTransaction(\n      'Remote document keys',\n      'readonly',\n      txn => {\n        return this.targetCache.getMatchingKeysForTargetId(txn, targetId);\n      }\n    );\n  }\n\n  private applyWriteToRemoteDocuments(\n    txn: PersistenceTransaction,\n    batchResult: MutationBatchResult,\n    documentBuffer: RemoteDocumentChangeBuffer\n  ): PersistencePromise<void> {\n    const batch = batchResult.batch;\n    const docKeys = batch.keys();\n    let promiseChain = PersistencePromise.resolve();\n    docKeys.forEach(docKey => {\n      promiseChain = promiseChain\n        .next(() => {\n          return documentBuffer.getEntry(txn, docKey);\n        })\n        .next((remoteDoc: MaybeDocument | null) => {\n          let doc = remoteDoc;\n          const ackVersion = batchResult.docVersions.get(docKey);\n          hardAssert(\n            ackVersion !== null,\n            'ackVersions should contain every doc in the write.'\n          );\n          if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n            if (!doc) {\n              debugAssert(\n                !remoteDoc,\n                'Mutation batch ' +\n                  batch +\n                  ' applied to document ' +\n                  remoteDoc +\n                  ' resulted in null'\n              );\n            } else {\n              // We use the commitVersion as the readTime rather than the\n              // document's updateTime since the updateTime is not advanced\n              // for updates that do not modify the underlying document.\n              documentBuffer.addEntry(doc, batchResult.commitVersion);\n            }\n          }\n        });\n    });\n    return promiseChain.next(() =>\n      this.mutationQueue.removeMutationBatch(txn, batch)\n    );\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\n/**\n * An implementation of LocalStore that provides additional functionality\n * for MultiTabSyncEngine.\n */\n// PORTING NOTE: Web only.\nexport class MultiTabLocalStore extends LocalStore {\n  protected mutationQueue: IndexedDbMutationQueue;\n  protected remoteDocuments: IndexedDbRemoteDocumentCache;\n  protected targetCache: IndexedDbTargetCache;\n\n  constructor(\n    protected persistence: IndexedDbPersistence,\n    queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    super(persistence, queryEngine, initialUser);\n\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return this.synchronizeLastDocumentChangeReadTime();\n  }\n\n  /** Returns the local view of the documents affected by a mutation batch. */\n  lookupMutationDocuments(batchId: BatchId): Promise<MaybeDocumentMap | null> {\n    return this.persistence.runTransaction(\n      'Lookup mutation documents',\n      'readonly',\n      txn => {\n        return this.mutationQueue\n          .lookupMutationKeys(txn, batchId)\n          .next(keys => {\n            if (keys) {\n              return this.localDocuments.getDocuments(\n                txn,\n                keys\n              ) as PersistencePromise<MaybeDocumentMap | null>;\n            } else {\n              return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n            }\n          });\n      }\n    );\n  }\n\n  removeCachedMutationBatchMetadata(batchId: BatchId): void {\n    this.mutationQueue.removeCachedMutationKeys(batchId);\n  }\n\n  setNetworkEnabled(networkEnabled: boolean): void {\n    this.persistence.setNetworkEnabled(networkEnabled);\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.persistence.getActiveClients();\n  }\n\n  getTarget(targetId: TargetId): Promise<Target | null> {\n    const cachedTargetData = this.targetDataByTarget.get(targetId);\n\n    if (cachedTargetData) {\n      return Promise.resolve(cachedTargetData.target);\n    } else {\n      return this.persistence.runTransaction(\n        'Get target data',\n        'readonly',\n        txn => {\n          return this.targetCache\n            .getTargetDataForTarget(txn, targetId)\n            .next(targetData => (targetData ? targetData.target : null));\n        }\n      );\n    }\n  }\n\n  /**\n   * Returns the set of documents that have been updated since the last call.\n   * If this is the first call, returns the set of changes since client\n   * initialization. Further invocations will return document changes since\n   * the point of rejection.\n   */\n  getNewDocumentChanges(): Promise<MaybeDocumentMap> {\n    return this.persistence\n      .runTransaction('Get new document changes', 'readonly', txn =>\n        this.remoteDocuments.getNewDocumentChanges(\n          txn,\n          this.lastDocumentChangeReadTime\n        )\n      )\n      .then(({ changedDocs, readTime }) => {\n        this.lastDocumentChangeReadTime = readTime;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Reads the newest document change from persistence and forwards the internal\n   * synchronization marker so that calls to `getNewDocumentChanges()`\n   * only return changes that happened after client initialization.\n   */\n  async synchronizeLastDocumentChangeReadTime(): Promise<void> {\n    this.lastDocumentChangeReadTime = await this.persistence.runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => this.remoteDocuments.getLastReadTime(txn)\n    );\n  }\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /**\n   * Registers a ReferenceSet of documents that should be considered 'referenced' and not eligible\n   * for removal during garbage collection.\n   */\n  setInMemoryPins(pins: ReferenceSet): void;\n\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a document is no longer being mutated by the user. */\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Arugment to validate.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: string[],\n  position: number,\n  argument: unknown\n): void {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function \"${functionName}()\" requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from './error';\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate<T extends Function>(\n  cls: T,\n  optionalMessage?: string\n): T {\n  function PublicConstructor(): never {\n    let error = 'This constructor is private.';\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  }\n\n  // Make sure instanceof checks work and all methods are exposed on the public\n  // constructor\n  PublicConstructor.prototype = cls.prototype;\n\n  // Copy any static methods/members\n  Object.assign(PublicConstructor, cls);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return PublicConstructor as any;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\nexport const PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath implements firestore.FieldPath {\n  /** Internal representation of a Firestore field path. */\n  _internalPath: InternalFieldPath;\n\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { makeConstructorPrivate } from '../util/api';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\nexport abstract class FieldValueImpl implements firestore.FieldValue {\n  protected constructor(readonly _methodName: string) {}\n\n  static delete(): FieldValueImpl {\n    validateNoArgs('FieldValue.delete', arguments);\n    return DeleteFieldValueImpl.instance;\n  }\n\n  static serverTimestamp(): FieldValueImpl {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return ServerTimestampFieldValueImpl.instance;\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValueImpl {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we need access to the Firestore instance.\n    return new ArrayUnionFieldValueImpl(elements);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValueImpl {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we need access to the Firestore instance.\n    return new ArrayRemoveFieldValueImpl(elements);\n  }\n\n  static increment(n: number): FieldValueImpl {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new NumericIncrementFieldValueImpl(n);\n  }\n\n  isEqual(other: FieldValueImpl): boolean {\n    return this === other;\n  }\n}\n\nexport class DeleteFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super('FieldValue.delete');\n  }\n  /** Singleton instance. */\n  static instance = new DeleteFieldValueImpl();\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super('FieldValue.serverTimestamp');\n  }\n  /** Singleton instance. */\n  static instance = new ServerTimestampFieldValueImpl();\n}\n\nexport class ArrayUnionFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _elements: unknown[]) {\n    super('FieldValue.arrayUnion');\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _elements: unknown[]) {\n    super('FieldValue.arrayRemove');\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _operand: number) {\n    super('FieldValue.increment');\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValueImpl,\n  'Use FieldValue.<field>() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue } from '../model/field_value';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { SortedSet } from '../util/sorted_set';\nimport { Blob } from './blob';\nimport {\n  FieldPath as ExternalFieldPath,\n  fromDotSeparatedString\n} from './field_path';\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  FieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  ServerTimestampFieldValueImpl\n} from './field_value';\nimport { GeoPoint } from './geo_point';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nconst enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** A \"context\" object passed around while parsing user data. */\nclass ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param dataSource Indicates what kind of API method this data came from.\n   * @param methodName The name of the method the user called to create this\n   *     ParseContext.\n   * @param path A path within the object being parsed. This could be an empty\n   *     path (in which case the context represents the root of the data being\n   *     parsed), or a nonempty path (indicating the context represents a nested\n   *     location within the data).\n   * @param arrayElement Whether or not this context corresponds to an element\n   *     of an array.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly dataSource: UserDataSource,\n    readonly methodName: string,\n    readonly path: FieldPath | null,\n    readonly arrayElement?: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path == null ? null : this.path.child(field);\n    const context = new ParseContext(\n      this.dataSource,\n      this.methodName,\n      childPath,\n      /*arrayElement=*/ false,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path == null ? null : this.path.child(field);\n    const context = new ParseContext(\n      this.dataSource,\n      this.methodName,\n      childPath,\n      /*arrayElement=*/ false,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // null.\n    return new ParseContext(\n      this.dataSource,\n      this.methodName,\n      /*path=*/ null,\n      /*arrayElement=*/ true,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  createError(reason: string): Error {\n    const fieldDescription =\n      this.path === null || this.path.isEmpty()\n        ? ''\n        : ` (found in field ${this.path.toString()})`;\n    return new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${this.methodName}() called with invalid data. ` +\n        reason +\n        fieldDescription\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (this.path === null) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n/**\n * An interface that allows arbitrary pre-converting of user data. This\n * abstraction allows for, e.g.:\n *  * The public API to convert DocumentReference objects to DocRef objects,\n *    avoiding a circular dependency between user_data_converter.ts and\n *    database.ts\n *  * Tests to convert test-only sentinels (e.g. '<DELETE>') into types\n *    compatible with UserDataReader.\n *\n * Returns the converted value (can return back the input to act as a no-op).\n *\n * It can also throw an Error which will be wrapped into a friendly message.\n */\nexport type DataPreConverter = (input: unknown) => unknown;\n\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nexport class DocumentKeyReference {\n  constructor(public databaseId: DatabaseId, public key: DocumentKey) {}\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    private readonly preConverter: DataPreConverter\n  ) {}\n\n  /** Parse document data from a non-merge set() call. */\n  parseSetData(methodName: string, input: unknown): ParsedSetData {\n    const context = new ParseContext(\n      UserDataSource.Set,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = this.parseObject(input, context)!;\n\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      /* fieldMask= */ null,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse document data from a set() call with '{merge:true}'. */\n  parseMergeData(\n    methodName: string,\n    input: unknown,\n    fieldPaths?: Array<string | firestore.FieldPath>\n  ): ParsedSetData {\n    const context = new ParseContext(\n      UserDataSource.MergeSet,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = this.parseObject(input, context);\n\n    let fieldMask: FieldMask;\n    let fieldTransforms: FieldTransform[];\n\n    if (!fieldPaths) {\n      fieldMask = FieldMask.fromArray(context.fieldMask);\n      fieldTransforms = context.fieldTransforms;\n    } else {\n      let validatedFieldPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n\n      for (const stringOrFieldPath of fieldPaths) {\n        let fieldPath: FieldPath;\n\n        if (stringOrFieldPath instanceof ExternalFieldPath) {\n          fieldPath = stringOrFieldPath._internalPath;\n        } else if (typeof stringOrFieldPath === 'string') {\n          fieldPath = fieldPathFromDotSeparatedString(\n            methodName,\n            stringOrFieldPath\n          );\n        } else {\n          throw fail(\n            'Expected stringOrFieldPath to be a string or a FieldPath'\n          );\n        }\n\n        if (!context.contains(fieldPath)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n          );\n        }\n\n        validatedFieldPaths = validatedFieldPaths.add(fieldPath);\n      }\n\n      fieldMask = FieldMask.fromSet(validatedFieldPaths);\n      fieldTransforms = context.fieldTransforms.filter(transform =>\n        fieldMask.covers(transform.field)\n      );\n    }\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      fieldMask,\n      fieldTransforms\n    );\n  }\n\n  /** Parse update data from an update() call. */\n  parseUpdateData(methodName: string, input: unknown): ParsedUpdateData {\n    const context = new ParseContext(\n      UserDataSource.Update,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n\n    let fieldMaskPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n    const updateData = ObjectValue.newBuilder();\n    forEach(input as Dict<unknown>, (key, value) => {\n      const path = fieldPathFromDotSeparatedString(methodName, key);\n\n      const childContext = context.childContextForFieldPath(path);\n      value = this.runPreConverter(value, childContext);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths = fieldMaskPaths.add(path);\n      } else {\n        const parsedValue = this.parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths = fieldMaskPaths.add(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    });\n\n    const mask = FieldMask.fromSet(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse update data from a list of field/value arguments. */\n  parseUpdateVarargs(\n    methodName: string,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    moreFieldsAndValues: unknown[]\n  ): ParsedUpdateData {\n    const context = new ParseContext(\n      UserDataSource.Update,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    const keys = [fieldPathFromArgument(methodName, field)];\n    const values = [value];\n\n    if (moreFieldsAndValues.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${methodName}() needs to be called with an even number ` +\n          'of arguments that alternate between field names and values.'\n      );\n    }\n\n    for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n      keys.push(\n        fieldPathFromArgument(\n          methodName,\n          moreFieldsAndValues[i] as string | ExternalFieldPath\n        )\n      );\n      values.push(moreFieldsAndValues[i + 1]);\n    }\n\n    let fieldMaskPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n    const updateData = ObjectValue.newBuilder();\n\n    for (let i = 0; i < keys.length; ++i) {\n      const path = keys[i];\n      const childContext = context.childContextForFieldPath(path);\n      const value = this.runPreConverter(values[i], childContext);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths = fieldMaskPaths.add(path);\n      } else {\n        const parsedValue = this.parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths = fieldMaskPaths.add(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n\n    const mask = FieldMask.fromSet(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /**\n   * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n   * bound).\n   *\n   * @param allowArrays Whether the query value is an array that may directly\n   * contain additional arrays (e.g. the operand of an `in` query).\n   */\n  parseQueryValue(\n    methodName: string,\n    input: unknown,\n    allowArrays = false\n  ): api.Value {\n    const context = new ParseContext(\n      allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    const parsed = this.parseData(input, context);\n    debugAssert(parsed != null, 'Parsed data should not be null.');\n    debugAssert(\n      context.fieldTransforms.length === 0,\n      'Field transforms should have been disallowed.'\n    );\n    return parsed;\n  }\n\n  /** Sends data through this.preConverter, handling any thrown errors. */\n  private runPreConverter(input: unknown, context: ParseContext): unknown {\n    try {\n      return this.preConverter(input);\n    } catch (e) {\n      const message = errorMessage(e);\n      throw context.createError(message);\n    }\n  }\n\n  /**\n   * Internal helper for parsing user data.\n   *\n   * @param input Data to be parsed.\n   * @param context A context object representing the current path being parsed,\n   * the source of the data being parsed, etc.\n   * @return The parsed value, or null if the value was a FieldValue sentinel\n   * that should not be included in the resulting parsed data.\n   */\n  private parseData(input: unknown, context: ParseContext): api.Value | null {\n    input = this.runPreConverter(input, context);\n    if (looksLikeJsonObject(input)) {\n      validatePlainObject('Unsupported field value:', context, input);\n      return this.parseObject(input, context);\n    } else if (input instanceof FieldValueImpl) {\n      // FieldValues usually parse into transforms (except FieldValue.delete())\n      // in which case we do not want to include this field in our parsed data\n      // (as doing so will overwrite the field directly prior to the transform\n      // trying to transform it). So we don't add this location to\n      // context.fieldMask and we return null as our parsing result.\n      this.parseSentinelFieldValue(input, context);\n      return null;\n    } else {\n      // If context.path is null we are inside an array and we don't support\n      // field mask paths more granular than the top-level array.\n      if (context.path) {\n        context.fieldMask.push(context.path);\n      }\n\n      if (input instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (\n          context.arrayElement &&\n          context.dataSource !== UserDataSource.ArrayArgument\n        ) {\n          throw context.createError('Nested arrays are not supported');\n        }\n        return this.parseArray(input as unknown[], context);\n      } else {\n        return this.parseScalarValue(input, context);\n      }\n    }\n  }\n\n  private parseObject(\n    obj: Dict<unknown>,\n    context: ParseContext\n  ): { mapValue: api.MapValue } {\n    const fields: Dict<api.Value> = {};\n\n    if (isEmpty(obj)) {\n      // If we encounter an empty object, we explicitly add it to the update\n      // mask to ensure that the server creates a map entry.\n      if (context.path && context.path.length > 0) {\n        context.fieldMask.push(context.path);\n      }\n    } else {\n      forEach(obj, (key: string, val: unknown) => {\n        const parsedValue = this.parseData(\n          val,\n          context.childContextForField(key)\n        );\n        if (parsedValue != null) {\n          fields[key] = parsedValue;\n        }\n      });\n    }\n\n    return { mapValue: { fields } };\n  }\n\n  private parseArray(array: unknown[], context: ParseContext): api.Value {\n    const values: api.Value[] = [];\n    let entryIndex = 0;\n    for (const entry of array) {\n      let parsedEntry = this.parseData(\n        entry,\n        context.childContextForArray(entryIndex)\n      );\n      if (parsedEntry == null) {\n        // Just include nulls in the array for fields being replaced with a\n        // sentinel.\n        parsedEntry = { nullValue: 'NULL_VALUE' };\n      }\n      values.push(parsedEntry);\n      entryIndex++;\n    }\n    return { arrayValue: { values } };\n  }\n\n  /**\n   * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n   * context.fieldTransforms.\n   */\n  private parseSentinelFieldValue(\n    value: FieldValueImpl,\n    context: ParseContext\n  ): void {\n    // Sentinels are only supported with writes, and not within arrays.\n    if (!isWrite(context.dataSource)) {\n      throw context.createError(\n        `${value._methodName}() can only be used with update() and set()`\n      );\n    }\n    if (context.path === null) {\n      throw context.createError(\n        `${value._methodName}() is not currently supported inside arrays`\n      );\n    }\n\n    if (value instanceof DeleteFieldValueImpl) {\n      if (context.dataSource === UserDataSource.MergeSet) {\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        context.fieldMask.push(context.path);\n      } else if (context.dataSource === UserDataSource.Update) {\n        debugAssert(\n          context.path.length > 0,\n          'FieldValue.delete() at the top level should have already' +\n            ' been handled.'\n        );\n        throw context.createError(\n          'FieldValue.delete() can only appear at the top level ' +\n            'of your update data'\n        );\n      } else {\n        // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n        throw context.createError(\n          'FieldValue.delete() cannot be used with set() unless you pass ' +\n            '{merge:true}'\n        );\n      }\n    } else if (value instanceof ServerTimestampFieldValueImpl) {\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, ServerTimestampTransform.instance)\n      );\n    } else if (value instanceof ArrayUnionFieldValueImpl) {\n      const parsedElements = this.parseArrayTransformElements(\n        value._methodName,\n        value._elements\n      );\n      const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, arrayUnion)\n      );\n    } else if (value instanceof ArrayRemoveFieldValueImpl) {\n      const parsedElements = this.parseArrayTransformElements(\n        value._methodName,\n        value._elements\n      );\n      const arrayRemove = new ArrayRemoveTransformOperation(parsedElements);\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, arrayRemove)\n      );\n    } else if (value instanceof NumericIncrementFieldValueImpl) {\n      const operand = this.parseQueryValue(\n        'FieldValue.increment',\n        value._operand\n      );\n      const numericIncrement = new NumericIncrementTransformOperation(\n        this.serializer,\n        operand\n      );\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, numericIncrement)\n      );\n    } else {\n      fail('Unknown FieldValue type: ' + value);\n    }\n  }\n\n  /**\n   * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n   *\n   * @return The parsed value\n   */\n  private parseScalarValue(value: unknown, context: ParseContext): api.Value {\n    if (value === null) {\n      return { nullValue: 'NULL_VALUE' };\n    } else if (typeof value === 'number') {\n      return this.serializer.toNumber(value);\n    } else if (typeof value === 'boolean') {\n      return { booleanValue: value };\n    } else if (typeof value === 'string') {\n      return { stringValue: value };\n    } else if (value instanceof Date) {\n      const timestamp = Timestamp.fromDate(value);\n      return { timestampValue: this.serializer.toTimestamp(timestamp) };\n    } else if (value instanceof Timestamp) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      const timestamp = new Timestamp(\n        value.seconds,\n        Math.floor(value.nanoseconds / 1000) * 1000\n      );\n      return { timestampValue: this.serializer.toTimestamp(timestamp) };\n    } else if (value instanceof GeoPoint) {\n      return {\n        geoPointValue: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    } else if (value instanceof Blob) {\n      return { bytesValue: this.serializer.toBytes(value) };\n    } else if (value instanceof DocumentKeyReference) {\n      return {\n        referenceValue: this.serializer.toResourceName(\n          value.key.path,\n          value.databaseId\n        )\n      };\n    } else {\n      throw context.createError(\n        `Unsupported field value: ${valueDescription(value)}`\n      );\n    }\n  }\n\n  private parseArrayTransformElements(\n    methodName: string,\n    elements: unknown[]\n  ): api.Value[] {\n    return elements.map((element, i) => {\n      // Although array transforms are used with writes, the actual elements\n      // being unioned or removed are not considered writes since they cannot\n      // contain any FieldValue sentinels, etc.\n      const context = new ParseContext(\n        UserDataSource.Argument,\n        methodName,\n        FieldPath.EMPTY_PATH\n      );\n      return this.parseData(element, context.childContextForArray(i))!;\n    });\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof FieldValueImpl)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | ExternalFieldPath\n): FieldPath {\n  if (path instanceof ExternalFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nimport { CancelablePromise } from '../util/promise';\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport { JsonProtoSerializer } from './serializer';\nimport { WatchChange } from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends api.ListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends api.WriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: CancelablePromise<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  api.ListenRequest,\n  api.ListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.ListenRequest, api.ListenResponse> {\n    return this.connection.openStream<api.ListenRequest, api.ListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: api.ListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = this.serializer.fromWatchChange(watchChangeProto);\n    const snapshot = this.serializer.versionFromListenResponse(\n      watchChangeProto\n    );\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.addTarget = this.serializer.toTarget(targetData);\n\n    const labels = this.serializer.toListenRequestLabels(targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  api.WriteRequest,\n  api.WriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.WriteRequest, api.WriteResponse> {\n    return this.connection.openStream<api.WriteRequest, api.WriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: api.WriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = this.serializer.fromBytes(responseProto.streamToken);\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = this.serializer.fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = this.serializer.fromVersion(\n        responseProto.commitTime!\n      );\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      this.lastStreamToken.approximateByteSize() > 0,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: this.serializer.toBytes(this.lastStreamToken),\n      writes: mutations.map(mutation => this.serializer.toMutation(mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { maybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  WatchStreamListener,\n  WriteStreamListener,\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\n\nimport { JsonProtoSerializer } from './serializer';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface BatchGetDocumentsRequest extends api.BatchGetDocumentsRequest {\n  database?: string;\n}\ninterface CommitRequest extends api.CommitRequest {\n  database?: string;\n}\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nexport class Datastore {\n  constructor(\n    private queue: AsyncQueue,\n    private connection: Connection,\n    private credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer\n  ) {}\n\n  newPersistentWriteStream(\n    listener: WriteStreamListener\n  ): PersistentWriteStream {\n    return new PersistentWriteStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer,\n      listener\n    );\n  }\n\n  newPersistentWatchStream(\n    listener: WatchStreamListener\n  ): PersistentListenStream {\n    return new PersistentListenStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer,\n      listener\n    );\n  }\n\n  commit(mutations: Mutation[]): Promise<MutationResult[]> {\n    const params: CommitRequest = {\n      database: this.serializer.encodedDatabaseId,\n      writes: mutations.map(m => this.serializer.toMutation(m))\n    };\n    return this.invokeRPC<CommitRequest, api.CommitResponse>(\n      'Commit',\n      params\n    ).then(response => {\n      return this.serializer.fromWriteResults(\n        response.writeResults,\n        response.commitTime\n      );\n    });\n  }\n\n  lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    const params: BatchGetDocumentsRequest = {\n      database: this.serializer.encodedDatabaseId,\n      documents: keys.map(k => this.serializer.toName(k))\n    };\n    return this.invokeStreamingRPC<\n      BatchGetDocumentsRequest,\n      api.BatchGetDocumentsResponse\n    >('BatchGetDocuments', params).then(response => {\n      let docs = maybeDocumentMap();\n      response.forEach(proto => {\n        const doc = this.serializer.fromMaybeDocument(proto);\n        docs = docs.insert(doc.key, doc);\n      });\n      const result: MaybeDocument[] = [];\n      keys.forEach(key => {\n        const doc = docs.get(key);\n        hardAssert(!!doc, 'Missing entity in write response for ' + key);\n        result.push(doc);\n      });\n      return result;\n    });\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  private invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  private invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { documentVersionMap } from '../model/collections';\nimport { Document, NoDocument, MaybeDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport { Datastore } from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = documentVersionMap();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await this.datastore.lookup(keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    let unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten = unwritten.remove(mutation.key);\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((key, _version) => {\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await this.datastore.commit(this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.forDeletedDoc();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key);\n    if (existingVersion !== null) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions = this.readVersions.insert(doc.key, docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key);\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.NONE;\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key);\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.forDeletedDoc())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { CancelablePromise } from '../util/promise';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: CancelablePromise<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState, TargetId } from '../core/types';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { DocumentKeySet } from '../model/collections';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport { Datastore } from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentError, isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  TargetMetadataProvider,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport class RemoteStore implements TargetMetadataProvider {\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  private writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  private listenTargets = new Map<TargetId, TargetData>();\n\n  private connectivityMonitor: ConnectivityMonitor;\n  private watchStream: PersistentListenStream;\n  private writeStream: PersistentWriteStream;\n  private watchChangeAggregator: WatchChangeAggregator | null = null;\n\n  /**\n   * Set to true by enableNetwork() and false by disableNetwork() and indicates\n   * the user-preferred network state.\n   */\n  private networkEnabled = false;\n\n  private isPrimary = false;\n\n  private onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    private localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    private datastore: Datastore,\n    asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((status: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        if (this.canUseNetwork()) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await this.restartNetwork();\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n\n    // Create streams (but note they're not started yet).\n    this.watchStream = this.datastore.newPersistentWatchStream({\n      onOpen: this.onWatchStreamOpen.bind(this),\n      onClose: this.onWatchStreamClose.bind(this),\n      onWatchChange: this.onWatchStreamChange.bind(this)\n    });\n\n    this.writeStream = this.datastore.newPersistentWriteStream({\n      onOpen: this.onWriteStreamOpen.bind(this),\n      onClose: this.onWriteStreamClose.bind(this),\n      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n      onMutationResult: this.onMutationResult.bind(this)\n    });\n  }\n\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  syncEngine!: RemoteSyncer;\n\n  /**\n   * Starts up the remote store, creating streams, restoring state from\n   * LocalStore, etc.\n   */\n  start(): Promise<void> {\n    return this.enableNetwork();\n  }\n\n  /** Re-enables the network. Idempotent. */\n  async enableNetwork(): Promise<void> {\n    this.networkEnabled = true;\n\n    if (this.canUseNetwork()) {\n      this.writeStream.lastStreamToken = await this.localStore.getLastStreamToken();\n\n      if (this.shouldStartWatchStream()) {\n        this.startWatchStream();\n      } else {\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n\n      // This will start the write stream if necessary.\n      await this.fillWritePipeline();\n    }\n  }\n\n  /**\n   * Temporarily disables the network. The network can be re-enabled using\n   * enableNetwork().\n   */\n  async disableNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n\n    // Set the OnlineState to Offline so get()s return from cache, etc.\n    this.onlineStateTracker.set(OnlineState.Offline);\n  }\n\n  private async disableNetworkInternal(): Promise<void> {\n    await this.writeStream.stop();\n    await this.watchStream.stop();\n\n    if (this.writePipeline.length > 0) {\n      logDebug(\n        LOG_TAG,\n        `Stopping write stream with ${this.writePipeline.length} pending writes`\n      );\n      this.writePipeline = [];\n    }\n\n    this.cleanUpWatchStreamState();\n  }\n\n  async shutdown(): Promise<void> {\n    logDebug(LOG_TAG, 'RemoteStore shutting down.');\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.connectivityMonitor.shutdown();\n\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n    // triggering spurious listener events with cached data, etc.\n    this.onlineStateTracker.set(OnlineState.Unknown);\n  }\n\n  /**\n   * Starts new listen for the given target. Uses resume token if provided. It\n   * is a no-op if the target of given `TargetData` is already being listened to.\n   */\n  listen(targetData: TargetData): void {\n    if (this.listenTargets.has(targetData.targetId)) {\n      return;\n    }\n\n    // Mark this as something the client is currently listening for.\n    this.listenTargets.set(targetData.targetId, targetData);\n\n    if (this.shouldStartWatchStream()) {\n      // The listen will be sent in onWatchStreamOpen\n      this.startWatchStream();\n    } else if (this.watchStream.isOpen()) {\n      this.sendWatchRequest(targetData);\n    }\n  }\n\n  /**\n   * Removes the listen from server. It is a no-op if the given target id is\n   * not being listened to.\n   */\n  unlisten(targetId: TargetId): void {\n    debugAssert(\n      this.listenTargets.has(targetId),\n      `unlisten called on target no currently watched: ${targetId}`\n    );\n\n    this.listenTargets.delete(targetId);\n    if (this.watchStream.isOpen()) {\n      this.sendUnwatchRequest(targetId);\n    }\n\n    if (this.listenTargets.size === 0) {\n      if (this.watchStream.isOpen()) {\n        this.watchStream.markIdle();\n      } else if (this.canUseNetwork()) {\n        // Revert to OnlineState.Unknown if the watch stream is not open and we\n        // have no listeners, since without any listens to send we cannot\n        // confirm if the stream is healthy and upgrade to OnlineState.Online.\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n    }\n  }\n\n  /** {@link TargetMetadataProvider.getTargetDataForTarget} */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null {\n    return this.listenTargets.get(targetId) || null;\n  }\n\n  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    return this.syncEngine.getRemoteKeysForTarget(targetId);\n  }\n\n  /**\n   * We need to increment the the expected number of pending responses we're due\n   * from watch so we wait for the ack to process any messages from this target.\n   */\n  private sendWatchRequest(targetData: TargetData): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetData.targetId);\n    this.watchStream.watch(targetData);\n  }\n\n  /**\n   * We need to increment the expected number of pending responses we're due\n   * from watch so we wait for the removal on the server before we process any\n   * messages from this target.\n   */\n  private sendUnwatchRequest(targetId: TargetId): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n    this.watchStream.unwatch(targetId);\n  }\n\n  private startWatchStream(): void {\n    debugAssert(\n      this.shouldStartWatchStream(),\n      'startWatchStream() called when shouldStartWatchStream() is false.'\n    );\n\n    this.watchChangeAggregator = new WatchChangeAggregator(this);\n    this.watchStream.start();\n    this.onlineStateTracker.handleWatchStreamStart();\n  }\n\n  /**\n   * Returns whether the watch stream should be started because it's necessary\n   * and has not yet been started.\n   */\n  private shouldStartWatchStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.watchStream.isStarted() &&\n      this.listenTargets.size > 0\n    );\n  }\n\n  canUseNetwork(): boolean {\n    return this.isPrimary && this.networkEnabled;\n  }\n\n  private cleanUpWatchStreamState(): void {\n    this.watchChangeAggregator = null;\n  }\n\n  private async onWatchStreamOpen(): Promise<void> {\n    this.listenTargets.forEach((targetData, targetId) => {\n      this.sendWatchRequest(targetData);\n    });\n  }\n\n  private async onWatchStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWatchStream(),\n        'Watch stream was stopped gracefully while still needed.'\n      );\n    }\n\n    this.cleanUpWatchStreamState();\n\n    // If we still need the watch stream, retry the connection.\n    if (this.shouldStartWatchStream()) {\n      this.onlineStateTracker.handleWatchStreamFailure(error!);\n\n      this.startWatchStream();\n    } else {\n      // No need to restart watch stream because there are no active targets.\n      // The online state is set to unknown because there is no active attempt\n      // at establishing a connection\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n\n  private async onWatchStreamChange(\n    watchChange: WatchChange,\n    snapshotVersion: SnapshotVersion\n  ): Promise<void> {\n    // Mark the client as online since we got a message from the server\n    this.onlineStateTracker.set(OnlineState.Online);\n\n    if (\n      watchChange instanceof WatchTargetChange &&\n      watchChange.state === WatchTargetChangeState.Removed &&\n      watchChange.cause\n    ) {\n      // There was an error on a target, don't wait for a consistent snapshot\n      // to raise events\n      return this.handleTargetError(watchChange);\n    }\n\n    if (watchChange instanceof DocumentWatchChange) {\n      this.watchChangeAggregator!.handleDocumentChange(watchChange);\n    } else if (watchChange instanceof ExistenceFilterChange) {\n      this.watchChangeAggregator!.handleExistenceFilter(watchChange);\n    } else {\n      debugAssert(\n        watchChange instanceof WatchTargetChange,\n        'Expected watchChange to be an instance of WatchTargetChange'\n      );\n      this.watchChangeAggregator!.handleTargetChange(watchChange);\n    }\n\n    if (!snapshotVersion.isEqual(SnapshotVersion.MIN)) {\n      const lastRemoteSnapshotVersion = await this.localStore.getLastRemoteSnapshotVersion();\n      if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n        // We have received a target change with a global snapshot if the snapshot\n        // version is not equal to SnapshotVersion.MIN.\n        await this.raiseWatchSnapshot(snapshotVersion);\n      }\n    }\n  }\n\n  /**\n   * Takes a batch of changes from the Datastore, repackages them as a\n   * RemoteEvent, and passes that on to the listener, which is typically the\n   * SyncEngine.\n   */\n  private raiseWatchSnapshot(snapshotVersion: SnapshotVersion): Promise<void> {\n    debugAssert(\n      !snapshotVersion.isEqual(SnapshotVersion.MIN),\n      \"Can't raise event for unknown SnapshotVersion\"\n    );\n    const remoteEvent = this.watchChangeAggregator!.createRemoteEvent(\n      snapshotVersion\n    );\n\n    // Update in-memory resume tokens. LocalStore will update the\n    // persistent view of these when applying the completed RemoteEvent.\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      if (change.resumeToken.approximateByteSize() > 0) {\n        const targetData = this.listenTargets.get(targetId);\n        // A watched target might have been removed already.\n        if (targetData) {\n          this.listenTargets.set(\n            targetId,\n            targetData.withResumeToken(change.resumeToken, snapshotVersion)\n          );\n        }\n      }\n    });\n\n    // Re-establish listens for the targets that have been invalidated by\n    // existence filter mismatches.\n    remoteEvent.targetMismatches.forEach(targetId => {\n      const targetData = this.listenTargets.get(targetId);\n      if (!targetData) {\n        // A watched target might have been removed already.\n        return;\n      }\n\n      // Clear the resume token for the target, since we're in a known mismatch\n      // state.\n      this.listenTargets.set(\n        targetId,\n        targetData.withResumeToken(\n          ByteString.EMPTY_BYTE_STRING,\n          targetData.snapshotVersion\n        )\n      );\n\n      // Cause a hard reset by unwatching and rewatching immediately, but\n      // deliberately don't send a resume token so that we get a full update.\n      this.sendUnwatchRequest(targetId);\n\n      // Mark the target we send as being on behalf of an existence filter\n      // mismatch, but don't actually retain that in listenTargets. This ensures\n      // that we flag the first re-listen this way without impacting future\n      // listens of this target (that might happen e.g. on reconnect).\n      const requestTargetData = new TargetData(\n        targetData.target,\n        targetId,\n        TargetPurpose.ExistenceFilterMismatch,\n        targetData.sequenceNumber\n      );\n      this.sendWatchRequest(requestTargetData);\n    });\n\n    // Finally raise remote event\n    return this.syncEngine.applyRemoteEvent(remoteEvent);\n  }\n\n  /** Handles an error on a target */\n  private handleTargetError(watchChange: WatchTargetChange): Promise<void> {\n    debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n    const error = watchChange.cause!;\n    let promiseChain = Promise.resolve();\n    watchChange.targetIds.forEach(targetId => {\n      promiseChain = promiseChain.then(async () => {\n        // A watched target might have been removed already.\n        if (this.listenTargets.has(targetId)) {\n          this.listenTargets.delete(targetId);\n          this.watchChangeAggregator!.removeTarget(targetId);\n          return this.syncEngine.rejectListen(targetId, error);\n        }\n      });\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Attempts to fill our write pipeline with writes from the LocalStore.\n   *\n   * Called internally to bootstrap or refill the write pipeline and by\n   * SyncEngine whenever there are new mutations to process.\n   *\n   * Starts the write stream if necessary.\n   */\n  async fillWritePipeline(): Promise<void> {\n    if (this.canAddToWritePipeline()) {\n      const lastBatchIdRetrieved =\n        this.writePipeline.length > 0\n          ? this.writePipeline[this.writePipeline.length - 1].batchId\n          : BATCHID_UNKNOWN;\n      const batch = await this.localStore.nextMutationBatch(\n        lastBatchIdRetrieved\n      );\n\n      if (batch === null) {\n        if (this.writePipeline.length === 0) {\n          this.writeStream.markIdle();\n        }\n      } else {\n        this.addToWritePipeline(batch);\n        await this.fillWritePipeline();\n      }\n    }\n\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  /**\n   * Returns true if we can add to the write pipeline (i.e. the network is\n   * enabled and the write pipeline is not full).\n   */\n  private canAddToWritePipeline(): boolean {\n    return (\n      this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES\n    );\n  }\n\n  // For testing\n  outstandingWrites(): number {\n    return this.writePipeline.length;\n  }\n\n  /**\n   * Queues additional writes to be sent to the write stream, sending them\n   * immediately if the write stream is established.\n   */\n  private addToWritePipeline(batch: MutationBatch): void {\n    debugAssert(\n      this.canAddToWritePipeline(),\n      'addToWritePipeline called when pipeline is full'\n    );\n    this.writePipeline.push(batch);\n\n    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private shouldStartWriteStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.writeStream.isStarted() &&\n      this.writePipeline.length > 0\n    );\n  }\n\n  private startWriteStream(): void {\n    debugAssert(\n      this.shouldStartWriteStream(),\n      'startWriteStream() called when shouldStartWriteStream() is false.'\n    );\n    this.writeStream.start();\n  }\n\n  private async onWriteStreamOpen(): Promise<void> {\n    this.writeStream.writeHandshake();\n  }\n\n  private onWriteHandshakeComplete(): Promise<void> {\n    // Record the stream token.\n    return this.localStore\n      .setLastStreamToken(this.writeStream.lastStreamToken)\n      .then(() => {\n        // Send the write pipeline now that the stream is established.\n        for (const batch of this.writePipeline) {\n          this.writeStream.writeMutations(batch.mutations);\n        }\n      })\n      .catch(ignoreIfPrimaryLeaseLoss);\n  }\n\n  private onMutationResult(\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): Promise<void> {\n    // This is a response to a write containing mutations and should be\n    // correlated to the first write in our write pipeline.\n    debugAssert(\n      this.writePipeline.length > 0,\n      'Got result for empty write pipeline'\n    );\n    const batch = this.writePipeline.shift()!;\n    const success = MutationBatchResult.from(\n      batch,\n      commitVersion,\n      results,\n      this.writeStream.lastStreamToken\n    );\n    return this.syncEngine.applySuccessfulWrite(success).then(() => {\n      // It's possible that with the completion of this mutation another\n      // slot has freed up.\n      return this.fillWritePipeline();\n    });\n  }\n\n  private async onWriteStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWriteStream(),\n        'Write stream was stopped gracefully while still needed.'\n      );\n    }\n\n    // If the write stream closed due to an error, invoke the error callbacks if\n    // there are pending writes.\n    if (error && this.writePipeline.length > 0) {\n      // A promise that is resolved after we processed the error\n      let errorHandling: Promise<void>;\n      if (this.writeStream.handshakeComplete) {\n        // This error affects the actual write.\n        errorHandling = this.handleWriteError(error!);\n      } else {\n        // If there was an error before the handshake has finished, it's\n        // possible that the server is unable to process the stream token\n        // we're sending. (Perhaps it's too old?)\n        errorHandling = this.handleHandshakeError(error!);\n      }\n\n      return errorHandling.then(() => {\n        // The write stream might have been started by refilling the write\n        // pipeline for failed writes\n        if (this.shouldStartWriteStream()) {\n          this.startWriteStream();\n        }\n      });\n    }\n    // No pending writes, nothing to do\n  }\n\n  private async handleHandshakeError(error: FirestoreError): Promise<void> {\n    // Reset the token if it's a permanent error, signaling the write stream is\n    // no longer valid. Note that the handshake does not count as a write: see\n    // comments on isPermanentWriteError for details.\n    if (isPermanentError(error.code)) {\n      logDebug(\n        LOG_TAG,\n        'RemoteStore error before completed handshake; resetting stream token: ',\n        this.writeStream.lastStreamToken\n      );\n      this.writeStream.lastStreamToken = ByteString.EMPTY_BYTE_STRING;\n\n      return this.localStore\n        .setLastStreamToken(ByteString.EMPTY_BYTE_STRING)\n        .catch(ignoreIfPrimaryLeaseLoss);\n    } else {\n      // Some other error, don't reset stream token. Our stream logic will\n      // just retry with exponential backoff.\n    }\n  }\n\n  private async handleWriteError(error: FirestoreError): Promise<void> {\n    // Only handle permanent errors here. If it's transient, just let the retry\n    // logic kick in.\n    if (isPermanentWriteError(error.code)) {\n      // This was a permanent error, the request itself was the problem\n      // so it's not going to succeed if we resend it.\n      const batch = this.writePipeline.shift()!;\n\n      // In this case it's also unlikely that the server itself is melting\n      // down -- this was just a bad request so inhibit backoff on the next\n      // restart.\n      this.writeStream.inhibitBackoff();\n\n      return this.syncEngine\n        .rejectFailedWrite(batch.batchId, error)\n        .then(() => {\n          // It's possible that with the completion of this mutation\n          // another slot has freed up.\n          return this.fillWritePipeline();\n        });\n    } else {\n      // Transient error, just let the retry logic kick in.\n    }\n  }\n\n  createTransaction(): Transaction {\n    return new Transaction(this.datastore);\n  }\n\n  private async restartNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    await this.enableNetwork();\n  }\n\n  async handleCredentialChange(): Promise<void> {\n    if (this.canUseNetwork()) {\n      // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n      // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n      // (since mutations are per-user).\n      logDebug(LOG_TAG, 'RemoteStore restarting streams for new credential');\n      await this.restartNetwork();\n    }\n  }\n\n  /**\n   * Toggles the network state when the client gains or loses its primary lease.\n   */\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    this.isPrimary = isPrimary;\n\n    if (isPrimary && this.networkEnabled) {\n      await this.enableNetwork();\n    } else if (!isPrimary) {\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { Platform } from '../platform/platform';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  syncEngine: SharedClientStateSyncer | null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly queue: AsyncQueue,\n    private readonly platform: Platform,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    if (!WebStorageSharedClientState.isAvailable(this.platform)) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'LocalStorage is not available on this platform.'\n      );\n    }\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.platform.window!.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.platform.window!.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(platform: Platform): boolean {\n    return !!(platform.window && platform.window.localStorage != null);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.platform.window!.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.platform.window!.removeEventListener(\n        'storage',\n        this.storageListener\n      );\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: StorageEvent): void {\n    if (event.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', event.key, event.newValue);\n\n      if (event.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(event);\n          return;\n        }\n\n        if (event.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(event.key)) {\n          if (event.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              event.key,\n              event.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(event.key)!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              event.key,\n              event.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              event.key,\n              event.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (event.key === this.onlineStateKey) {\n          if (event.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(event.newValue);\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (event.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(event.newValue);\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { Query } from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.documentSet = new DocumentSet(query.docComparator.bind(query));\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      this.query.hasLimitToFirst() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      this.query.hasLimitToLast() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = this.query.matches(newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.query.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.query.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.hasLimitToFirst() || this.query.hasLimitToLast()) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = this.query.hasLimitToFirst()\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.query.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { RemoteStore } from '../remote/remote_store';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly remoteStore: RemoteStore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = this.remoteStore.createTransaction();\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  LocalWriteResult,\n  MultiTabLocalStore\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatchResult, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { RemoteStore } from '../remote/remote_store';\nimport { RemoteSyncer } from '../remote/remote_syncer';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport { Query, LimitType } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { Transaction } from './transaction';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange,\n  ViewDocumentChanges\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { AsyncQueue } from '../util/async_queue';\nimport { TransactionRunner } from './transaction_runner';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * Interface implemented by EventManager to handle notifications from\n * SyncEngine.\n */\nexport interface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError(query: Query, error: Error): void;\n\n  /** Handles a change in online state. */\n  onOnlineStateChange(onlineState: OnlineState): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nexport class SyncEngine implements RemoteSyncer {\n  protected syncEngineListener: SyncEngineListener | null = null;\n\n  protected queryViewsByQuery = new ObjectMap<Query, QueryView>(q =>\n    q.canonicalId()\n  );\n  protected queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  private enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  protected activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  protected activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  protected limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  private mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  private pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  private limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    protected localStore: LocalStore,\n    protected remoteStore: RemoteStore,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    protected sharedClientState: SharedClientState,\n    private currentUser: User,\n    private maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return true;\n  }\n\n  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */\n  subscribe(syncEngineListener: SyncEngineListener): void {\n    debugAssert(\n      syncEngineListener !== null,\n      'SyncEngine listener cannot be null'\n    );\n    debugAssert(\n      this.syncEngineListener === null,\n      'SyncEngine already has a subscriber.'\n    );\n\n    this.syncEngineListener = syncEngineListener;\n  }\n\n  /**\n   * Initiates the new listen, resolves promise when listen enqueued to the\n   * server. All the subsequent view snapshots or errors are sent to the\n   * subscribed handlers. Returns the targetId of the query.\n   */\n  async listen(query: Query): Promise<TargetId> {\n    this.assertSubscribed('listen()');\n\n    let targetId;\n    let viewSnapshot;\n\n    const queryView = this.queryViewsByQuery.get(query);\n    if (queryView) {\n      // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n      // already exists when EventManager calls us for the first time. This\n      // happens when the primary tab is already listening to this query on\n      // behalf of another tab and the user of the primary also starts listening\n      // to the query. EventManager will not have an assigned target ID in this\n      // case and calls `listen` to obtain this ID.\n      targetId = queryView.targetId;\n      this.sharedClientState.addLocalQueryTarget(targetId);\n      viewSnapshot = queryView.view.computeInitialSnapshot();\n    } else {\n      const targetData = await this.localStore.allocateTarget(query.toTarget());\n\n      const status = this.sharedClientState.addLocalQueryTarget(\n        targetData.targetId\n      );\n      targetId = targetData.targetId;\n      viewSnapshot = await this.initializeViewAndComputeSnapshot(\n        query,\n        targetId,\n        status === 'current'\n      );\n      if (this.isPrimaryClient) {\n        this.remoteStore.listen(targetData);\n      }\n    }\n\n    this.syncEngineListener!.onWatchChange([viewSnapshot]);\n    return targetId;\n  }\n\n  /**\n   * Registers a view for a previously unknown query and computes its initial\n   * snapshot.\n   */\n  protected async initializeViewAndComputeSnapshot(\n    query: Query,\n    targetId: TargetId,\n    current: boolean\n  ): Promise<ViewSnapshot> {\n    const queryResult = await this.localStore.executeQuery(\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n      targetId,\n      current && this.onlineState !== OnlineState.Offline\n    );\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ this.isPrimaryClient,\n      synthesizedTargetChange\n    );\n    this.updateTrackedLimbos(targetId, viewChange.limboChanges);\n\n    debugAssert(\n      !!viewChange.snapshot,\n      'applyChanges for new view should always return a snapshot'\n    );\n\n    const data = new QueryView(query, targetId, view);\n    this.queryViewsByQuery.set(query, data);\n    if (this.queriesByTarget.has(targetId)) {\n      this.queriesByTarget.get(targetId)!.push(query);\n    } else {\n      this.queriesByTarget.set(targetId, [query]);\n    }\n    return viewChange.snapshot!;\n  }\n\n  /** Stops listening to the query. */\n  async unlisten(query: Query): Promise<void> {\n    this.assertSubscribed('unlisten()');\n\n    const queryView = this.queryViewsByQuery.get(query)!;\n    debugAssert(!!queryView, 'Trying to unlisten on query not found:' + query);\n\n    // Only clean up the query view and target if this is the only query mapped\n    // to the target.\n    const queries = this.queriesByTarget.get(queryView.targetId)!;\n    if (queries.length > 1) {\n      this.queriesByTarget.set(\n        queryView.targetId,\n        queries.filter(q => !q.isEqual(query))\n      );\n      this.queryViewsByQuery.delete(query);\n      return;\n    }\n\n    // No other queries are mapped to the target, clean up the query and the target.\n    if (this.isPrimaryClient) {\n      // We need to remove the local query target first to allow us to verify\n      // whether any other client is still interested in this target.\n      this.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n      const targetRemainsActive = this.sharedClientState.isActiveQueryTarget(\n        queryView.targetId\n      );\n\n      if (!targetRemainsActive) {\n        await this.localStore\n          .releaseTarget(queryView.targetId, /*keepPersistedTargetData=*/ false)\n          .then(() => {\n            this.sharedClientState.clearQueryState(queryView.targetId);\n            this.remoteStore.unlisten(queryView.targetId);\n            this.removeAndCleanupTarget(queryView.targetId);\n          })\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    } else {\n      this.removeAndCleanupTarget(queryView.targetId);\n      await this.localStore.releaseTarget(\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ true\n      );\n    }\n  }\n\n  /**\n   * Initiates the write of local mutation batch which involves adding the\n   * writes to the mutation queue, notifying the remote store about new\n   * mutations and raising events for any changes this write caused.\n   *\n   * The promise returned by this call is resolved when the above steps\n   * have completed, *not* when the write was acked by the backend. The\n   * userCallback is resolved once the write was acked/rejected by the\n   * backend (or failed locally for any other reason).\n   */\n  async write(batch: Mutation[], userCallback: Deferred<void>): Promise<void> {\n    this.assertSubscribed('write()');\n\n    let result: LocalWriteResult;\n    try {\n      result = await this.localStore.localWrite(batch);\n    } catch (e) {\n      if (e.name === 'IndexedDbTransactionError') {\n        // If we can't persist the mutation, we reject the user callback and\n        // don't send the mutation. The user can then retry the write.\n        logError(LOG_TAG, 'Dropping write that cannot be persisted: ' + e);\n        userCallback.reject(\n          new FirestoreError(Code.UNAVAILABLE, 'Failed to persist write: ' + e)\n        );\n        return;\n      } else {\n        throw e;\n      }\n    }\n\n    this.sharedClientState.addPendingMutation(result.batchId);\n    this.addMutationCallback(result.batchId, userCallback);\n    await this.emitNewSnapsAndNotifyLocalStore(result.changes);\n    await this.remoteStore.fillWritePipeline();\n  }\n\n  /**\n   * Takes an updateFunction in which a set of reads and writes can be performed\n   * atomically. In the updateFunction, the client can read and write values\n   * using the supplied transaction object. After the updateFunction, all\n   * changes will be committed. If a retryable error occurs (ex: some other\n   * client has changed any of the data referenced), then the updateFunction\n   * will be called again after a backoff. If the updateFunction still fails\n   * after all retries, then the transaction will be rejected.\n   *\n   * The transaction object passed to the updateFunction contains methods for\n   * accessing documents and collections. Unlike other datastore access, data\n   * accessed with the transaction will not reflect local changes that have not\n   * been committed. For this reason, it is required that all reads are\n   * performed before any writes. Transactions must be performed while online.\n   *\n   * The Deferred input is resolved when the transaction is fully committed.\n   */\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void {\n    new TransactionRunner<T>(\n      asyncQueue,\n      this.remoteStore,\n      updateFunction,\n      deferred\n    ).run();\n  }\n\n  async applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void> {\n    this.assertSubscribed('applyRemoteEvent()');\n    try {\n      const changes = await this.localStore.applyRemoteEvent(remoteEvent);\n      // Update `receivedDocument` as appropriate for any limbo targets.\n      remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n        const limboResolution = this.activeLimboResolutionsByTarget.get(\n          targetId\n        );\n        if (limboResolution) {\n          // Since this is a limbo resolution lookup, it's for a single document\n          // and it could be added, modified, or removed, but not a combination.\n          hardAssert(\n            targetChange.addedDocuments.size +\n              targetChange.modifiedDocuments.size +\n              targetChange.removedDocuments.size <=\n              1,\n            'Limbo resolution for single document contains multiple changes.'\n          );\n          if (targetChange.addedDocuments.size > 0) {\n            limboResolution.receivedDocument = true;\n          } else if (targetChange.modifiedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received change for limbo target document without add.'\n            );\n          } else if (targetChange.removedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received remove for limbo target document without add.'\n            );\n            limboResolution.receivedDocument = false;\n          } else {\n            // This was probably just a CURRENT targetChange or similar.\n          }\n        }\n      });\n      await this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the sync engine and notifies any views of\n   * the change.\n   */\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    this.assertSubscribed('applyOnlineStateChange()');\n    const newViewSnapshots = [] as ViewSnapshot[];\n    this.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      debugAssert(\n        viewChange.limboChanges.length === 0,\n        'OnlineState should not affect limbo documents.'\n      );\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    this.syncEngineListener!.onOnlineStateChange(onlineState);\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    this.onlineState = onlineState;\n  }\n\n  async rejectListen(targetId: TargetId, err: FirestoreError): Promise<void> {\n    this.assertSubscribed('rejectListens()');\n\n    // PORTING NOTE: Multi-tab only.\n    this.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    const limboKey = limboResolution && limboResolution.key;\n    if (limboKey) {\n      // Since this query failed, we won't want to manually unlisten to it.\n      // So go ahead and remove it from bookkeeping.\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(\n        limboKey\n      );\n      this.activeLimboResolutionsByTarget.delete(targetId);\n      this.pumpEnqueuedLimboResolutions();\n\n      // TODO(klimt): We really only should do the following on permission\n      // denied errors, but we don't have the cause code here.\n\n      // It's a limbo doc. Create a synthetic event saying it was deleted.\n      // This is kind of a hack. Ideally, we would have a method in the local\n      // store to purge a document. However, it would be tricky to keep all of\n      // the local store's invariants with another method.\n      let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n        DocumentKey.comparator\n      );\n      documentUpdates = documentUpdates.insert(\n        limboKey,\n        new NoDocument(limboKey, SnapshotVersion.forDeletedDoc())\n      );\n      const resolvedLimboDocuments = documentKeySet().add(limboKey);\n      const event = new RemoteEvent(\n        SnapshotVersion.MIN,\n        /* targetChanges= */ new Map<TargetId, TargetChange>(),\n        /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n        documentUpdates,\n        resolvedLimboDocuments\n      );\n      return this.applyRemoteEvent(event);\n    } else {\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => this.removeAndCleanupTarget(targetId, err))\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n\n  async applySuccessfulWrite(\n    mutationBatchResult: MutationBatchResult\n  ): Promise<void> {\n    this.assertSubscribed('applySuccessfulWrite()');\n\n    const batchId = mutationBatchResult.batch.batchId;\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught\n    // up), so we raise user callbacks first so that they consistently happen\n    // before listen events.\n    this.processUserCallback(batchId, /*error=*/ null);\n\n    this.triggerPendingWritesCallbacks(batchId);\n\n    try {\n      const changes = await this.localStore.acknowledgeBatch(\n        mutationBatchResult\n      );\n      this.sharedClientState.updateMutationState(batchId, 'acknowledged');\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async rejectFailedWrite(\n    batchId: BatchId,\n    error: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('rejectFailedWrite()');\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught up),\n    // so we raise user callbacks first so that they consistently happen before\n    // listen events.\n    this.processUserCallback(batchId, error);\n\n    this.triggerPendingWritesCallbacks(batchId);\n\n    try {\n      const changes = await this.localStore.rejectBatch(batchId);\n      this.sharedClientState.updateMutationState(batchId, 'rejected', error);\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Registers a user callback that resolves when all pending mutations at the moment of calling\n   * are acknowledged .\n   */\n  async registerPendingWritesCallback(callback: Deferred<void>): Promise<void> {\n    if (!this.remoteStore.canUseNetwork()) {\n      logDebug(\n        LOG_TAG,\n        'The network is disabled. The task returned by ' +\n          \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n      );\n    }\n\n    const highestBatchId = await this.localStore.getHighestUnacknowledgedBatchId();\n    if (highestBatchId === BATCHID_UNKNOWN) {\n      // Trigger the callback right away if there is no pending writes at the moment.\n      callback.resolve();\n      return;\n    }\n\n    const callbacks = this.pendingWritesCallbacks.get(highestBatchId) || [];\n    callbacks.push(callback);\n    this.pendingWritesCallbacks.set(highestBatchId, callbacks);\n  }\n\n  /**\n   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n   * if there are any.\n   */\n  private triggerPendingWritesCallbacks(batchId: BatchId): void {\n    (this.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n      callback.resolve();\n    });\n\n    this.pendingWritesCallbacks.delete(batchId);\n  }\n\n  /** Reject all outstanding callbacks waiting for pending writes to complete. */\n  private rejectOutstandingPendingWritesCallbacks(errorMessage: string): void {\n    this.pendingWritesCallbacks.forEach(callbacks => {\n      callbacks.forEach(callback => {\n        callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n      });\n    });\n\n    this.pendingWritesCallbacks.clear();\n  }\n\n  private addMutationCallback(\n    batchId: BatchId,\n    callback: Deferred<void>\n  ): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n    if (!newCallbacks) {\n      newCallbacks = new SortedMap<BatchId, Deferred<void>>(\n        primitiveComparator\n      );\n    }\n    newCallbacks = newCallbacks.insert(batchId, callback);\n    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n  }\n\n  /**\n   * Resolves or rejects the user callback for the given batch and then discards\n   * it.\n   */\n  protected processUserCallback(batchId: BatchId, error: Error | null): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\n    // okay for there to be no callback for this ID.\n    if (newCallbacks) {\n      const callback = newCallbacks.get(batchId);\n      if (callback) {\n        debugAssert(\n          batchId === newCallbacks.minKey(),\n          'Mutation callbacks processed out-of-order?'\n        );\n        if (error) {\n          callback.reject(error);\n        } else {\n          callback.resolve();\n        }\n        newCallbacks = newCallbacks.remove(batchId);\n      }\n      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    }\n  }\n\n  protected removeAndCleanupTarget(\n    targetId: number,\n    error: Error | null = null\n  ): void {\n    this.sharedClientState.removeLocalQueryTarget(targetId);\n\n    debugAssert(\n      this.queriesByTarget.has(targetId) &&\n        this.queriesByTarget.get(targetId)!.length !== 0,\n      `There are no queries mapped to target id ${targetId}`\n    );\n\n    for (const query of this.queriesByTarget.get(targetId)!) {\n      this.queryViewsByQuery.delete(query);\n      if (error) {\n        this.syncEngineListener!.onWatchError(query, error);\n      }\n    }\n\n    this.queriesByTarget.delete(targetId);\n\n    if (this.isPrimaryClient) {\n      const limboKeys = this.limboDocumentRefs.referencesForId(targetId);\n      this.limboDocumentRefs.removeReferencesForId(targetId);\n      limboKeys.forEach(limboKey => {\n        const isReferenced = this.limboDocumentRefs.containsKey(limboKey);\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboKey);\n        }\n      });\n    }\n  }\n\n  private removeLimboTarget(key: DocumentKey): void {\n    // It's possible that the target already got removed because the query failed. In that case,\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n    const limboTargetId = this.activeLimboTargetsByKey.get(key);\n    if (limboTargetId === null) {\n      // This target already got removed, because the query failed.\n      return;\n    }\n\n    this.remoteStore.unlisten(limboTargetId);\n    this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(key);\n    this.activeLimboResolutionsByTarget.delete(limboTargetId);\n    this.pumpEnqueuedLimboResolutions();\n  }\n\n  protected updateTrackedLimbos(\n    targetId: TargetId,\n    limboChanges: LimboDocumentChange[]\n  ): void {\n    for (const limboChange of limboChanges) {\n      if (limboChange instanceof AddedLimboDocument) {\n        this.limboDocumentRefs.addReference(limboChange.key, targetId);\n        this.trackLimboChange(limboChange);\n      } else if (limboChange instanceof RemovedLimboDocument) {\n        logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n        this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n        const isReferenced = this.limboDocumentRefs.containsKey(\n          limboChange.key\n        );\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboChange.key);\n        }\n      } else {\n        fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n      }\n    }\n  }\n\n  private trackLimboChange(limboChange: AddedLimboDocument): void {\n    const key = limboChange.key;\n    if (!this.activeLimboTargetsByKey.get(key)) {\n      logDebug(LOG_TAG, 'New document in limbo: ' + key);\n      this.enqueuedLimboResolutions.push(key);\n      this.pumpEnqueuedLimboResolutions();\n    }\n  }\n\n  /**\n   * Starts listens for documents in limbo that are enqueued for resolution,\n   * subject to a maximum number of concurrent resolutions.\n   *\n   * Without bounding the number of concurrent resolutions, the server can fail\n   * with \"resource exhausted\" errors which can lead to pathological client\n   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n   */\n  private pumpEnqueuedLimboResolutions(): void {\n    while (\n      this.enqueuedLimboResolutions.length > 0 &&\n      this.activeLimboTargetsByKey.size < this.maxConcurrentLimboResolutions\n    ) {\n      const key = this.enqueuedLimboResolutions.shift()!;\n      const limboTargetId = this.limboTargetIdGenerator.next();\n      this.activeLimboResolutionsByTarget.set(\n        limboTargetId,\n        new LimboResolution(key)\n      );\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.insert(\n        key,\n        limboTargetId\n      );\n      this.remoteStore.listen(\n        new TargetData(\n          Query.atPath(key.path).toTarget(),\n          limboTargetId,\n          TargetPurpose.LimboResolution,\n          ListenSequence.INVALID\n        )\n      );\n    }\n  }\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId> {\n    return this.activeLimboTargetsByKey;\n  }\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[] {\n    return this.enqueuedLimboResolutions;\n  }\n\n  protected async emitNewSnapsAndNotifyLocalStore(\n    changes: MaybeDocumentMap,\n    remoteEvent?: RemoteEvent\n  ): Promise<void> {\n    const newSnaps: ViewSnapshot[] = [];\n    const docChangesInAllViews: LocalViewChanges[] = [];\n    const queriesProcessed: Array<Promise<void>> = [];\n\n    this.queryViewsByQuery.forEach((_, queryView) => {\n      queriesProcessed.push(\n        Promise.resolve()\n          .then(() => {\n            const viewDocChanges = queryView.view.computeDocChanges(changes);\n            if (!viewDocChanges.needsRefill) {\n              return viewDocChanges;\n            }\n            // The query has a limit and some docs were removed, so we need\n            // to re-run the query against the local store to make sure we\n            // didn't lose any good docs that had been past the limit.\n            return this.localStore\n              .executeQuery(queryView.query, /* usePreviousResults= */ false)\n              .then(({ documents }) => {\n                return queryView.view.computeDocChanges(\n                  documents,\n                  viewDocChanges\n                );\n              });\n          })\n          .then((viewDocChanges: ViewDocumentChanges) => {\n            const targetChange =\n              remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n            const viewChange = queryView.view.applyChanges(\n              viewDocChanges,\n              /* updateLimboDocuments= */ this.isPrimaryClient,\n              targetChange\n            );\n            this.updateTrackedLimbos(\n              queryView.targetId,\n              viewChange.limboChanges\n            );\n            if (viewChange.snapshot) {\n              if (this.isPrimaryClient) {\n                this.sharedClientState.updateQueryState(\n                  queryView.targetId,\n                  viewChange.snapshot.fromCache ? 'not-current' : 'current'\n                );\n              }\n\n              newSnaps.push(viewChange.snapshot);\n              const docChanges = LocalViewChanges.fromSnapshot(\n                queryView.targetId,\n                viewChange.snapshot\n              );\n              docChangesInAllViews.push(docChanges);\n            }\n          })\n      );\n    });\n\n    await Promise.all(queriesProcessed);\n    this.syncEngineListener!.onWatchChange(newSnaps);\n    await this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n  }\n\n  protected assertSubscribed(fnName: string): void {\n    debugAssert(\n      this.syncEngineListener !== null,\n      'Trying to call ' + fnName + ' before calling subscribe().'\n    );\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    const userChanged = !this.currentUser.isEqual(user);\n    this.currentUser = user;\n\n    if (userChanged) {\n      // Fails tasks waiting for pending writes requested by previous user.\n      this.rejectOutstandingPendingWritesCallbacks(\n        \"'waitForPendingWrites' promise is rejected due to a user change.\"\n      );\n\n      const result = await this.localStore.handleUserChange(user);\n      // TODO(b/114226417): Consider calling this only in the primary tab.\n      this.sharedClientState.handleUserChange(\n        user,\n        result.removedBatchIds,\n        result.addedBatchIds\n      );\n      await this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments);\n    }\n\n    await this.remoteStore.handleCredentialChange();\n  }\n\n  enableNetwork(): Promise<void> {\n    return this.remoteStore.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    return this.remoteStore.disableNetwork();\n  }\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    if (limboResolution && limboResolution.receivedDocument) {\n      return documentKeySet().add(limboResolution.key);\n    } else {\n      let keySet = documentKeySet();\n      const queries = this.queriesByTarget.get(targetId);\n      if (!queries) {\n        return keySet;\n      }\n      for (const query of queries) {\n        const queryView = this.queryViewsByQuery.get(query);\n        debugAssert(!!queryView, `No query view found for ${query}`);\n        keySet = keySet.unionWith(queryView.view.syncedDocuments);\n      }\n      return keySet;\n    }\n  }\n}\n\n/**\n * An impplementation of SyncEngine that implement SharedClientStateSyncer for\n * Multi-Tab synchronization.\n */\n// PORTING NOTE: Web only\nexport class MultiTabSyncEngine extends SyncEngine\n  implements SharedClientStateSyncer {\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  private isPrimary: undefined | boolean = undefined;\n\n  constructor(\n    protected localStore: MultiTabLocalStore,\n    remoteStore: RemoteStore,\n    sharedClientState: SharedClientState,\n    currentUser: User,\n    maxConcurrentLimboResolutions: number\n  ) {\n    super(\n      localStore,\n      remoteStore,\n      sharedClientState,\n      currentUser,\n      maxConcurrentLimboResolutions\n    );\n  }\n\n  get isPrimaryClient(): boolean {\n    return this.isPrimary === true;\n  }\n\n  enableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(true);\n    return super.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(false);\n    return super.disableNetwork();\n  }\n\n  /**\n   * Reconcile the list of synced documents in an existing view with those\n   * from persistence.\n   */\n  private async synchronizeViewAndComputeSnapshot(\n    queryView: QueryView\n  ): Promise<ViewChange> {\n    const queryResult = await this.localStore.executeQuery(\n      queryView.query,\n      /* usePreviousResults= */ true\n    );\n    const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n      queryResult\n    );\n    if (this.isPrimary) {\n      this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);\n    }\n    return viewSnapshot;\n  }\n\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    // If we are the primary client, the online state of all clients only\n    // depends on the online state of the local RemoteStore.\n    if (this.isPrimaryClient && source === OnlineStateSource.RemoteStore) {\n      super.applyOnlineStateChange(onlineState, source);\n      this.sharedClientState.setOnlineState(onlineState);\n    }\n\n    // If we are the secondary client, we explicitly ignore the remote store's\n    // online state (the local client may go offline, even though the primary\n    // tab remains online) and only apply the primary tab's online state from\n    // SharedClientState.\n    if (\n      !this.isPrimaryClient &&\n      source === OnlineStateSource.SharedClientState\n    ) {\n      super.applyOnlineStateChange(onlineState, source);\n    }\n  }\n\n  async applyBatchState(\n    batchId: BatchId,\n    batchState: MutationBatchState,\n    error?: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('applyBatchState()');\n    const documents = await this.localStore.lookupMutationDocuments(batchId);\n\n    if (documents === null) {\n      // A throttled tab may not have seen the mutation before it was completed\n      // and removed from the mutation queue, in which case we won't have cached\n      // the affected documents. In this case we can safely ignore the update\n      // since that means we didn't apply the mutation locally at all (if we\n      // had, we would have cached the affected documents), and so we will just\n      // see any resulting document changes via normal remote document updates\n      // as applicable.\n      logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n      return;\n    }\n\n    if (batchState === 'pending') {\n      // If we are the primary client, we need to send this write to the\n      // backend. Secondary clients will ignore these writes since their remote\n      // connection is disabled.\n      await this.remoteStore.fillWritePipeline();\n    } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n      // NOTE: Both these methods are no-ops for batches that originated from\n      // other clients.\n      this.processUserCallback(batchId, error ? error : null);\n      this.localStore.removeCachedMutationBatchMetadata(batchId);\n    } else {\n      fail(`Unknown batchState: ${batchState}`);\n    }\n\n    await this.emitNewSnapsAndNotifyLocalStore(documents);\n  }\n\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary === true && this.isPrimary !== true) {\n      this.isPrimary = true;\n      await this.remoteStore.applyPrimaryState(true);\n\n      // Secondary tabs only maintain Views for their local listeners and the\n      // Views internal state may not be 100% populated (in particular\n      // secondary tabs don't track syncedDocuments, the set of documents the\n      // server considers to be in the target). So when a secondary becomes\n      // primary, we need to need to make sure that all views for all targets\n      // match the state on disk.\n      const activeTargets = this.sharedClientState.getAllActiveQueryTargets();\n      const activeQueries = await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets.toArray()\n      );\n      for (const targetData of activeQueries) {\n        this.remoteStore.listen(targetData);\n      }\n    } else if (isPrimary === false && this.isPrimary !== false) {\n      this.isPrimary = false;\n\n      const activeTargets: TargetId[] = [];\n\n      let p = Promise.resolve();\n      this.queriesByTarget.forEach((_, targetId) => {\n        if (this.sharedClientState.isLocalQueryTarget(targetId)) {\n          activeTargets.push(targetId);\n        } else {\n          p = p.then(() => {\n            this.removeAndCleanupTarget(targetId);\n            return this.localStore.releaseTarget(\n              targetId,\n              /*keepPersistedTargetData=*/ true\n            );\n          });\n        }\n        this.remoteStore.unlisten(targetId);\n      });\n      await p;\n\n      await this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets);\n      this.resetLimboDocuments();\n      await this.remoteStore.applyPrimaryState(false);\n    }\n  }\n\n  private resetLimboDocuments(): void {\n    this.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n      this.remoteStore.unlisten(targetId);\n    });\n    this.limboDocumentRefs.removeAllReferences();\n    this.activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n    this.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n      DocumentKey.comparator\n    );\n  }\n\n  /**\n   * Reconcile the query views of the provided query targets with the state from\n   * persistence. Raises snapshots for any changes that affect the local\n   * client and returns the updated state of all target's query data.\n   */\n  private async synchronizeQueryViewsAndRaiseSnapshots(\n    targets: TargetId[]\n  ): Promise<TargetData[]> {\n    const activeQueries: TargetData[] = [];\n    const newViewSnapshots: ViewSnapshot[] = [];\n    for (const targetId of targets) {\n      let targetData: TargetData;\n      const queries = this.queriesByTarget.get(targetId);\n\n      if (queries && queries.length !== 0) {\n        // For queries that have a local View, we need to update their state\n        // in LocalStore (as the resume token and the snapshot version\n        // might have changed) and reconcile their views with the persisted\n        // state (the list of syncedDocuments may have gotten out of sync).\n        await this.localStore.releaseTarget(\n          targetId,\n          /*keepPersistedTargetData=*/ true\n        );\n        targetData = await this.localStore.allocateTarget(\n          queries[0].toTarget()\n        );\n\n        for (const query of queries) {\n          const queryView = this.queryViewsByQuery.get(query);\n          debugAssert(!!queryView, `No query view found for ${query}`);\n\n          const viewChange = await this.synchronizeViewAndComputeSnapshot(\n            queryView\n          );\n          if (viewChange.snapshot) {\n            newViewSnapshots.push(viewChange.snapshot);\n          }\n        }\n      } else {\n        debugAssert(\n          this.isPrimary === true,\n          'A secondary tab should never have an active target without an active query.'\n        );\n        // For queries that never executed on this client, we need to\n        // allocate the target in LocalStore and initialize a new View.\n        const target = await this.localStore.getTarget(targetId);\n        debugAssert(!!target, `Target for id ${targetId} not found`);\n        targetData = await this.localStore.allocateTarget(target);\n        await this.initializeViewAndComputeSnapshot(\n          this.synthesizeTargetToQuery(target!),\n          targetId,\n          /*current=*/ false\n        );\n      }\n\n      activeQueries.push(targetData!);\n    }\n\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    return activeQueries;\n  }\n\n  /**\n   * Creates a `Query` object from the specified `Target`. There is no way to\n   * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n   * object.\n   *\n   * The synthesized result might be different from the original `Query`, but\n   * since the synthesized `Query` should return the same results as the\n   * original one (only the presentation of results might differ), the potential\n   * difference will not cause issues.\n   */\n  private synthesizeTargetToQuery(target: Target): Query {\n    return new Query(\n      target.path,\n      target.collectionGroup,\n      target.orderBy,\n      target.filters,\n      target.limit,\n      LimitType.First,\n      target.startAt,\n      target.endAt\n    );\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.localStore.getActiveClients();\n  }\n\n  async applyTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): Promise<void> {\n    if (this.isPrimary) {\n      // If we receive a target state notification via WebStorage, we are\n      // either already secondary or another tab has taken the primary lease.\n      logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n      return;\n    }\n\n    if (this.queriesByTarget.has(targetId)) {\n      switch (state) {\n        case 'current':\n        case 'not-current': {\n          const changes = await this.localStore.getNewDocumentChanges();\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n            targetId,\n            state === 'current'\n          );\n          await this.emitNewSnapsAndNotifyLocalStore(\n            changes,\n            synthesizedRemoteEvent\n          );\n          break;\n        }\n        case 'rejected': {\n          await this.localStore.releaseTarget(\n            targetId,\n            /* keepPersistedTargetData */ true\n          );\n          this.removeAndCleanupTarget(targetId, error);\n          break;\n        }\n        default:\n          fail('Unexpected target state: ' + state);\n      }\n    }\n  }\n\n  async applyActiveTargetsChange(\n    added: TargetId[],\n    removed: TargetId[]\n  ): Promise<void> {\n    if (!this.isPrimary) {\n      return;\n    }\n\n    for (const targetId of added) {\n      if (this.queriesByTarget.has(targetId)) {\n        // A target might have been added in a previous attempt\n        logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n        continue;\n      }\n\n      const target = await this.localStore.getTarget(targetId);\n      debugAssert(\n        !!target,\n        `Query data for active target ${targetId} not found`\n      );\n      const targetData = await this.localStore.allocateTarget(target);\n      await this.initializeViewAndComputeSnapshot(\n        this.synthesizeTargetToQuery(target),\n        targetData.targetId,\n        /*current=*/ false\n      );\n      this.remoteStore.listen(targetData);\n    }\n\n    for (const targetId of removed) {\n      // Check that the target is still active since the target might have been\n      // removed if it has been rejected by the backend.\n      if (!this.queriesByTarget.has(targetId)) {\n        continue;\n      }\n\n      // Release queries that are still active.\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => {\n          this.remoteStore.unlisten(targetId);\n          this.removeAndCleanupTarget(targetId);\n        })\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Query } from './query';\nimport { SyncEngine, SyncEngineListener } from './sync_engine';\nimport { OnlineState, TargetId } from './types';\nimport { DocumentViewChange, ChangeType, ViewSnapshot } from './view_snapshot';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | null = null;\n  targetId: TargetId = 0;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager implements SyncEngineListener {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(q =>\n    q.canonicalId()\n  );\n\n  private onlineState = OnlineState.Unknown;\n\n  private snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(this);\n  }\n\n  listen(listener: QueryListener): Promise<TargetId> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n      this.queries.set(query, queryInfo);\n    }\n    queryInfo.listeners.push(listener);\n\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\n    const raisedEvent = listener.applyOnlineStateChange(this.onlineState);\n    debugAssert(\n      !raisedEvent,\n      \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n    );\n\n    if (queryInfo.viewSnap) {\n      const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n      if (raisedEvent) {\n        this.raiseSnapshotsInSyncEvent();\n      }\n    }\n\n    if (firstListen) {\n      return this.syncEngine.listen(query).then(targetId => {\n        queryInfo!.targetId = targetId;\n        return targetId;\n      });\n    } else {\n      return Promise.resolve(queryInfo.targetId);\n    }\n  }\n\n  async unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    }\n  }\n\n  onWatchChange(viewSnaps: ViewSnapshot[]): void {\n    let raisedEvent = false;\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          if (listener.onViewSnapshot(viewSnap)) {\n            raisedEvent = true;\n          }\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  onWatchError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChange(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        // Run global snapshot listeners if a consistent snapshot has been emitted.\n        if (listener.applyOnlineStateChange(onlineState)) {\n          raisedEvent = true;\n        }\n      }\n    });\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.add(observer);\n    // Immediately fire an initial event, indicating all existing listeners\n    // are in-sync.\n    observer.next();\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.delete(observer);\n  }\n\n  // Call all global snapshot listeners that have been set.\n  private raiseSnapshotsInSyncEvent(): void {\n    this.snapshotsInSyncListeners.forEach(observer => {\n      observer.next();\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { LimitType, Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (query.matchesAllDocuments()) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.MIN)) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (query.hasLimitToFirst() || query.hasLimitToLast()) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            query.toString()\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>((d1, d2) =>\n      query.docComparator(d1, d2)\n    );\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query: %s',\n        query.toString()\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.MIN\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { ByteString } from '../util/byte_string';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   */\n  private lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  acknowledgeBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch,\n    streamToken: ByteString\n  ): PersistencePromise<void> {\n    const batchId = batch.batchId;\n    const batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n    hardAssert(\n      batchIndex === 0,\n      'Can only acknowledge the first batch in the mutation queue'\n    );\n\n    // Verify that the batch in the queue is the one to be acknowledged.\n    const check = this.mutationQueue[batchIndex];\n    debugAssert(\n      batchId === check.batchId,\n      'Queue ordering failure: expected batch ' +\n        batchId +\n        ', got batch ' +\n        check.batchId\n    );\n\n    this.lastStreamToken = streamToken;\n    return PersistencePromise.resolve();\n  }\n\n  getLastStreamToken(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ByteString> {\n    return PersistencePromise.resolve(this.lastStreamToken);\n  }\n\n  setLastStreamToken(\n    transaction: PersistenceTransaction,\n    streamToken: ByteString\n  ): PersistencePromise<void> {\n    this.lastStreamToken = streamToken;\n    return PersistencePromise.resolve();\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.removeMutationReference(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport class MemoryRemoteDocumentCache implements RemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.MIN),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentCache.RemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    constructor(private readonly documentCache: MemoryRemoteDocumentCache) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n      this.changes.forEach((key, doc) => {\n        if (doc) {\n          promises.push(\n            this.documentCache.addEntry(transaction, doc, this.readTime)\n          );\n        } else {\n          this.documentCache.removeEntry(key);\n        }\n      });\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      return this.documentCache.getEntry(transaction, documentKey);\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      return this.documentCache.getEntries(transaction, documentKeys);\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(key => key.toString());\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { Target } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(t => t.canonicalId());\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.addReference(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.removeReference(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = new MemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  private inMemoryPins: ReferenceSet | null = null;\n  private _orphanedDocuments: Set<DocumentKey> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<DocumentKey> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  setInMemoryPins(inMemoryPins: ReferenceSet): void {\n    this.inMemoryPins = inMemoryPins;\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.delete(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<DocumentKey>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (key: DocumentKey) => {\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key);\n      } else {\n        this.orphanedDocuments.add(key);\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => PersistencePromise.resolve(this.inMemoryPins!.containsKey(key))\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private inMemoryPins: ReferenceSet | null = null;\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(k => encodeResourcePath(k.path));\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  setInMemoryPins(inMemoryPins: ReferenceSet): void {\n    this.inMemoryPins = inMemoryPins;\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => PersistencePromise.resolve(this.inMemoryPins!.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport { LocalStore, MultiTabLocalStore } from '../local/local_store';\nimport { MultiTabSyncEngine, SyncEngine } from './sync_engine';\nimport { RemoteStore } from '../remote/remote_store';\nimport { EventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseInfo } from './database_info';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { PersistenceSettings } from './firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  platform: Platform;\n  datastore: Datastore;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n  persistenceSettings: PersistenceSettings;\n}\n\n/**\n * Initializes and wires up all core components for Firestore. Implementations\n * override `initialize()` to provide all components.\n */\nexport interface ComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  syncEngine: SyncEngine;\n  gcScheduler: GarbageCollectionScheduler | null;\n  remoteStore: RemoteStore;\n  eventManager: EventManager;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  clearPersistence(databaseId: DatabaseInfo): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryComponentProvider implements ComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  syncEngine!: SyncEngine;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  remoteStore!: RemoteStore;\n  eventManager!: EventManager;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.syncEngine = this.createSyncEngine(cfg);\n    this.eventManager = this.createEventManager(cfg);\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      this.syncEngine.applyOnlineStateChange(\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n    this.remoteStore.syncEngine = this.syncEngine;\n\n    await this.localStore.start();\n    await this.sharedClientState.start();\n    await this.remoteStore.start();\n\n    await this.remoteStore.applyPrimaryState(this.syncEngine.isPrimaryClient);\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return new EventManager(this.syncEngine);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new LocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      !cfg.persistenceSettings.durable,\n      'Can only start memory persistence'\n    );\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return new RemoteStore(\n      this.localStore,\n      cfg.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        this.syncEngine.applyOnlineStateChange(\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      cfg.platform.newConnectivityMonitor()\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    return new SyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbComponentProvider extends MemoryComponentProvider {\n  persistence!: IndexedDbPersistence;\n\n  // TODO(tree-shaking): Create an IndexedDbComponentProvider and a\n  // MultiTabComponentProvider. The IndexedDbComponentProvider should depend\n  // on LocalStore and SyncEngine.\n  localStore!: MultiTabLocalStore;\n  syncEngine!: MultiTabSyncEngine;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await (this.syncEngine as MultiTabSyncEngine).applyPrimaryState(\n        isPrimary\n      );\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new MultiTabLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    const syncEngine = new MultiTabSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = syncEngine;\n    }\n    return syncEngine;\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      cfg.persistenceSettings.durable,\n      'Can only start durable persistence'\n    );\n\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      cfg.databaseInfo\n    );\n    const serializer = cfg.platform.newSerializer(cfg.databaseInfo.databaseId);\n    return new IndexedDbPersistence(\n      cfg.persistenceSettings.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      cfg.platform,\n      LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes),\n      cfg.asyncQueue,\n      serializer,\n      this.sharedClientState\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    if (\n      cfg.persistenceSettings.durable &&\n      cfg.persistenceSettings.synchronizeTabs\n    ) {\n      if (!WebStorageSharedClientState.isAvailable(cfg.platform)) {\n        throw new FirestoreError(\n          Code.UNIMPLEMENTED,\n          'IndexedDB persistence is only available on platforms that support LocalStorage.'\n        );\n      }\n      const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n        cfg.databaseInfo\n      );\n      return new WebStorageSharedClientState(\n        cfg.asyncQueue,\n        cfg.platform,\n        persistenceKey,\n        cfg.clientId,\n        cfg.initialUser\n      );\n    }\n    return new MemorySharedClientState();\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      databaseInfo\n    );\n    return IndexedDbPersistence.clearPersistence(persistenceKey);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { LocalStore } from '../local/local_store';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { View } from './view';\n\nimport { SharedClientState } from '../local/shared_client_state';\nimport { AutoId } from '../util/misc';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from './component_provider';\n\nconst LOG_TAG = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport type PersistenceSettings =\n  | {\n      readonly durable: false;\n    }\n  | {\n      readonly durable: true;\n      readonly cacheSizeBytes: number;\n      readonly synchronizeTabs: boolean;\n    };\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private eventMgr!: EventManager;\n  private persistence!: Persistence;\n  private localStore!: LocalStore;\n  private remoteStore!: RemoteStore;\n  private syncEngine!: SyncEngine;\n  private gcScheduler!: GarbageCollectionScheduler | null;\n\n  // PORTING NOTE: SharedClientState is only used for multi-tab web.\n  private sharedClientState!: SharedClientState;\n\n  private readonly clientId = AutoId.newId();\n\n  constructor(\n    private platform: Platform,\n    private databaseInfo: DatabaseInfo,\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param componentProvider Provider that returns all core components.\n   * @param persistenceSettings Settings object to configure offline\n   *     persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  start(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    this.verifyNotTerminated();\n    // We defer our initialization until we get the current user from\n    // setChangeListener(). We block the async queue until we got the initial\n    // user and the initialization is completed. This will prevent any scheduled\n    // work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        logDebug(LOG_TAG, 'Initializing. user=', user.uid);\n\n        return this.initializeComponents(\n          componentProvider,\n          persistenceSettings,\n          user,\n          persistenceResult\n        ).then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.enqueueAndForget(() => {\n          return this.handleCredentialChange(user);\n        });\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.enqueueAndForget(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  enableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param componentProvider The provider that provides all core componennts\n   *     for IndexedDB or memory-backed persistence\n   * @param persistenceSettings Settings object to configure offline persistence\n   * @param user The initial user\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private async initializeComponents(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings,\n    user: User,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    try {\n      // TODO(mrschmidt): Ideally, ComponentProvider would also initialize\n      // Datastore (without duplicating the initializing logic once per\n      // provider).\n\n      const connection = await this.platform.loadConnection(this.databaseInfo);\n      const serializer = this.platform.newSerializer(\n        this.databaseInfo.databaseId\n      );\n      const datastore = new Datastore(\n        this.asyncQueue,\n        connection,\n        this.credentials,\n        serializer\n      );\n\n      await componentProvider.initialize({\n        asyncQueue: this.asyncQueue,\n        databaseInfo: this.databaseInfo,\n        platform: this.platform,\n        datastore,\n        clientId: this.clientId,\n        initialUser: user,\n        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,\n        persistenceSettings\n      });\n\n      this.persistence = componentProvider.persistence;\n      this.sharedClientState = componentProvider.sharedClientState;\n      this.localStore = componentProvider.localStore;\n      this.remoteStore = componentProvider.remoteStore;\n      this.syncEngine = componentProvider.syncEngine;\n      this.gcScheduler = componentProvider.gcScheduler;\n      this.eventMgr = componentProvider.eventManager;\n\n      // When a user calls clearPersistence() in one client, all other clients\n      // need to be terminated to allow the delete to succeed.\n      this.persistence.setDatabaseDeletedListener(async () => {\n        await this.terminate();\n      });\n\n      persistenceResult.resolve();\n    } catch (error) {\n      // Regardless of whether or not the retry succeeds, from an user\n      // perspective, offline persistence has failed.\n      persistenceResult.reject(error);\n\n      // An unknown failure on the first stage shuts everything down.\n      if (!this.canFallback(error)) {\n        throw error;\n      }\n      console.warn(\n        'Error enabling offline persistence. Falling back to' +\n          ' persistence disabled: ' +\n          error\n      );\n      return this.initializeComponents(\n        new MemoryComponentProvider(),\n        { durable: false },\n        user,\n        persistenceResult\n      );\n    }\n  }\n\n  /**\n   * Decides whether the provided error allows us to gracefully disable\n   * persistence (as opposed to crashing the client).\n   */\n  private canFallback(error: FirestoreError | DOMException): boolean {\n    if (error.name === 'FirebaseError') {\n      return (\n        error.code === Code.FAILED_PRECONDITION ||\n        error.code === Code.UNIMPLEMENTED\n      );\n    } else if (\n      typeof DOMException !== 'undefined' &&\n      error instanceof DOMException\n    ) {\n      // There are a few known circumstances where we can open IndexedDb but\n      // trying to read/write will fail (e.g. quota exceeded). For\n      // well-understood cases, we attempt to detect these and then gracefully\n      // fall back to memory persistence.\n      // NOTE: Rather than continue to add to this list, we could decide to\n      // always fall back, with the risk that we might accidentally hide errors\n      // representing actual SDK bugs.\n      return (\n        // When the browser is out of quota we could get either quota exceeded\n        // or an aborted error depending on whether the error happened during\n        // schema migration.\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n        error.code === DOM_EXCEPTION_ABORTED ||\n        // Firefox Private Browsing mode disables IndexedDb and returns\n        // INVALID_STATE for any usage.\n        error.code === DOM_EXCEPTION_INVALID_STATE\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  private verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  private handleCredentialChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    logDebug(LOG_TAG, 'Credential Changed. Current user: ' + user.uid);\n    return this.syncEngine.handleCredentialChange(user);\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  disableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.disableNetwork();\n    });\n  }\n\n  terminate(): Promise<void> {\n    return this.asyncQueue.enqueueAndInitiateShutdown(async () => {\n      // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n      if (this.gcScheduler) {\n        this.gcScheduler.stop();\n      }\n\n      await this.remoteStore.shutdown();\n      await this.sharedClientState.shutdown();\n      await this.persistence.shutdown();\n\n      // `removeChangeListener` must be called after shutting down the\n      // RemoteStore as it will prevent the RemoteStore from retrieving\n      // auth tokens.\n      this.credentials.removeChangeListener();\n    });\n  }\n\n  /**\n   * Returns a Promise that resolves when all writes that were pending at the time this\n   * method was called received server acknowledgement. An acknowledgement can be either acceptance\n   * or rejection.\n   */\n  waitForPendingWrites(): Promise<void> {\n    this.verifyNotTerminated();\n\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.syncEngine.registerPendingWritesCallback(deferred);\n    });\n    return deferred.promise;\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    this.verifyNotTerminated();\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.listen(listener);\n    });\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    // Checks for termination but does not raise error, allowing unlisten after\n    // termination to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  getDocumentFromLocalCache(docKey: DocumentKey): Promise<Document | null> {\n    this.verifyNotTerminated();\n    return this.asyncQueue\n      .enqueue(() => {\n        return this.localStore.readDocument(docKey);\n      })\n      .then((maybeDoc: MaybeDocument | null) => {\n        if (maybeDoc instanceof Document) {\n          return maybeDoc;\n        } else if (maybeDoc instanceof NoDocument) {\n          return null;\n        } else {\n          throw new FirestoreError(\n            Code.UNAVAILABLE,\n            'Failed to get document from cache. (However, this document may ' +\n              \"exist on the server. Run again without setting 'source' in \" +\n              'the GetOptions to attempt to retrieve the document from the ' +\n              'server.)'\n          );\n        }\n      });\n  }\n\n  getDocumentsFromLocalCache(query: Query): Promise<ViewSnapshot> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(async () => {\n      const queryResult = await this.localStore.executeQuery(\n        query,\n        /* usePreviousResults= */ true\n      );\n      const view = new View(query, queryResult.remoteKeys);\n      const viewDocChanges = view.computeDocChanges(queryResult.documents);\n      return view.applyChanges(\n        viewDocChanges,\n        /* updateLimboDocuments= */ false\n      ).snapshot!;\n    });\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() =>\n      this.syncEngine.write(mutations, deferred)\n    );\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.verifyNotTerminated();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.addSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    // Checks for shutdown but does not raise error, allowing remove after\n    // shutdown to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.eventMgr.removeSnapshotsInSyncListener(observer);\n  }\n\n  get clientTerminated(): boolean {\n    // Technically, the asyncQueue is still running, but only accepting operations\n    // related to termination or supposed to be run after termination. It is effectively\n    // terminated to the eyes of users.\n    return this.asyncQueue.isShuttingDown;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<T>();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.syncEngine.runTransaction(this.asyncQueue, updateFunction, deferred);\n      return Promise.resolve();\n    });\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Observer<T>) {}\n\n  next(value: T): void {\n    this.scheduleEvent(this.observer.next, value);\n  }\n\n  error(error: Error): void {\n    this.scheduleEvent(this.observer.error, error);\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/field_value';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentReference, Firestore } from './database';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/field_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter<T = firestore.DocumentData> {\n  constructor(\n    private readonly firestore: Firestore,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior?: ServerTimestampBehavior,\n    private readonly converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return new GeoPoint(\n          value.geoPointValue!.latitude!,\n          value.geoPointValue!.longitude!\n        );\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(name: string): DocumentReference<T> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.firestore._databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.firestore._databaseId.projectId}/${this.firestore._databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return new DocumentReference(key, this.firestore, this.converter);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  Operator,\n  OrderBy,\n  Query as InternalQuery\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { logError, setLogLevel, LogLevel, getLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred, Rejecter, Resolver } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\n\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling === undefined\n        ? DEFAULT_FORCE_LONG_POLLING\n        : settings.experimentalForceLongPolling;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private readonly _componentProvider: ComponentProvider;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  readonly _dataReader: UserDataReader;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    componentProvider: ComponentProvider = new MemoryComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._componentProvider = componentProvider;\n    this._settings = new FirestoreSettings({});\n    this._dataReader = this.createDataReader(this._databaseId);\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n    }\n\n    return this.configureClient(this._componentProvider, {\n      durable: true,\n      cacheSizeBytes: this._settings.cacheSizeBytes,\n      synchronizeTabs\n    });\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence cannot be cleared after this Firestore instance is initialized.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        const databaseInfo = this.makeDatabaseInfo();\n        await this._componentProvider.clearPersistence(databaseInfo);\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return this.onSnapshotsInSyncInternal(arg as PartialObserver<void>);\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return this.onSnapshotsInSyncInternal(observer);\n    }\n  }\n\n  private onSnapshotsInSyncInternal(\n    observer: PartialObserver<void>\n  ): Unsubscribe {\n    const errHandler = (err: Error): void => {\n      throw fail('Uncaught Error in onSnapshotsInSync');\n    };\n    const asyncObserver = new AsyncObserver<void>({\n      next: () => {\n        if (observer.next) {\n          observer.next();\n        }\n      },\n      error: errHandler\n    });\n    this._firestoreClient!.addSnapshotsInSyncListener(asyncObserver);\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient!.removeSnapshotsInSyncListener(asyncObserver);\n    };\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(new MemoryComponentProvider(), {\n        durable: false\n      });\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(\n      PlatformSupport.getPlatform(),\n      databaseInfo,\n      this._credentials,\n      this._queue\n    );\n\n    return this._firestoreClient.start(componentProvider, persistenceSettings);\n  }\n\n  private createDataReader(databaseId: DatabaseId): UserDataReader {\n    const preConverter = (value: unknown): unknown => {\n      if (value instanceof DocumentReference) {\n        const thisDb = databaseId;\n        const otherDb = value.firestore._databaseId;\n        if (!otherDb.isEqual(thisDb)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Document reference is for database ' +\n              `${otherDb.projectId}/${otherDb.database} but should be ` +\n              `for database ${thisDb.projectId}/${thisDb.database}`\n          );\n        }\n        return new DocumentKeyReference(databaseId, value._key);\n      } else {\n        return value;\n      }\n    };\n    const serializer = PlatformSupport.getPlatform().newSerializer(databaseId);\n    return new UserDataReader(serializer, preConverter);\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(ResourcePath.fromString(pathString), this);\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      new InternalQuery(ResourcePath.EMPTY_PATH, collectionId),\n      this\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.SILENT:\n        return 'silent';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateArgType('Firestore.setLogLevel', 'non-empty string', 1, level);\n    switch (level) {\n      case 'debug':\n        setLogLevel(LogLevel.DEBUG);\n        break;\n      case 'error':\n        setLogLevel(LogLevel.ERROR);\n        break;\n      case 'silent':\n        setLogLevel(LogLevel.SILENT);\n        break;\n      default:\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid log level: ' + level\n        );\n    }\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'Transaction.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this._firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this._firestore._dataReader.parseSetData(\n            functionName,\n            convertedValue\n          );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'Transaction.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'Transaction.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'WriteBatch.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this._firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this._firestore._dataReader.parseSetData(\n            functionName,\n            convertedValue\n          );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.NONE)\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'WriteBatch.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'WriteBatch.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.NONE)\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter?: firestore.FirestoreDataConverter<U>\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(this._key.path.child(path), this.firestore);\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(\n    value: firestore.DocumentData,\n    options?: firestore.SetOptions\n  ): Promise<void>;\n  set(value: T, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      'DocumentReference.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this.firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this.firestore._dataReader.parseSetData(functionName, convertedValue);\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.NONE)\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = this.firestore._dataReader.parseUpdateVarargs(\n        'DocumentReference.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = this.firestore._dataReader.parseUpdateData(\n        'DocumentReference.update',\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.NONE)\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: firestore.SnapshotListenOptions = {\n      includeMetadataChanges: false\n    };\n    let observer: PartialObserver<firestore.DocumentSnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.DocumentSnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    return this.onSnapshotInternal(internalOptions, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: snapshot => {\n        if (observer.next) {\n          debugAssert(\n            snapshot.docs.size <= 1,\n            'Too many documents returned on a document query'\n          );\n          const doc = snapshot.docs.get(this._key);\n\n          observer.next(\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              snapshot.fromCache,\n              snapshot.hasPendingWrites,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n    const internalListener = this._firestoreClient.listen(\n      InternalQuery.atPath(this._key.path),\n      asyncObserver,\n      options\n    );\n\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n    return new Promise(\n      (resolve: Resolver<firestore.DocumentSnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentFromLocalCache(this._key)\n            .then(doc => {\n              resolve(\n                new DocumentSnapshot(\n                  this.firestore,\n                  this._key,\n                  doc,\n                  /*fromCache=*/ true,\n                  doc instanceof Document ? doc.hasLocalMutations : false,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.DocumentSnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (snap: firestore.DocumentSnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (!snap.exists && snap.metadata.fromCache) {\n            // TODO(dimond): If we're online and the document doesn't\n            // exist then we resolve with a doc.exists set to false. If\n            // we're offline however, we reject the Promise in this\n            // case. Two options: 1) Cache the negative response from\n            // the server so we can deliver that even when you're\n            // offline 2) Actually reject the Promise in the online case\n            // if the document doesn't exist.\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document because the client is ' + 'offline.'\n              )\n            );\n          } else if (\n            snap.exists &&\n            snap.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document from server. (However, this ' +\n                  'document does exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached document.)'\n              )\n            );\n          } else {\n            resolve(snap);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n}\n\nclass SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps,\n          /* converter= */ undefined\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps,\n          this._converter\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // Enumerated from the WhereFilterOp type in index.d.ts.\n    const whereFilterOpEnums = [\n      '<',\n      '<=',\n      '==',\n      '>=',\n      '>',\n      'array-contains',\n      'in',\n      'array-contains-any'\n    ];\n    validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n\n    let fieldValue: api.Value;\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const operator = Operator.fromString(opStr);\n    if (fieldPath.isKeyField()) {\n      if (\n        operator === Operator.ARRAY_CONTAINS ||\n        operator === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid Query. You can't perform '${operator.toString()}' ` +\n            'queries on FieldPath.documentId().'\n        );\n      } else if (operator === Operator.IN) {\n        this.validateDisjunctiveFilterElements(value, operator);\n        const referenceList: api.Value[] = [];\n        for (const arrayValue of value as api.Value[]) {\n          referenceList.push(this.parseDocumentIdValue(arrayValue));\n        }\n        fieldValue = { arrayValue: { values: referenceList } };\n      } else {\n        fieldValue = this.parseDocumentIdValue(value);\n      }\n    } else {\n      if (\n        operator === Operator.IN ||\n        operator === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        this.validateDisjunctiveFilterElements(value, operator);\n      }\n      fieldValue = this.firestore._dataReader.parseQueryValue(\n        'Query.where',\n        value,\n        // We only allow nested arrays for IN queries.\n        /** allowArrays = */ operator === Operator.IN ? true : false\n      );\n    }\n    const filter = FieldFilter.create(fieldPath, operator, fieldValue);\n    this.validateNewFilter(filter);\n    return new Query(\n      this._query.addFilter(filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    if (this._query.startAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.startAt() or ' +\n          'Query.startAfter() before calling Query.orderBy().'\n      );\n    }\n    if (this._query.endAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.endAt() or ' +\n          'Query.endBefore() before calling Query.orderBy().'\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = new OrderBy(fieldPath, direction);\n    this.validateNewOrderBy(orderBy);\n    return new Query(\n      this._query.addOrderBy(orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      this._query.withLimitToFirst(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      this._query.withLimitToLast(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore && this._query.isEqual(other._query)\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Too many arguments provided to ${methodName}().`\n        );\n      }\n      const snap = docOrField;\n      if (!snap.exists) {\n        throw new FirestoreError(\n          Code.NOT_FOUND,\n          `Can't use a DocumentSnapshot that doesn't exist for ` +\n            `${methodName}().`\n        );\n      }\n      return this.boundFromDocument(snap._document!, before);\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return this.boundFromFields(methodName, allFields, before);\n    }\n  }\n\n  /**\n   * Create a Bound from a query and a document.\n   *\n   * Note that the Bound will always include the key of the document\n   * and so only the provided document will compare equal to the returned\n   * position.\n   *\n   * Will throw if the document does not contain all fields of the order by\n   * of the query or if any of the fields in the order by are an uncommitted\n   * server timestamp.\n   */\n  private boundFromDocument(doc: Document, before: boolean): Bound {\n    const components: api.Value[] = [];\n\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const orderBy of this._query.orderBy) {\n      if (orderBy.field.isKeyField()) {\n        components.push(refValue(this.firestore._databaseId, doc.key));\n      } else {\n        const value = doc.field(orderBy.field);\n        if (isServerTimestamp(value)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. You are trying to start or end a query using a ' +\n              'document for which the field \"' +\n              orderBy.field +\n              '\" is an uncommitted server timestamp. (Since the value of ' +\n              'this field is unknown, you cannot start/end a query with it.)'\n          );\n        } else if (value !== null) {\n          components.push(value);\n        } else {\n          const field = orderBy.field.canonicalString();\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. You are trying to start or end a query using a ` +\n              `document for which the field '${field}' (used as the ` +\n              `orderBy) does not exist.`\n          );\n        }\n      }\n    }\n    return new Bound(components, before);\n  }\n\n  /**\n   * Converts a list of field values to a Bound for the given query.\n   */\n  private boundFromFields(\n    methodName: string,\n    values: unknown[],\n    before: boolean\n  ): Bound {\n    // Use explicit order by's because it has to match the query the user made\n    const orderBy = this._query.explicitOrderBy;\n    if (values.length > orderBy.length) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Too many arguments provided to ${methodName}(). ` +\n          `The number of arguments must be less than or equal to the ` +\n          `number of Query.orderBy() clauses`\n      );\n    }\n\n    const components: api.Value[] = [];\n    for (let i = 0; i < values.length; i++) {\n      const rawValue = values[i];\n      const orderByComponent = orderBy[i];\n      if (orderByComponent.field.isKeyField()) {\n        if (typeof rawValue !== 'string') {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. Expected a string for document ID in ` +\n              `${methodName}(), but got a ${typeof rawValue}`\n          );\n        }\n        if (\n          !this._query.isCollectionGroupQuery() &&\n          rawValue.indexOf('/') !== -1\n        ) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n              `the value passed to ${methodName}() must be a plain document ID, but ` +\n              `'${rawValue}' contains a slash.`\n          );\n        }\n        const path = this._query.path.child(ResourcePath.fromString(rawValue));\n        if (!DocumentKey.isDocumentKey(path)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection group and ordering by ` +\n              `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n              `valid document path, but '${path}' is not because it contains an odd number ` +\n              `of segments.`\n          );\n        }\n        const key = new DocumentKey(path);\n        components.push(refValue(this.firestore._databaseId, key));\n      } else {\n        const wrapped = this.firestore._dataReader.parseQueryValue(\n          methodName,\n          rawValue\n        );\n        components.push(wrapped);\n      }\n    }\n\n    return new Bound(components, before);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: firestore.SnapshotListenOptions = {};\n    let observer: PartialObserver<firestore.QuerySnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<firestore.QuerySnapshot<T>>;\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.QuerySnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return this.onSnapshotInternal(options, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: (result: ViewSnapshot): void => {\n        if (observer.next) {\n          observer.next(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              result,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    const internalListener = firestoreClient.listen(\n      this._query,\n      asyncObserver,\n      options\n    );\n    return (): void => {\n      asyncObserver.mute();\n      firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  private validateHasExplicitOrderByForLimitToLast(query: InternalQuery): void {\n    if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'limitToLast() queries require specifying at least one orderBy() clause'\n      );\n    }\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return new Promise(\n      (resolve: Resolver<firestore.QuerySnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentsFromLocalCache(this._query)\n            .then((viewSnap: ViewSnapshot) => {\n              resolve(\n                new QuerySnapshot(\n                  this.firestore,\n                  this._query,\n                  viewSnap,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.QuerySnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (result: firestore.QuerySnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (\n            result.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get documents from server. (However, these ' +\n                  'documents may exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached documents.)'\n              )\n            );\n          } else {\n            resolve(result);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  /**\n   * Parses the given documentIdValue into a ReferenceValue, throwing\n   * appropriate errors if the value is anything other than a DocumentReference\n   * or String, or if the string is malformed.\n   */\n  private parseDocumentIdValue(documentIdValue: unknown): api.Value {\n    if (typeof documentIdValue === 'string') {\n      if (documentIdValue === '') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. When querying with FieldPath.documentId(), you ' +\n            'must provide a valid document ID, but it was an empty string.'\n        );\n      }\n      if (\n        !this._query.isCollectionGroupQuery() &&\n        documentIdValue.indexOf('/') !== -1\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection by ` +\n            `FieldPath.documentId(), you must provide a plain document ID, but ` +\n            `'${documentIdValue}' contains a '/' character.`\n        );\n      }\n      const path = this._query.path.child(\n        ResourcePath.fromString(documentIdValue)\n      );\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group by ` +\n            `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n            `but '${path}' is not because it has an odd number of segments (${path.length}).`\n        );\n      }\n      return refValue(this.firestore._databaseId, new DocumentKey(path));\n    } else if (documentIdValue instanceof DocumentReference) {\n      const ref = documentIdValue as DocumentReference<T>;\n      return refValue(this.firestore._databaseId, ref._key);\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n          `string or a DocumentReference, but it was: ` +\n          `${valueDescription(documentIdValue)}.`\n      );\n    }\n  }\n\n  /**\n   * Validates that the value passed into a disjunctrive filter satisfies all\n   * array requirements.\n   */\n  private validateDisjunctiveFilterElements(\n    value: unknown,\n    operator: Operator\n  ): void {\n    if (!Array.isArray(value) || value.length === 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid Query. A non-empty array is required for ' +\n          `'${operator.toString()}' filters.`\n      );\n    }\n    if (value.length > 10) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters support a ` +\n          'maximum of 10 elements in the value array.'\n      );\n    }\n    if (value.indexOf(null) >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n          'in the value array.'\n      );\n    }\n    if (value.filter(element => Number.isNaN(element)).length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n          'in the value array.'\n      );\n    }\n  }\n\n  private validateNewFilter(filter: Filter): void {\n    if (filter instanceof FieldFilter) {\n      const arrayOps = [Operator.ARRAY_CONTAINS, Operator.ARRAY_CONTAINS_ANY];\n      const disjunctiveOps = [Operator.IN, Operator.ARRAY_CONTAINS_ANY];\n      const isArrayOp = arrayOps.indexOf(filter.op) >= 0;\n      const isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;\n\n      if (filter.isInequality()) {\n        const existingField = this._query.getInequalityFilterField();\n        if (existingField !== null && !existingField.isEqual(filter.field)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. All where filters with an inequality' +\n              ' (<, <=, >, or >=) must be on the same field. But you have' +\n              ` inequality filters on '${existingField.toString()}'` +\n              ` and '${filter.field.toString()}'`\n          );\n        }\n\n        const firstOrderByField = this._query.getFirstOrderByField();\n        if (firstOrderByField !== null) {\n          this.validateOrderByAndInequalityMatch(\n            filter.field,\n            firstOrderByField\n          );\n        }\n      } else if (isDisjunctiveOp || isArrayOp) {\n        // You can have at most 1 disjunctive filter and 1 array filter. Check if\n        // the new filter conflicts with an existing one.\n        let conflictingOp: Operator | null = null;\n        if (isDisjunctiveOp) {\n          conflictingOp = this._query.findFilterOperator(disjunctiveOps);\n        }\n        if (conflictingOp === null && isArrayOp) {\n          conflictingOp = this._query.findFilterOperator(arrayOps);\n        }\n        if (conflictingOp != null) {\n          // We special case when it's a duplicate op to give a slightly clearer error message.\n          if (conflictingOp === filter.op) {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              'Invalid query. You cannot use more than one ' +\n                `'${filter.op.toString()}' filter.`\n            );\n          } else {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n                `with '${conflictingOp.toString()}' filters.`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private validateNewOrderBy(orderBy: OrderBy): void {\n    if (this._query.getFirstOrderByField() === null) {\n      // This is the first order by. It must match any inequality.\n      const inequalityField = this._query.getInequalityFilterField();\n      if (inequalityField !== null) {\n        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n      }\n    }\n  }\n\n  private validateOrderByAndInequalityMatch(\n    inequality: FieldPath,\n    orderBy: FieldPath\n  ): void {\n    if (!orderBy.isEqual(inequality)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You have a where filter with an inequality ` +\n          `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n          `and so you must also use '${inequality.toString()}' ` +\n          `as your first Query.orderBy(), but your first Query.orderBy() ` +\n          `is on field '${orderBy.toString()}' instead.`\n      );\n    }\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, this.convertToDocumentImpl(doc));\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<T>(\n        this._firestore,\n        includeMetadataChanges,\n        this._snapshot,\n        this._converter\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      this._originalQuery.isEqual(other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(doc: Document): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      this.metadata.fromCache,\n      this._snapshot.mutatedKeys.has(doc.key),\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    super(InternalQuery.atPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (pathString === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Document path must be a non-empty string'\n      );\n    }\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentReference<T> {\n  if (!(documentRef instanceof DocumentReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot<T>(\n  firestore: Firestore,\n  includeMetadataChanges: boolean,\n  snapshot: ViewSnapshot,\n  converter?: firestore.FirestoreDataConverter<T>\n): Array<firestore.DocumentChange<T>> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot<T>(\n        firestore,\n        change.doc.key,\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key),\n        converter\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || snapshot.query.docComparator(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = new QueryDocumentSnapshot<T>(\n          firestore,\n          change.doc.key,\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key),\n          converter\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nfunction applyFirestoreDataConverter<T>(\n  converter: firestore.FirestoreDataConverter<T> | undefined,\n  value: T,\n  functionName: string\n): [firestore.DocumentData, string] {\n  let convertedValue;\n  if (converter) {\n    convertedValue = converter.toFirestore(value);\n    functionName = 'toFirestore() in ' + functionName;\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return [convertedValue, functionName];\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\nexport const PublicFirestore = makeConstructorPrivate(\n  Firestore,\n  'Use firebase.firestore() instead.'\n);\nexport const PublicTransaction = makeConstructorPrivate(\n  Transaction,\n  'Use firebase.firestore().runTransaction() instead.'\n);\nexport const PublicWriteBatch = makeConstructorPrivate(\n  WriteBatch,\n  'Use firebase.firestore().batch() instead.'\n);\nexport const PublicDocumentReference = makeConstructorPrivate(\n  DocumentReference,\n  'Use firebase.firestore().doc() instead.'\n);\nexport const PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport const PublicQueryDocumentSnapshot = makeConstructorPrivate(\n  QueryDocumentSnapshot\n);\nexport const PublicQuery = makeConstructorPrivate(Query);\nexport const PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport const PublicCollectionReference = makeConstructorPrivate(\n  CollectionReference,\n  'Use firebase.firestore().collection() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport { PublicBlob } from '../api/blob';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  Firestore,\n  PublicCollectionReference,\n  PublicDocumentReference,\n  PublicDocumentSnapshot,\n  PublicFirestore,\n  PublicQuery,\n  PublicQueryDocumentSnapshot,\n  PublicQuerySnapshot,\n  PublicTransaction,\n  PublicWriteBatch\n} from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { Timestamp } from '../api/timestamp';\n\nconst firestoreNamespace = {\n  Firestore: PublicFirestore,\n  GeoPoint,\n  Timestamp,\n  Blob: PublicBlob,\n  Transaction: PublicTransaction,\n  WriteBatch: PublicWriteBatch,\n  DocumentReference: PublicDocumentReference,\n  DocumentSnapshot: PublicDocumentSnapshot,\n  Query: PublicQuery,\n  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n  QuerySnapshot: PublicQuerySnapshot,\n  CollectionReference: PublicCollectionReference,\n  FieldPath,\n  FieldValue: PublicFieldValue,\n  setLogLevel: Firestore.setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from './../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../core/version';\nimport { Connection, Stream } from '../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Indexable } from '../util/misc';\nimport { Rejecter, Resolver } from '../util/promise';\nimport { StringMap } from '../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\nconst RPC_URL_VERSION = 'v1';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n * Uses Object Literal notation to avoid renaming.\n */\nconst RPC_NAME_REST_MAPPING: { [key: string]: string } = {};\nRPC_NAME_REST_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_REST_MAPPING['Commit'] = 'commit';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly forceLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n    this.forceLongPolling = info.forceLongPolling;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      // The database field is already encoded in URL. Specifying it again in\n      // the body is not necessary in production, and will cause duplicate field\n      // errors in the Firestore Emulator. Let's remove it.\n      const jsonObj = ({ ...request } as unknown) as Indexable;\n      delete jsonObj.database;\n\n      const requestString = JSON.stringify(jsonObj);\n      logDebug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the\n      // $httpOverwrite parameter supported by ESF to avoid\n      // triggering preflight requests.\n      const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n      this.modifyHeadersForRequest(headers, token);\n\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return (\n      this.baseUrl +\n      '/' +\n      RPC_URL_VERSION +\n      '/projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents:' +\n      urlRpcName\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore } from './src/api/database';\nimport { MemoryComponentProvider } from './src/core/component_provider';\nimport { configureForFirebase } from './src/platform/config';\n\nimport './register-module';\nimport './src/platform_browser/browser_init';\n\nimport { name, version } from './package.json';\n\n/**\n * Registers the memory-only Firestore build with the components framework.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) => new Firestore(app, auth, new MemoryComponentProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Platform } from '../platform/platform';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\nimport { NoopConnectivityMonitor } from '../remote/connectivity_monitor_noop';\nimport { BrowserConnectivityMonitor } from './browser_connectivity_monitor';\nimport { WebChannelConnection } from './webchannel_connection';\n\n// Implements the Platform API for browsers and some browser-like environments\n// (including ReactNative).\nexport class BrowserPlatform implements Platform {\n  readonly base64Available: boolean;\n\n  constructor() {\n    this.base64Available = typeof atob !== 'undefined';\n  }\n\n  get document(): Document | null {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof document !== 'undefined' ? document : null;\n  }\n\n  get window(): Window | null {\n    // `window` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof window !== 'undefined' ? window : null;\n  }\n\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n    return Promise.resolve(new WebChannelConnection(databaseInfo));\n  }\n\n  newConnectivityMonitor(): ConnectivityMonitor {\n    if (BrowserConnectivityMonitor.isAvailable()) {\n      return new BrowserConnectivityMonitor();\n    } else {\n      return new NoopConnectivityMonitor();\n    }\n  }\n\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n    return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n  }\n\n  formatJSON(value: unknown): string {\n    return JSON.stringify(value);\n  }\n\n  atob(encoded: string): string {\n    return atob(encoded);\n  }\n\n  btoa(raw: string): string {\n    return btoa(raw);\n  }\n}\n"],"names":["SDK_VERSION","firebase","[object Object]","uid","this","__PRIVATE_otherUser","User","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","code","message","super","toString","name","Error","value","user","Authorization","Promise","resolve","__PRIVATE_changeListener","__PRIVATE_authProvider","currentUser","auth","getImmediate","optional","addAuthTokenListener","I","get","then","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","FirestoreError","__PRIVATE_hardAssert","accessToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_gapi","__PRIVATE_sessionIndex","o","headers","X-Goog-AuthUser","__PRIVATE_authHeader","seconds","nanoseconds","Timestamp","fromMillis","Date","now","date","getTime","milliseconds","Math","floor","toMillis","other","__PRIVATE_primitiveComparator","__PRIVATE_adjustedSeconds","String","padStart","timestamp","__PRIVATE_SnapshotVersion","MIN","isEqual","segments","offset","length","fail","__PRIVATE_BasePath","__PRIVATE_nameOrPath","slice","limit","forEach","__PRIVATE_segment","push","size","index","__PRIVATE_i","__PRIVATE_potentialChild","fn","end","p1","p2","__PRIVATE_len","min","left","right","ResourcePath","join","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","map","str","replace","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","collectionId","k1","k2","__PRIVATE_DocumentKey","__PRIVATE_comparator","root","__PRIVATE_LLRBNode","EMPTY","key","remove","node","cmp","__PRIVATE_prunedNodes","action","k","v","__PRIVATE_descriptions","__PRIVATE_startKey","__PRIVATE_isReverse","pop","result","color","RED","n","__PRIVATE_smallest","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","pow","data","__PRIVATE_elem","cb","range","__PRIVATE_iter","start","has","add","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","targetId","obj","count","Object","prototype","hasOwnProperty","call","__PRIVATE_binaryString","base64","__PRIVATE_PlatformSupport","atob","array","fromCharCode","btoa","buffer","Uint8Array","charCodeAt","mapValue","fields","stringValue","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","timestampValue","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_isServerTimestamp","__PRIVATE_leftType","__PRIVATE_typeOrder","booleanValue","__PRIVATE_getLocalWriteTime","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_normalizeByteString","bytesValue","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","integerValue","__PRIVATE_n1","doubleValue","__PRIVATE_n2","__PRIVATE_isNegativeZero","isNaN","__PRIVATE_arrayEquals","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_objectSize","__PRIVATE_valueEquals","__PRIVATE_haystack","__PRIVATE_needle","find","__PRIVATE_rightType","__PRIVATE_leftNumber","__PRIVATE_rightNumber","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_valueCompare","__PRIVATE_leftKeys","keys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","canonicalId","__PRIVATE_normalizedTimestamp","toBase64","__PRIVATE_geoPoint","first","__PRIVATE_canonifyValue","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","Number","__PRIVATE_parsedDate","blob","__PRIVATE_ByteString","fromBase64String","fromUint8Array","__PRIVATE_databaseId","projectId","database","isInteger","isArray","previousValue","__type__","__local_write_time__","__PRIVATE_transformResult","__PRIVATE_ServerTimestampTransform","elements","apply","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_toRemove","serializer","__PRIVATE_operand","__PRIVATE_baseValue","__PRIVATE_sum","asNumber","__PRIVATE_fieldsAsSet","fieldPath","found","__PRIVATE_fieldMaskPath","field","transform","version","transformResults","updateTime","exists","Precondition","zt","__PRIVATE_maybeDoc","Document","__PRIVATE_precondition","__PRIVATE_Mutation","__PRIVATE_mutationResult","hasCommittedMutations","__PRIVATE_baseDoc","te","__PRIVATE_fieldMask","__PRIVATE_newData","__PRIVATE_ObjectValue","__PRIVATE_builder","newValue","set","delete","fieldTransforms","doc","__PRIVATE_baseObject","__PRIVATE_fieldTransform","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_l","r","__PRIVATE_serverTransformResults","proto","__PRIVATE_isMapValue","__PRIVATE_currentPath","__PRIVATE_nestedFields","__PRIVATE_nestedPath","child","__PRIVATE_FieldMask","Map","__PRIVATE_currentLevel","__PRIVATE_currentSegment","currentValue","entries","__PRIVATE_mergedResult","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_objectValue","options","__PRIVATE_MaybeDocument","hasPendingWrites","v1","v2","collectionGroup","orderBy","filters","startAt","endAt","f","__PRIVATE_isNullOrUndefined","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","Query","__PRIVATE_inequalityField","__PRIVATE_firstOrderByField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","dir","__PRIVATE_Direction","ASCENDING","__PRIVATE_newFilters","concat","__PRIVATE_newOrderBy","bound","__PRIVATE_comparedOnKeyField","__PRIVATE_comp","FieldFilter","__PRIVATE_operators","op","Target","__PRIVATE_orderBys","DESCENDING","position","before","__PRIVATE_docPath","matches","__PRIVATE_Operator","LESS_THAN","LESS_THAN_OR_EQUAL","EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","ARRAY_CONTAINS","IN","ARRAY_CONTAINS_ANY","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_arrayValueContains","val","p","__PRIVATE_orderByComponent","component","__PRIVATE_KEY_ORDERING_ASC","__PRIVATE_KEY_ORDERING_DESC","target","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","__PRIVATE_logError","__PRIVATE_RpcCode","RpcCode","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_documentMap","__PRIVATE_oldSet","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_newSet","__PRIVATE_change","__PRIVATE_oldChange","type","__PRIVATE_changes","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_DocumentSet","__PRIVATE_otherChanges","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","TargetChange","__PRIVATE_targetIdSet","__PRIVATE_documentKeySet","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_existenceFilter","state","targetIds","cause","__PRIVATE_snapshotChangesMap","As","Ns","$s","__PRIVATE_changeType","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","targetChange","__PRIVATE_targetState","removeTarget","__PRIVATE__","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_remoteEvent","document","__PRIVATE_updatedDocument","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_logDebug","__PRIVATE_DIRECTIONS","__PRIVATE_dirs","__PRIVATE_OPERATORS","__PRIVATE_ops","status","__PRIVATE_mapCodeFromRpcCode","Infinity","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","toISOString","bytes","toUint8Array","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_resourceName","gi","fromVersion","missing","readTime","targetChangeType","__PRIVATE_causeProto","documentChange","__PRIVATE_entityChange","documentDelete","__PRIVATE_docDelete","documentRemove","__PRIVATE_docRemove","ExistenceFilter","__PRIVATE_mutation","update","updateMask","verify","currentDocument","NONE","toVersion","commitTime","__PRIVATE_protos","setToServerValue","appendMissingElements","removeAllFromArray","increment","instance","FieldTransform","__PRIVATE_documentsTarget","structuredQuery","parent","from","allDescendants","where","__PRIVATE_fromCount","__PRIVATE_filterBy","goog-listen-tags","compositeFilter","unaryFilter","fieldFilter","reduce","__PRIVATE_accum","order","cursor","__PRIVATE_fieldReference","direction","create","__PRIVATE_nanField","NaN","__PRIVATE_nullField","nullValue","__PRIVATE_canonicalFields","fieldPaths","platform","__PRIVATE_logClient","Logger","logLevel","setLogLevel","__PRIVATE_newLevel","msg","LogLevel","DEBUG","args","debug","ERROR","error","e","__PRIVATE_failure","assertion","__PRIVATE_chars","__PRIVATE_autoId","charAt","random","every","persistenceKey","host","ssl","forceLongPolling","En","__PRIVATE_mapKeyFn","id","__PRIVATE_otherKey","splice","__PRIVATE_isEmpty","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","__PRIVATE_m","__PRIVATE_mutatedDocument","batch","__PRIVATE_commitVersion","streamToken","__PRIVATE_docVersions","results","__PRIVATE_versionMap","__PRIVATE_documentVersionMap","__PRIVATE_DocReference","ref","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_firstRef","__PRIVATE_targetOrBatchId","callback","__PRIVATE_nextFn","__PRIVATE_catchFn","PersistencePromise","reject","all","__PRIVATE_resolvedCount","done","__PRIVATE_err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","s","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","transaction","__PRIVATE_batches","__PRIVATE_inBatches","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_localView","getEntries","__PRIVATE_baseDocs","__PRIVATE_sinceReadTime","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_mutationBatches","__PRIVATE_queryResults","__PRIVATE_matchingMutationBatches","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_sequenceNumberSyncer","__PRIVATE_externalPreviousValue","max","__PRIVATE_nextValue","__PRIVATE_ListenSequence","promise","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_delaySoFarMs","__PRIVATE_remainingDelayMs","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","bind","catch","__PRIVATE_delayMs","__PRIVATE_delayedOp","setTimeout","reason","clearTimeout","window","addEventListener","Jr","enqueue","removeEventListener","__PRIVATE_deferred","__PRIVATE_retryingOp","async","__PRIVATE_newTail","stack","__PRIVATE_DelayedOperation","__PRIVATE_removedOp","__PRIVATE_currentTail","__PRIVATE_lastTimerId","a","b","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_LruParams","__PRIVATE_lastId","collectionPath","parentPath","__PRIVATE_existingParents","__PRIVATE_added","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","t","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","runTransaction","txn","__PRIVATE_oldBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_affectedDocuments","Qh","Wh","jh","__PRIVATE_existingDocs","Hh","__PRIVATE_affected","__PRIVATE_documentBuffer","Xh","__PRIVATE_affectedKeys","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_oldTargetData","__PRIVATE_newTargetData","__PRIVATE_LocalStore","__PRIVATE_changedDocs","__PRIVATE_updatedKeys","__PRIVATE_existingDoc","__PRIVATE_updateRemoteVersion","lastRemoteSnapshotVersion","__PRIVATE_viewChanges","__PRIVATE_viewChange","__PRIVATE_updatedTargetData","__PRIVATE_afterBatchId","__PRIVATE_cached","__PRIVATE_keepPersistedTargetData","mode","__PRIVATE_removed","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","Do","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_remoteDoc","__PRIVATE_ackVersion","__PRIVATE_garbageCollector","functionName","__PRIVATE_formatPlural","__PRIVATE_numberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_maxNumberOfArgs","__PRIVATE_argument","__PRIVATE_validateType","__PRIVATE_ordinal","__PRIVATE_validateArgType","__PRIVATE_optionName","__PRIVATE_validateNamedType","__PRIVATE_inputName","input","__PRIVATE_expected","__PRIVATE_expectedDescription","__PRIVATE_valueDescription","__PRIVATE_actualDescription","__PRIVATE_isPlainObject","description","getPrototypeOf","substring","JSON","stringify","Array","__PRIVATE_customObjectName","constructor","__PRIVATE_optionNames","num","__PRIVATE_cls","__PRIVATE_optionalMessage","__PRIVATE_PublicConstructor","assign","__PRIVATE_byteString","__PRIVATE_assertBase64Available","__PRIVATE_validateExactNumberOfArgs","arguments","Blob","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_invalidClassError","__PRIVATE_PublicBlob","__PRIVATE_makeConstructorPrivate","__PRIVATE_minNumberOfElements","fieldNames","__PRIVATE_InternalFieldPath","__PRIVATE_RESERVED","__PRIVATE__methodName","__PRIVATE_validateNoArgs","__PRIVATE_DeleteFieldValueImpl","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_FieldValueImpl","__PRIVATE__elements","__PRIVATE__operand","__PRIVATE_PublicFieldValue","isFinite","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE_dataSource","methodName","__PRIVATE_arrayElement","__PRIVATE_childPath","context","__PRIVATE_fieldDescription","__PRIVATE_isWrite","__PRIVATE_preConverter","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","contains","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_parsedValue","mask","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_allowArrays","__PRIVATE_errorMessage","__PRIVATE_looksLikeJsonObject","__PRIVATE_entryIndex","__PRIVATE_entry","__PRIVATE_parsedEntry","__PRIVATE_parsedElements","arrayUnion","arrayRemove","__PRIVATE_numericIncrement","fromDate","GeoPoint","search","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","listener","close","stream","send","__PRIVATE_finalState","__PRIVATE_dispatchIfNotClosed","__PRIVATE_closeCount","token","__PRIVATE_rpcError","onMessage","__PRIVATE_startCloseCount","credentials","__PRIVATE_PersistentStream","__PRIVATE_watchChangeProto","snapshot","request","addTarget","labels","La","__PRIVATE_responseProto","lastStreamToken","writeResults","writes","__PRIVATE_params","response","__PRIVATE_rpcName","__PRIVATE_datastore","Set","write","__PRIVATE_unwritten","__PRIVATE__version","commit","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_onlineStateHandler","__PRIVATE_newState","details","__PRIVATE_localStore","__PRIVATE_connectivityMonitor","Da","ga","Fa","qa","Ma","enableNetwork","networkEnabled","stop","isPrimary","__PRIVATE_requestTargetData","__PRIVATE_lastBatchIdRetrieved","shift","__PRIVATE_success","__PRIVATE_MutationBatchResult","__PRIVATE_errorHandling","__PRIVATE_isPermanentError","Transaction","activeTargetIds","updateTimeMs","onlineState","__PRIVATE__syncedDocuments","Tc","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","last","__PRIVATE_firstDocInLimit","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","wc","Ic","Rc","ls","__PRIVATE_updateLimboDocuments","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_limboChanges","__PRIVATE_newSyncState","pc","__PRIVATE_oldLimboDocuments","__PRIVATE_queryResult","__PRIVATE_ViewSnapshot","__PRIVATE_remoteStore","updateFunction","__PRIVATE_userPromise","__PRIVATE_commitError","__PRIVATE_userPromiseError","view","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","q","__PRIVATE_TargetIdGenerator","zc","__PRIVATE_syncEngineListener","__PRIVATE_queryView","listen","__PRIVATE_viewDocChanges","__PRIVATE_synthesizedTargetChange","__PRIVATE_queries","__PRIVATE_userCallback","__PRIVATE_limboResolution","__PRIVATE_ignoreIfPrimaryLeaseLoss","source","__PRIVATE_newViewSnapshots","__PRIVATE_limboKey","event","__PRIVATE_mutationBatchResult","__PRIVATE_highestBatchId","__PRIVATE_callbacks","clear","__PRIVATE_newCallbacks","__PRIVATE_limboKeys","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_LocalViewChanges","__PRIVATE_fnName","__PRIVATE_userChanged","disableNetwork","__PRIVATE_keySet","__PRIVATE_syncEngine","subscribe","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_lastListen","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","__PRIVATE_viewSnap","onError","observer","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_maybeOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_localDocuments","__PRIVATE_previousResults","__PRIVATE_getLogLevel","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_referenceDelegate","__PRIVATE_batchIndex","__PRIVATE_nextBatchId","__PRIVATE_rawIndex","__PRIVATE_documentKey","POSITIVE_INFINITY","__PRIVATE_documentKeys","__PRIVATE_uniqueBatchIDs","prefix","__PRIVATE_immediateChildrenPathLength","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_batchIDs","__PRIVATE_references","__PRIVATE_sizer","__PRIVATE_previousSize","__PRIVATE_currentSize","xl","iterator","__PRIVATE_maybeDocument","__PRIVATE_MemoryRemoteDocumentCache","__PRIVATE_documentCache","__PRIVATE_bufferedEntry","highestTargetId","highestListenSequenceNumber","targetCount","upperBound","__PRIVATE_removals","__PRIVATE_matchingKeys","__PRIVATE_referenceDelegateFactory","l_","__PRIVATE_transactionOperation","__PRIVATE_currentSequenceNumber","P_","__PRIVATE_inMemoryPins","cache","__PRIVATE_changeBuffer","__PRIVATE_isReferenced","__PRIVATE_cfg","__PRIVATE_MemoryEagerDelegate","__PRIVATE_databaseInfo","__PRIVATE_AutoId","__PRIVATE_componentProvider","__PRIVATE_persistenceSettings","__PRIVATE_initializationDone","__PRIVATE_persistenceResult","__PRIVATE_initialized","initialize","Nr","L_","Ga","clientId","N_","Mc","x_","terminate","console","warn","W_","DOMException","j_","muted","eventHandler","__PRIVATE_methods","object","method","firestore","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","converter","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","DocumentReference","CACHE_SIZE_UNLIMITED","settings","__PRIVATE_validateNamedOptionalType","__PRIVATE_validateOptionNames","cacheSizeBytes","experimentalForceLongPolling","__PRIVATE_databaseIdOrApp","app","Firestore","external","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","__PRIVATE_client","getAuthHeaderValueForFirstParty","synchronizeTabs","experimentalTabSynchronization","clearPersistence","_removeServiceInstance","mf","waitForPendingWrites","arg","__PRIVATE_isPartialObserver","__PRIVATE_asyncObserver","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_pathString","CollectionReference","WriteBatch","SILENT","level","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","DocumentSnapshot","__PRIVATE_validateBetweenNumberOfArgs","__PRIVATE_validateSetOptions","__PRIVATE_convertedValue","__PRIVATE_parsed","merge","mergeFields","__PRIVATE_fieldOrUpdateData","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_currArg","__PRIVATE_internalOptions","__PRIVATE_validateOptionalArgType","complete","__PRIVATE_errHandler","__PRIVATE_internalListener","__PRIVATE_InternalQuery","__PRIVATE_validateGetOptions","__PRIVATE_unlisten","bl","metadata","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","__PRIVATE_validateSnapshotOptions","QueryDocumentSnapshot","fromFirestore","serverTimestamps","SnapshotMetadata","__PRIVATE__query","opStr","__PRIVATE_fieldValue","__PRIVATE_validateDefined","__PRIVATE_enums","operator","__PRIVATE_referenceList","directionStr","__PRIVATE_validatePositiveNumber","__PRIVATE_docOrField","Ff","__PRIVATE_allFields","components","__PRIVATE_refValue","__PRIVATE_rawValue","__PRIVATE_wrapped","QuerySnapshot","__PRIVATE_firestoreClient","__PRIVATE_documentIdValue","__PRIVATE_arrayOps","__PRIVATE_disjunctiveOps","__PRIVATE_isArrayOp","__PRIVATE_isDisjunctiveOp","__PRIVATE_existingField","__PRIVATE_conflictingOp","__PRIVATE_inequality","__PRIVATE__originalQuery","__PRIVATE__snapshot","empty","thisArg","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE__path","toFirestore","__PRIVATE_docRef","__PRIVATE_typeDescription","__PRIVATE_validator","__PRIVATE_validateOptionalArrayElements","__PRIVATE_validateNamedOptionalPropertyEquals","__PRIVATE_PublicFirestore","__PRIVATE_PublicTransaction","__PRIVATE_PublicWriteBatch","__PRIVATE_PublicDocumentReference","__PRIVATE_PublicDocumentSnapshot","__PRIVATE_PublicQueryDocumentSnapshot","__PRIVATE_PublicQuery","__PRIVATE_PublicQuerySnapshot","__PRIVATE_PublicCollectionReference","__PRIVATE_firestoreNamespace","FieldValue","__PRIVATE_RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","__PRIVATE_X_GOOG_API_CLIENT_VALUE","info","__PRIVATE_header","url","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_jsonObj","__PRIVATE_requestString","Content-Type","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","rd","open","hd","__PRIVATE_unguardedEventListen","param","WebChannel","OPEN","CLOSE","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_urlRpcName","__PRIVATE_firestoreFactory","registerComponent","Component","container","getProvider","setServiceProps","registerVersion","__PRIVATE_BrowserConnectivityMonitor","fi","__PRIVATE_encoded","raw","__PRIVATE_registerFirestore"],"mappings":"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"}