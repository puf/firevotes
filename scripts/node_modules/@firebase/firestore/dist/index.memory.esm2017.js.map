{"version":3,"file":"index.memory.esm2017.js","sources":["../src/core/version.ts","../src/auth/user.ts","../src/util/error.ts","../src/api/credentials.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/util/obj.ts","../src/util/byte_string.ts","../src/util/types.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/field_value.ts","../src/model/document.ts","../src/core/target.ts","../src/core/query.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/remote/rpc_error.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/remote/serializer.ts","../src/platform/platform.ts","../src/util/log.ts","../src/util/assert.ts","../src/util/misc.ts","../src/core/database_info.ts","../src/util/obj_map.ts","../src/model/mutation_batch.ts","../src/local/reference_set.ts","../src/local/persistence_promise.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/util/async_queue.ts","../src/local/lru_garbage_collector.ts","../src/core/target_id_generator.ts","../src/local/memory_index_manager.ts","../src/local/local_store.ts","../src/local/persistence.ts","../src/util/input_validation.ts","../src/util/api.ts","../src/api/blob.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/api/user_data_reader.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/core/transaction.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/transaction_runner.ts","../src/core/sync_engine.ts","../src/core/event_manager.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/remote_document_change_buffer.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/core/component_provider.ts","../src/core/firestore_client.ts","../src/util/async_observer.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../src/api/database.ts","../src/platform/config.ts","../src/remote/connectivity_monitor_noop.ts","../src/platform_browser/browser_connectivity_monitor.ts","../src/remote/stream_bridge.ts","../src/platform_browser/webchannel_connection.ts","../src/platform_browser/browser_init.ts","../src/platform_browser/browser_platform.ts","../index.memory.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\n\n/** The semver (www.semver.org) version of the SDK. */\nexport const SDK_VERSION = firebase.SDK_VERSION;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        throw new FirestoreError(\n          Code.ABORTED,\n          'getToken aborted due to token change.'\n        );\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static readonly MIN = new SnapshotVersion(new Timestamp(0, 0));\n\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static forDeletedDoc(): SnapshotVersion {\n    return SnapshotVersion.MIN;\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static EMPTY_PATH = new ResourcePath([]);\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static EMPTY_PATH = new FieldPath([]);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = PlatformSupport.getPlatform().atob(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return PlatformSupport.getPlatform().btoa(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './field_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport {\n  valueEquals,\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport interface TransformOperation {\n  /**\n   * Computes the local transform result against the provided `previousValue`,\n   * optionally using the provided localWriteTime.\n   */\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value;\n\n  /**\n   * Computes a final transform result after the transform has been acknowledged\n   * by the server, potentially using the server-provided transformResult.\n   */\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value;\n\n  /**\n   * If this transform operation is not idempotent, returns the base value to\n   * persist for this transform. If a base value is returned, the transform\n   * operation is always applied to this base value, even if document has\n   * already been updated.\n   *\n   * Base values provide consistent behavior for non-idempotent transforms and\n   * allow us to return the same latency-compensated value even if the backend\n   * has already applied the transform operation. The base value is null for\n   * idempotent transforms, as they can be re-played even if the backend has\n   * already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent transforms.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value | null;\n\n  isEqual(other: TransformOperation): boolean;\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform implements TransformOperation {\n  private constructor() {}\n  static instance = new ServerTimestampTransform();\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return serverTimestamp(localWriteTime!, previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    return transformResult!;\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Server timestamps are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return other instanceof ServerTimestampTransform;\n  }\n}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    const values = coercedFieldValuesArray(previousValue);\n    for (const toUnion of this.elements) {\n      if (!values.some(element => valueEquals(element, toUnion))) {\n        values.push(toUnion);\n      }\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayUnionTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    let values = coercedFieldValuesArray(previousValue);\n    for (const toRemove of this.elements) {\n      values = values.filter(element => !valueEquals(element, toRemove));\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayRemoveTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation implements TransformOperation {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n    // precision and resolves overflows by reducing precision, we do not\n    // manually cap overflows at 2^63.\n    const baseValue = this.computeBaseValue(previousValue);\n    const sum = this.asNumber(baseValue) + this.asNumber(this.operand);\n    if (isInteger(baseValue) && isInteger(this.operand)) {\n      return this.serializer.toInteger(sum);\n    } else {\n      return this.serializer.toDouble(sum);\n    }\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    debugAssert(\n      transformResult !== null,\n      \"Didn't receive transformResult for NUMERIC_ADD transform\"\n    );\n    return transformResult;\n  }\n\n  /**\n   * Inspects the provided value, returning the provided value if it is already\n   * a NumberValue, otherwise returning a coerced value of 0.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof NumericIncrementTransformOperation &&\n      valueEquals(this.operand, other.operand)\n    );\n  }\n\n  private asNumber(value: api.Value): number {\n    return normalizeNumber(value.integerValue || value.doubleValue);\n  }\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './field_value';\nimport { FieldPath } from './path';\nimport { TransformOperation } from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: SortedSet<FieldPath>) {\n    // TODO(dimond): validation of FieldMask\n  }\n\n  static fromSet(fields: SortedSet<FieldPath>): FieldMask {\n    return new FieldMask(fields);\n  }\n\n  static fromArray(fields: FieldPath[]): FieldMask {\n    let fieldsAsSet = new SortedSet<FieldPath>(FieldPath.comparator);\n    fields.forEach(fieldPath => (fieldsAsSet = fieldsAsSet.add(fieldPath)));\n    return new FieldMask(fieldsAsSet);\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    let found = false;\n    this.fields.forEach(fieldMaskPath => {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return this.fields.isEqual(other.fields);\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n\n  isEqual(other: FieldTransform): boolean {\n    return (\n      this.field.isEqual(other.field) && this.transform.isEqual(other.transform)\n    );\n  }\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  static readonly NONE = new Precondition();\n\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  /**\n   * Returns true if the preconditions is valid for the given document\n   * (or null if no document is available).\n   */\n  isValidFor(maybeDoc: MaybeDocument | null): boolean {\n    if (this.updateTime !== undefined) {\n      return (\n        maybeDoc instanceof Document &&\n        maybeDoc.version.isEqual(this.updateTime)\n      );\n    } else if (this.exists !== undefined) {\n      return this.exists === maybeDoc instanceof Document;\n    } else {\n      debugAssert(this.isNone, 'Precondition should be empty');\n      return true;\n    }\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing a new remote document. If the input document doesn't match the\n   * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n   * returned.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param mutationResult The result of applying the mutation from the backend.\n   * @return The mutated document. The returned document may be an\n   *     UnknownDocument if the mutation could not be applied to the locally\n   *     cached base document.\n   */\n  abstract applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing the new local view of a document. Both the input and returned\n   * documents can be null.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param baseDoc The state of the document prior to this mutation batch. The\n   *     input document can be null if the client has no knowledge of the\n   *     pre-mutation state of the document.\n   * @param localWriteTime A timestamp indicating the local write time of the\n   *     batch this mutation is a part of.\n   * @return The mutated document. The returned document may be null, but only\n   *     if maybeDoc was null and the mutation would not create a new document.\n   */\n  abstract applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null;\n\n  /**\n   * If this mutation is not idempotent, returns the base value to persist with\n   * this mutation. If a base value is returned, the mutation is always applied\n   * to this base value, even if document has already been updated.\n   *\n   * The base value is a sparse object that consists of only the document\n   * fields for which this mutation contains a non-idempotent transformation\n   * (e.g. a numeric increment). The provided value guarantees consistent\n   * behavior for non-idempotent transforms and allow us to return the same\n   * latency-compensated value even if the backend has already applied the\n   * mutation. The base value is null for idempotent mutations, as they can be\n   * re-played even if the backend has already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent mutations.\n   */\n  abstract extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null;\n\n  abstract isEqual(other: Mutation): boolean;\n\n  protected verifyKeyMatches(maybeDoc: MaybeDocument | null): void {\n    if (maybeDoc != null) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply a mutation to a document with the same key'\n      );\n    }\n  }\n\n  /**\n   * Returns the version from the given document for use as the result of a\n   * mutation. Mutations are defined to return the version of the base document\n   * only if it is an existing document. Deleted and unknown documents have a\n   * post-mutation version of SnapshotVersion.MIN.\n   */\n  protected static getPostMutationVersion(\n    maybeDoc: MaybeDocument | null\n  ): SnapshotVersion {\n    if (maybeDoc instanceof Document) {\n      return maybeDoc.version;\n    } else {\n      return SnapshotVersion.MIN;\n    }\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by SetMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    const version = mutationResult.version;\n    return new Document(this.key, version, this.value, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    return new Document(this.key, version, this.value, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof SetMutation &&\n      this.key.isEqual(other.key) &&\n      this.value.isEqual(other.value) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by PatchMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, mutationResult.version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof PatchMutation &&\n      this.key.isEqual(other.key) &&\n      this.fieldMask.isEqual(other.fieldMask) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Patches the data of document if available or creates a new document. Note\n   * that this does not check whether or not the precondition of this patch\n   * holds.\n   */\n  private patchDocument(maybeDoc: MaybeDocument | null): ObjectValue {\n    let data: ObjectValue;\n    if (maybeDoc instanceof Document) {\n      data = maybeDoc.data();\n    } else {\n      data = ObjectValue.EMPTY;\n    }\n    return this.patchObject(data);\n  }\n\n  private patchObject(data: ObjectValue): ObjectValue {\n    const builder = data.toBuilder();\n    this.fieldMask.fields.forEach(fieldPath => {\n      if (!fieldPath.isEmpty()) {\n        const newValue = this.data.field(fieldPath);\n        if (newValue !== null) {\n          builder.set(fieldPath, newValue);\n        } else {\n          builder.delete(fieldPath);\n        }\n      }\n    });\n    return builder.build();\n  }\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    hardAssert(\n      mutationResult.transformResults != null,\n      'Transform results missing for TransformMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.serverTransformResults(\n      maybeDoc,\n      mutationResult.transformResults!\n    );\n\n    const version = mutationResult.version;\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.localTransformResults(\n      localWriteTime,\n      maybeDoc,\n      baseDoc\n    );\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, doc.version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null {\n    let baseObject: ObjectValueBuilder | null = null;\n    for (const fieldTransform of this.fieldTransforms) {\n      const existingValue =\n        maybeDoc instanceof Document\n          ? maybeDoc.field(fieldTransform.field)\n          : undefined;\n      const coercedValue = fieldTransform.transform.computeBaseValue(\n        existingValue || null\n      );\n\n      if (coercedValue != null) {\n        if (baseObject == null) {\n          baseObject = ObjectValue.newBuilder().set(\n            fieldTransform.field,\n            coercedValue\n          );\n        } else {\n          baseObject = baseObject.set(fieldTransform.field, coercedValue);\n        }\n      }\n    }\n    return baseObject ? baseObject.build() : null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof TransformMutation &&\n      this.key.isEqual(other.key) &&\n      arrayEquals(this.fieldTransforms, other.fieldTransforms, (l, r) =>\n        l.isEqual(r)\n      ) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Asserts that the given MaybeDocument is actually a Document and verifies\n   * that it matches the key for this mutation. Since we only support\n   * transformations with precondition exists this method is guaranteed to be\n   * safe.\n   */\n  private requireDocument(maybeDoc: MaybeDocument | null): Document {\n    debugAssert(\n      maybeDoc instanceof Document,\n      'Unknown MaybeDocument type ' + maybeDoc\n    );\n    debugAssert(\n      maybeDoc.key.isEqual(this.key),\n      'Can only transform a document with the same key'\n    );\n    return maybeDoc;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use after a\n   * TransformMutation has been acknowledged by the server.\n   *\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @param serverTransformResults The transform results received by the server.\n   * @return The transform results list.\n   */\n  private serverTransformResults(\n    baseDoc: MaybeDocument | null,\n    serverTransformResults: Array<api.Value | null>\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    hardAssert(\n      this.fieldTransforms.length === serverTransformResults.length,\n      `server transform result count (${serverTransformResults.length}) ` +\n        `should match field transform count (${this.fieldTransforms.length})`\n    );\n\n    for (let i = 0; i < serverTransformResults.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const transform = fieldTransform.transform;\n      let previousValue: api.Value | null = null;\n      if (baseDoc instanceof Document) {\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n      transformResults.push(\n        transform.applyToRemoteDocument(\n          previousValue,\n          serverTransformResults[i]\n        )\n      );\n    }\n    return transformResults;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use when applying a\n   * TransformMutation locally.\n   *\n   * @param localWriteTime The local time of the transform mutation (used to\n   *     generate ServerTimestampValues).\n   * @param maybeDoc The current state of the document after applying all\n   *     previous mutations.\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @return The transform results list.\n   */\n  private localTransformResults(\n    localWriteTime: Timestamp,\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    for (const fieldTransform of this.fieldTransforms) {\n      const transform = fieldTransform.transform;\n\n      let previousValue: api.Value | null = null;\n      if (maybeDoc instanceof Document) {\n        previousValue = maybeDoc.field(fieldTransform.field);\n      }\n\n      if (previousValue === null && baseDoc instanceof Document) {\n        // If the current document does not contain a value for the mutated\n        // field, use the value that existed before applying this mutation\n        // batch. This solves an edge case where a PatchMutation clears the\n        // values in a nested map before the TransformMutation is applied.\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n\n      transformResults.push(\n        transform.applyToLocalView(previousValue, localWriteTime)\n      );\n    }\n    return transformResults;\n  }\n\n  private transformObject(\n    data: ObjectValue,\n    transformResults: api.Value[]\n  ): ObjectValue {\n    debugAssert(\n      transformResults.length === this.fieldTransforms.length,\n      'TransformResults length mismatch.'\n    );\n\n    const builder = data.toBuilder();\n    for (let i = 0; i < this.fieldTransforms.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const fieldPath = fieldTransform.field;\n      builder.set(fieldPath, transformResults[i]);\n    }\n    return builder.build();\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by DeleteMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    return new NoDocument(this.key, mutationResult.version, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply mutation to document with same key'\n      );\n    }\n    return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof DeleteMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof VerifyMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\nimport { SortedSet } from '../util/sorted_set';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  static EMPTY = new ObjectValue({ mapValue: {} });\n\n  constructor(public readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  /** Returns a new Builder instance that is based on an empty object. */\n  static newBuilder(): ObjectValueBuilder {\n    return ObjectValue.EMPTY.toBuilder();\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  /**\n   * Returns a FieldMask built from all FieldPaths starting from this\n   * ObjectValue, including paths from nested objects.\n   */\n  fieldMask(): FieldMask {\n    return this.extractFieldMask(this.proto.mapValue!);\n  }\n\n  private extractFieldMask(value: api.MapValue): FieldMask {\n    let fields = new SortedSet<FieldPath>(FieldPath.comparator);\n    forEach(value.fields || {}, (key, value) => {\n      const currentPath = new FieldPath([key]);\n      if (typeOrder(value) === TypeOrder.ObjectValue) {\n        const nestedMask = this.extractFieldMask(value.mapValue!);\n        const nestedFields = nestedMask.fields;\n        if (nestedFields.isEmpty()) {\n          // Preserve the empty map by adding it to the FieldMask.\n          fields = fields.add(currentPath);\n        } else {\n          // For nested and non-empty ObjectValues, add the FieldPath of the\n          // leaf nodes.\n          nestedFields.forEach(nestedPath => {\n            fields = fields.add(currentPath.child(nestedPath));\n          });\n        }\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n        // nodes.\n        fields = fields.add(currentPath);\n      }\n    });\n    return FieldMask.fromSet(fields);\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n\n  /** Creates a ObjectValueBuilder instance that is based on the current value. */\n  toBuilder(): ObjectValueBuilder {\n    return new ObjectValueBuilder(this);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.EMPTY_PATH,\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.EMPTY_PATH to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './field_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n\n  static compareByField(field: FieldPath, d1: Document, d2: Document): number {\n    const v1 = d1.field(field);\n    const v2 = d2.field(field);\n    if (v1 !== null && v2 !== null) {\n      return valueCompare(v1, v2);\n    } else {\n      return fail(\"Trying to compare documents on fields that don't exist\");\n    }\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport { Bound, Filter, OrderBy } from './query';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport class Target {\n  private memoizedCanonicalId: string | null = null;\n\n  /**\n   * Initializes a Target with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   *\n   * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n   * using this constructor, because `Query` provides an implicit `orderBy`\n   * property.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n\n  canonicalId(): string {\n    if (this.memoizedCanonicalId === null) {\n      let canonicalId = this.path.canonicalString();\n      if (this.collectionGroup !== null) {\n        canonicalId += '|cg:' + this.collectionGroup;\n      }\n      canonicalId += '|f:';\n      canonicalId += this.filters.map(f => f.canonicalId()).join(',');\n      canonicalId += '|ob:';\n      canonicalId += this.orderBy.map(o => o.canonicalId()).join(',');\n\n      if (!isNullOrUndefined(this.limit)) {\n        canonicalId += '|l:';\n        canonicalId += this.limit!;\n      }\n      if (this.startAt) {\n        canonicalId += '|lb:';\n        canonicalId += this.startAt.canonicalId();\n      }\n      if (this.endAt) {\n        canonicalId += '|ub:';\n        canonicalId += this.endAt.canonicalId();\n      }\n      this.memoizedCanonicalId = canonicalId;\n    }\n    return this.memoizedCanonicalId;\n  }\n\n  toString(): string {\n    let str = this.path.canonicalString();\n    if (this.collectionGroup !== null) {\n      str += ' collectionGroup=' + this.collectionGroup;\n    }\n    if (this.filters.length > 0) {\n      str += `, filters: [${this.filters.join(', ')}]`;\n    }\n    if (!isNullOrUndefined(this.limit)) {\n      str += ', limit: ' + this.limit;\n    }\n    if (this.orderBy.length > 0) {\n      str += `, orderBy: [${this.orderBy.join(', ')}]`;\n    }\n    if (this.startAt) {\n      str += ', startAt: ' + this.startAt.canonicalId();\n    }\n    if (this.endAt) {\n      str += ', endAt: ' + this.endAt.canonicalId();\n    }\n    return `Target(${str})`;\n  }\n\n  isEqual(other: Target): boolean {\n    if (this.limit !== other.limit) {\n      return false;\n    }\n\n    if (this.orderBy.length !== other.orderBy.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.orderBy.length; i++) {\n      if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n        return false;\n      }\n    }\n\n    if (this.filters.length !== other.filters.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.filters.length; i++) {\n      if (!this.filters[i].isEqual(other.filters[i])) {\n        return false;\n      }\n    }\n\n    if (this.collectionGroup !== other.collectionGroup) {\n      return false;\n    }\n\n    if (!this.path.isEqual(other.path)) {\n      return false;\n    }\n\n    if (\n      this.startAt !== null\n        ? !this.startAt.isEqual(other.startAt)\n        : other.startAt !== null\n    ) {\n      return false;\n    }\n\n    return this.endAt !== null\n      ? this.endAt.isEqual(other.endAt)\n      : other.endAt === null;\n  }\n\n  isDocumentQuery(): boolean {\n    return (\n      DocumentKey.isDocumentKey(this.path) &&\n      this.collectionGroup === null &&\n      this.filters.length === 0\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  canonicalId,\n  valueCompare,\n  arrayValueContains,\n  valueEquals,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport { Target } from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n */\nexport class Query {\n  static atPath(path: ResourcePath): Query {\n    return new Query(path);\n  }\n\n  private memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  private memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      this.assertValidBound(this.startAt);\n    }\n    if (this.endAt) {\n      this.assertValidBound(this.endAt);\n    }\n  }\n\n  get orderBy(): OrderBy[] {\n    if (this.memoizedOrderBy === null) {\n      const inequalityField = this.getInequalityFilterField();\n      const firstOrderByField = this.getFirstOrderByField();\n      if (inequalityField !== null && firstOrderByField === null) {\n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        if (inequalityField.isKeyField()) {\n          this.memoizedOrderBy = [KEY_ORDERING_ASC];\n        } else {\n          this.memoizedOrderBy = [\n            new OrderBy(inequalityField),\n            KEY_ORDERING_ASC\n          ];\n        }\n      } else {\n        debugAssert(\n          inequalityField === null ||\n            (firstOrderByField !== null &&\n              inequalityField.isEqual(firstOrderByField)),\n          'First orderBy should match inequality field.'\n        );\n        this.memoizedOrderBy = [];\n        let foundKeyOrdering = false;\n        for (const orderBy of this.explicitOrderBy) {\n          this.memoizedOrderBy.push(orderBy);\n          if (orderBy.field.isKeyField()) {\n            foundKeyOrdering = true;\n          }\n        }\n        if (!foundKeyOrdering) {\n          // The order of the implicit key ordering always matches the last\n          // explicit order by\n          const lastDirection =\n            this.explicitOrderBy.length > 0\n              ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n              : Direction.ASCENDING;\n          this.memoizedOrderBy.push(\n            lastDirection === Direction.ASCENDING\n              ? KEY_ORDERING_ASC\n              : KEY_ORDERING_DESC\n          );\n        }\n      }\n    }\n    return this.memoizedOrderBy;\n  }\n\n  addFilter(filter: Filter): Query {\n    debugAssert(\n      this.getInequalityFilterField() == null ||\n        !(filter instanceof FieldFilter) ||\n        !filter.isInequality() ||\n        filter.field.isEqual(this.getInequalityFilterField()!),\n      'Query must only have one inequality field.'\n    );\n\n    debugAssert(\n      !this.isDocumentQuery(),\n      'No filtering allowed for document query'\n    );\n\n    const newFilters = this.filters.concat([filter]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      newFilters,\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  addOrderBy(orderBy: OrderBy): Query {\n    debugAssert(\n      !this.startAt && !this.endAt,\n      'Bounds must be set after orderBy'\n    );\n    // TODO(dimond): validate that orderBy does not list the same key twice.\n    const newOrderBy = this.explicitOrderBy.concat([orderBy]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      newOrderBy,\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToFirst(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.First,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToLast(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.Last,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withStartAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      bound,\n      this.endAt\n    );\n  }\n\n  withEndAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      bound\n    );\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new Query(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  // TODO(b/29183165): This is used to get a unique string from a query to, for\n  // example, use as a dictionary key, but the implementation is subject to\n  // collisions. Make it collision-free.\n  canonicalId(): string {\n    return `${this.toTarget().canonicalId()}|lt:${this.limitType}`;\n  }\n\n  toString(): string {\n    return `Query(target=${this.toTarget().toString()}; limitType=${\n      this.limitType\n    })`;\n  }\n\n  isEqual(other: Query): boolean {\n    return (\n      this.toTarget().isEqual(other.toTarget()) &&\n      this.limitType === other.limitType\n    );\n  }\n\n  docComparator(d1: Document, d2: Document): number {\n    let comparedOnKeyField = false;\n    for (const orderBy of this.orderBy) {\n      const comp = orderBy.compare(d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  }\n\n  matches(doc: Document): boolean {\n    return (\n      this.matchesPathAndCollectionGroup(doc) &&\n      this.matchesOrderBy(doc) &&\n      this.matchesFilters(doc) &&\n      this.matchesBounds(doc)\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter && filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter) {\n        if (operators.indexOf(filter.op) >= 0) {\n          return filter.op;\n        }\n      }\n    }\n    return null;\n  }\n\n  isDocumentQuery(): boolean {\n    return this.toTarget().isDocumentQuery();\n  }\n\n  isCollectionGroupQuery(): boolean {\n    return this.collectionGroup !== null;\n  }\n\n  /**\n   * Converts this `Query` instance to it's corresponding `Target`\n   * representation.\n   */\n  toTarget(): Target {\n    if (!this.memoizedTarget) {\n      if (this.limitType === LimitType.First) {\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          this.orderBy,\n          this.filters,\n          this.limit,\n          this.startAt,\n          this.endAt\n        );\n      } else {\n        // Flip the orderBy directions since we want the last results\n        const orderBys = [] as OrderBy[];\n        for (const orderBy of this.orderBy) {\n          const dir =\n            orderBy.dir === Direction.DESCENDING\n              ? Direction.ASCENDING\n              : Direction.DESCENDING;\n          orderBys.push(new OrderBy(orderBy.field, dir));\n        }\n\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const startAt = this.endAt\n          ? new Bound(this.endAt.position, !this.endAt.before)\n          : null;\n        const endAt = this.startAt\n          ? new Bound(this.startAt.position, !this.startAt.before)\n          : null;\n\n        // Now return as a LimitType.First query.\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          orderBys,\n          this.filters,\n          this.limit,\n          startAt,\n          endAt\n        );\n      }\n    }\n    return this.memoizedTarget!;\n  }\n\n  private matchesPathAndCollectionGroup(doc: Document): boolean {\n    const docPath = doc.key.path;\n    if (this.collectionGroup !== null) {\n      // NOTE: this.path is currently always empty since we don't expose Collection\n      // Group queries rooted at a document path yet.\n      return (\n        doc.key.hasCollectionId(this.collectionGroup) &&\n        this.path.isPrefixOf(docPath)\n      );\n    } else if (DocumentKey.isDocumentKey(this.path)) {\n      // exact match for document queries\n      return this.path.isEqual(docPath);\n    } else {\n      // shallow ancestor queries by default\n      return this.path.isImmediateParentOf(docPath);\n    }\n  }\n\n  /**\n   * A document must have a value for every ordering clause in order to show up\n   * in the results.\n   */\n  private matchesOrderBy(doc: Document): boolean {\n    for (const orderBy of this.explicitOrderBy) {\n      // order by key always matches\n      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private matchesFilters(doc: Document): boolean {\n    for (const filter of this.filters) {\n      if (!filter.matches(doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Makes sure a document is within the bounds, if provided.\n   */\n  private matchesBounds(doc: Document): boolean {\n    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    return true;\n  }\n\n  private assertValidBound(bound: Bound): void {\n    debugAssert(\n      bound.position.length <= this.orderBy.length,\n      'Bound is longer than orderBy'\n    );\n  }\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n  abstract canonicalId(): string;\n  abstract isEqual(filter: Filter): boolean;\n}\n\nexport class Operator {\n  static LESS_THAN = new Operator('<');\n  static LESS_THAN_OR_EQUAL = new Operator('<=');\n  static EQUAL = new Operator('==');\n  static GREATER_THAN = new Operator('>');\n  static GREATER_THAN_OR_EQUAL = new Operator('>=');\n  static ARRAY_CONTAINS = new Operator('array-contains');\n  static IN = new Operator('in');\n  static ARRAY_CONTAINS_ANY = new Operator('array-contains-any');\n\n  static fromString(op: string): Operator {\n    switch (op) {\n      case '<':\n        return Operator.LESS_THAN;\n      case '<=':\n        return Operator.LESS_THAN_OR_EQUAL;\n      case '==':\n        return Operator.EQUAL;\n      case '>=':\n        return Operator.GREATER_THAN_OR_EQUAL;\n      case '>':\n        return Operator.GREATER_THAN;\n      case 'array-contains':\n        return Operator.ARRAY_CONTAINS;\n      case 'in':\n        return Operator.IN;\n      case 'array-contains-any':\n        return Operator.ARRAY_CONTAINS_ANY;\n      default:\n        return fail('Unknown FieldFilter operator: ' + op);\n    }\n  }\n\n  constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n\n  isEqual(other: Operator): boolean {\n    return this.name === other.name;\n  }\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN) {\n        debugAssert(\n          isArray(value),\n          'Comparing on key with IN, but filter value not an ArrayValue'\n        );\n        debugAssert(\n          (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n          'Comparing on key with IN, but an array value was not a RefValue'\n        );\n        return new KeyFieldInFilter(field, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      this.field.canonicalString() +\n      this.op.toString() +\n      canonicalId(this.value)\n    );\n  }\n\n  isEqual(other: Filter): boolean {\n    if (other instanceof FieldFilter) {\n      return (\n        this.op.isEqual(other.op) &&\n        this.field.isEqual(other.field) &&\n        valueEquals(this.value, other.value)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} ${this.op} ${canonicalId(\n      this.value\n    )}`;\n  }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'KeyFieldInFilter expects an ArrayValue');\n    this.keys = (value.arrayValue.values || []).map(v => {\n      debugAssert(\n        isReferenceValue(v),\n        'Comparing on key with IN, but an array value was not a ReferenceValue'\n      );\n      return DocumentKey.fromName(v.referenceValue);\n    });\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport class Direction {\n  static ASCENDING = new Direction('asc');\n  static DESCENDING = new Direction('desc');\n\n  private constructor(public name: string) {}\n\n  toString(): string {\n    return this.name;\n  }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return `${this.before ? 'b' : 'a'}:${this.position\n      .map(p => canonicalId(p))\n      .join(',')}`;\n  }\n\n  /**\n   * Returns true if a document sorts before a bound using the provided sort\n   * order.\n   */\n  sortsBeforeDocument(orderBy: OrderBy[], doc: Document): boolean {\n    debugAssert(\n      this.position.length <= orderBy.length,\n      \"Bound has more components than query's orderBy\"\n    );\n    let comparison = 0;\n    for (let i = 0; i < this.position.length; i++) {\n      const orderByComponent = orderBy[i];\n      const component = this.position[i];\n      if (orderByComponent.field.isKeyField()) {\n        debugAssert(\n          isReferenceValue(component),\n          'Bound has a non-key value where the key path is being used.'\n        );\n        comparison = DocumentKey.comparator(\n          DocumentKey.fromName(component.referenceValue),\n          doc.key\n        );\n      } else {\n        const docValue = doc.field(orderByComponent.field);\n        debugAssert(\n          docValue !== null,\n          'Field should exist since document matched the orderBy already.'\n        );\n        comparison = valueCompare(component, docValue);\n      }\n      if (orderByComponent.dir === Direction.DESCENDING) {\n        comparison = comparison * -1;\n      }\n      if (comparison !== 0) {\n        break;\n      }\n    }\n    return this.before ? comparison <= 0 : comparison < 0;\n  }\n\n  isEqual(other: Bound | null): boolean {\n    if (other === null) {\n      return false;\n    }\n    if (\n      this.before !== other.before ||\n      this.position.length !== other.position.length\n    ) {\n      return false;\n    }\n    for (let i = 0; i < this.position.length; i++) {\n      const thisPosition = this.position[i];\n      const otherPosition = other.position[i];\n      if (!valueEquals(thisPosition, otherPosition)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  readonly dir: Direction;\n  private readonly isKeyOrderBy: boolean;\n\n  constructor(readonly field: FieldPath, dir?: Direction) {\n    if (dir === undefined) {\n      dir = Direction.ASCENDING;\n    }\n    this.dir = dir;\n    this.isKeyOrderBy = field.isKeyField();\n  }\n\n  compare(d1: Document, d2: Document): number {\n    const comparison = this.isKeyOrderBy\n      ? Document.compareByKey(d1, d2)\n      : Document.compareByField(this.field, d1, d2);\n    switch (this.dir) {\n      case Direction.ASCENDING:\n        return comparison;\n      case Direction.DESCENDING:\n        return -1 * comparison;\n      default:\n        return fail('Unknown direction: ' + this.dir);\n    }\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return this.field.canonicalString() + this.dir.toString();\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} (${this.dir})`;\n  }\n\n  isEqual(other: OrderBy): boolean {\n    return this.dir === other.dir && this.field.isEqual(other.field);\n  }\n}\n\nconst KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nconst KEY_ORDERING_DESC = new OrderBy(\n  FieldPath.keyField(),\n  Direction.DESCENDING\n);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !this.query.isEqual(other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.MIN,\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (target.isDocumentQuery()) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.forDeletedDoc())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && targetData.target.isDocumentQuery()) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  Operator,\n  OrderBy,\n  Query\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/field_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING.name] = 'ASCENDING';\n  dirs[Direction.DESCENDING.name] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN.name] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN.name] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL.name] = 'EQUAL';\n  ops[Operator.ARRAY_CONTAINS.name] = 'ARRAY_CONTAINS';\n  ops[Operator.IN.name] = 'IN';\n  ops[Operator.ARRAY_CONTAINS_ANY.name] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\nexport interface SerializerOptions {\n  /**\n   * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n   * setting this flag to true, the serializer will use the Proto3 JSON format.\n   *\n   * For a description of the Proto3 JSON format check\n   * https://developers.google.com/protocol-buffers/docs/proto3#json\n   */\n  useProto3Json: boolean;\n}\n\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    private databaseId: DatabaseId,\n    private options: SerializerOptions\n  ) {}\n\n  fromRpcStatus(status: api.Status): FirestoreError {\n    const code =\n      status.code === undefined\n        ? Code.UNKNOWN\n        : mapCodeFromRpcCode(status.code);\n    return new FirestoreError(code, status.message || '');\n  }\n\n  /**\n   * Returns a value for a number (or null) that's appropriate to put into\n   * a google.protobuf.Int32Value proto.\n   * DO NOT USE THIS FOR ANYTHING ELSE.\n   * This method cheats. It's typed as returning \"number\" because that's what\n   * our generated proto interfaces say Int32Value must be. But GRPC actually\n   * expects a { value: <number> } struct.\n   */\n  private toInt32Proto(val: number | null): number | { value: number } | null {\n    if (this.options.useProto3Json || isNullOrUndefined(val)) {\n      return val;\n    } else {\n      return { value: val };\n    }\n  }\n\n  /**\n   * Returns a number (or null) from a google.protobuf.Int32Value proto.\n   */\n  private fromInt32Proto(\n    val: number | { value: number } | undefined\n  ): number | null {\n    let result;\n    if (typeof val === 'object') {\n      result = val.value;\n    } else {\n      result = val;\n    }\n    return isNullOrUndefined(result) ? null : result;\n  }\n\n  /**\n   * Returns an IntegerValue for `value`.\n   */\n  toInteger(value: number): api.Value {\n    return { integerValue: '' + value };\n  }\n\n  /**\n   * Returns an DoubleValue for `value` that is encoded based the serializer's\n   * `useProto3Json` setting.\n   */\n  toDouble(value: number): api.Value {\n    if (this.options.useProto3Json) {\n      if (isNaN(value)) {\n        return { doubleValue: 'NaN' };\n      } else if (value === Infinity) {\n        return { doubleValue: 'Infinity' };\n      } else if (value === -Infinity) {\n        return { doubleValue: '-Infinity' };\n      }\n    }\n    return { doubleValue: isNegativeZero(value) ? '-0' : value };\n  }\n\n  /**\n   * Returns a value for a number that's appropriate to put into a proto.\n   * The return value is an IntegerValue if it can safely represent the value,\n   * otherwise a DoubleValue is returned.\n   */\n  toNumber(value: number): api.Value {\n    return isSafeInteger(value) ? this.toInteger(value) : this.toDouble(value);\n  }\n\n  /**\n   * Returns a value for a Date that's appropriate to put into a proto.\n   */\n  toTimestamp(timestamp: Timestamp): api.Timestamp {\n    if (this.options.useProto3Json) {\n      // Serialize to ISO-8601 date format, but with full nano resolution.\n      // Since JS Date has only millis, let's only use it for the seconds and\n      // then manually add the fractions to the end.\n      const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n      // Remove .xxx frac part and Z in the end.\n      const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n      // Pad the fraction out to 9 digits (nanos).\n      const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n      return `${strUntilSeconds}.${nanoStr}Z`;\n    } else {\n      return {\n        seconds: '' + timestamp.seconds,\n        nanos: timestamp.nanoseconds\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    }\n  }\n\n  private fromTimestamp(date: api.Timestamp): Timestamp {\n    const timestamp = normalizeTimestamp(date);\n    return new Timestamp(timestamp.seconds, timestamp.nanos);\n  }\n\n  /**\n   * Returns a value for bytes that's appropriate to put in a proto.\n   *\n   * Visible for testing.\n   */\n  toBytes(bytes: Blob | ByteString): string | Uint8Array {\n    if (this.options.useProto3Json) {\n      return bytes.toBase64();\n    } else {\n      return bytes.toUint8Array();\n    }\n  }\n\n  /**\n   * Returns a ByteString based on the proto string value.\n   */\n  fromBytes(value: string | Uint8Array | undefined): ByteString {\n    if (this.options.useProto3Json) {\n      hardAssert(\n        value === undefined || typeof value === 'string',\n        'value must be undefined or a string when using proto3 Json'\n      );\n      return ByteString.fromBase64String(value ? value : '');\n    } else {\n      hardAssert(\n        value === undefined || value instanceof Uint8Array,\n        'value must be undefined or Uint8Array'\n      );\n      return ByteString.fromUint8Array(value ? value : new Uint8Array());\n    }\n  }\n\n  toVersion(version: SnapshotVersion): api.Timestamp {\n    return this.toTimestamp(version.toTimestamp());\n  }\n\n  fromVersion(version: api.Timestamp): SnapshotVersion {\n    hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n  }\n\n  toResourceName(path: ResourcePath, databaseId?: DatabaseId): string {\n    return this.fullyQualifiedPrefixPath(databaseId || this.databaseId)\n      .child('documents')\n      .child(path)\n      .canonicalString();\n  }\n\n  fromResourceName(name: string): ResourcePath {\n    const resource = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resource),\n      'Tried to deserialize invalid key ' + resource.toString()\n    );\n    return resource;\n  }\n\n  toName(key: DocumentKey): string {\n    return this.toResourceName(key.path);\n  }\n\n  fromName(name: string): DocumentKey {\n    const resource = this.fromResourceName(name);\n    hardAssert(\n      resource.get(1) === this.databaseId.projectId,\n      'Tried to deserialize key from different project: ' +\n        resource.get(1) +\n        ' vs ' +\n        this.databaseId.projectId\n    );\n    hardAssert(\n      (!resource.get(3) && !this.databaseId.database) ||\n        resource.get(3) === this.databaseId.database,\n      'Tried to deserialize key from different database: ' +\n        resource.get(3) +\n        ' vs ' +\n        this.databaseId.database\n    );\n    return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n  }\n\n  toQueryPath(path: ResourcePath): string {\n    return this.toResourceName(path);\n  }\n\n  fromQueryPath(name: string): ResourcePath {\n    const resourceName = this.fromResourceName(name);\n    // In v1beta1 queries for collections at the root did not have a trailing\n    // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n    // ability to read the v1beta1 form for compatibility with queries persisted\n    // in the local target cache.\n    if (resourceName.length === 4) {\n      return ResourcePath.EMPTY_PATH;\n    }\n    return this.extractLocalPathFromResourceName(resourceName);\n  }\n\n  get encodedDatabaseId(): string {\n    const path = new ResourcePath([\n      'projects',\n      this.databaseId.projectId,\n      'databases',\n      this.databaseId.database\n    ]);\n    return path.canonicalString();\n  }\n\n  private fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n    return new ResourcePath([\n      'projects',\n      databaseId.projectId,\n      'databases',\n      databaseId.database\n    ]);\n  }\n\n  private extractLocalPathFromResourceName(\n    resourceName: ResourcePath\n  ): ResourcePath {\n    hardAssert(\n      resourceName.length > 4 && resourceName.get(4) === 'documents',\n      'tried to deserialize invalid key ' + resourceName.toString()\n    );\n    return resourceName.popFirst(5);\n  }\n\n  /** Creates an api.Document from key and fields (but no create/update time) */\n  toMutationDocument(key: DocumentKey, fields: ObjectValue): api.Document {\n    return {\n      name: this.toName(key),\n      fields: fields.proto.mapValue.fields\n    };\n  }\n\n  toDocument(document: Document): api.Document {\n    debugAssert(\n      !document.hasLocalMutations,\n      \"Can't serialize documents with mutations.\"\n    );\n    return {\n      name: this.toName(document.key),\n      fields: document.toProto().mapValue.fields,\n      updateTime: this.toTimestamp(document.version.toTimestamp())\n    };\n  }\n\n  fromDocument(\n    document: api.Document,\n    hasCommittedMutations?: boolean\n  ): Document {\n    const key = this.fromName(document.name!);\n    const version = this.fromVersion(document.updateTime!);\n    const data = new ObjectValue({ mapValue: { fields: document.fields } });\n    return new Document(key, version, data, {\n      hasCommittedMutations: !!hasCommittedMutations\n    });\n  }\n\n  private fromFound(doc: api.BatchGetDocumentsResponse): Document {\n    hardAssert(\n      !!doc.found,\n      'Tried to deserialize a found document from a missing document.'\n    );\n    assertPresent(doc.found.name, 'doc.found.name');\n    assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n    const key = this.fromName(doc.found.name);\n    const version = this.fromVersion(doc.found.updateTime);\n    const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n    return new Document(key, version, data, {});\n  }\n\n  private fromMissing(result: api.BatchGetDocumentsResponse): NoDocument {\n    hardAssert(\n      !!result.missing,\n      'Tried to deserialize a missing document from a found document.'\n    );\n    hardAssert(\n      !!result.readTime,\n      'Tried to deserialize a missing document without a read time.'\n    );\n    const key = this.fromName(result.missing);\n    const version = this.fromVersion(result.readTime);\n    return new NoDocument(key, version);\n  }\n\n  fromMaybeDocument(result: api.BatchGetDocumentsResponse): MaybeDocument {\n    if ('found' in result) {\n      return this.fromFound(result);\n    } else if ('missing' in result) {\n      return this.fromMissing(result);\n    }\n    return fail('invalid batch get response: ' + JSON.stringify(result));\n  }\n\n  fromWatchChange(change: api.ListenResponse): WatchChange {\n    let watchChange: WatchChange;\n    if ('targetChange' in change) {\n      assertPresent(change.targetChange, 'targetChange');\n      // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n      // if unset\n      const state = this.fromWatchTargetChangeState(\n        change.targetChange.targetChangeType || 'NO_CHANGE'\n      );\n      const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n      const resumeToken = this.fromBytes(change.targetChange.resumeToken);\n      const causeProto = change.targetChange!.cause;\n      const cause = causeProto && this.fromRpcStatus(causeProto);\n      watchChange = new WatchTargetChange(\n        state,\n        targetIds,\n        resumeToken,\n        cause || null\n      );\n    } else if ('documentChange' in change) {\n      assertPresent(change.documentChange, 'documentChange');\n      const entityChange = change.documentChange;\n      assertPresent(entityChange.document, 'documentChange.name');\n      assertPresent(entityChange.document.name, 'documentChange.document.name');\n      assertPresent(\n        entityChange.document.updateTime,\n        'documentChange.document.updateTime'\n      );\n      const key = this.fromName(entityChange.document.name);\n      const version = this.fromVersion(entityChange.document.updateTime);\n      const data = new ObjectValue({\n        mapValue: { fields: entityChange.document.fields }\n      });\n      const doc = new Document(key, version, data, {});\n      const updatedTargetIds = entityChange.targetIds || [];\n      const removedTargetIds = entityChange.removedTargetIds || [];\n      watchChange = new DocumentWatchChange(\n        updatedTargetIds,\n        removedTargetIds,\n        doc.key,\n        doc\n      );\n    } else if ('documentDelete' in change) {\n      assertPresent(change.documentDelete, 'documentDelete');\n      const docDelete = change.documentDelete;\n      assertPresent(docDelete.document, 'documentDelete.document');\n      const key = this.fromName(docDelete.document);\n      const version = docDelete.readTime\n        ? this.fromVersion(docDelete.readTime)\n        : SnapshotVersion.forDeletedDoc();\n      const doc = new NoDocument(key, version);\n      const removedTargetIds = docDelete.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n    } else if ('documentRemove' in change) {\n      assertPresent(change.documentRemove, 'documentRemove');\n      const docRemove = change.documentRemove;\n      assertPresent(docRemove.document, 'documentRemove');\n      const key = this.fromName(docRemove.document);\n      const removedTargetIds = docRemove.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n    } else if ('filter' in change) {\n      // TODO(dimond): implement existence filter parsing with strategy.\n      assertPresent(change.filter, 'filter');\n      const filter = change.filter;\n      assertPresent(filter.targetId, 'filter.targetId');\n      const count = filter.count || 0;\n      const existenceFilter = new ExistenceFilter(count);\n      const targetId = filter.targetId;\n      watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n    } else {\n      return fail('Unknown change type ' + JSON.stringify(change));\n    }\n    return watchChange;\n  }\n\n  fromWatchTargetChangeState(\n    state: api.TargetChangeTargetChangeType\n  ): WatchTargetChangeState {\n    if (state === 'NO_CHANGE') {\n      return WatchTargetChangeState.NoChange;\n    } else if (state === 'ADD') {\n      return WatchTargetChangeState.Added;\n    } else if (state === 'REMOVE') {\n      return WatchTargetChangeState.Removed;\n    } else if (state === 'CURRENT') {\n      return WatchTargetChangeState.Current;\n    } else if (state === 'RESET') {\n      return WatchTargetChangeState.Reset;\n    } else {\n      return fail('Got unexpected TargetChange.state: ' + state);\n    }\n  }\n\n  versionFromListenResponse(change: api.ListenResponse): SnapshotVersion {\n    // We have only reached a consistent snapshot for the entire stream if there\n    // is a read_time set and it applies to all targets (i.e. the list of\n    // targets is empty). The backend is guaranteed to send such responses.\n    if (!('targetChange' in change)) {\n      return SnapshotVersion.MIN;\n    }\n    const targetChange = change.targetChange!;\n    if (targetChange.targetIds && targetChange.targetIds.length) {\n      return SnapshotVersion.MIN;\n    }\n    if (!targetChange.readTime) {\n      return SnapshotVersion.MIN;\n    }\n    return this.fromVersion(targetChange.readTime);\n  }\n\n  toMutation(mutation: Mutation): api.Write {\n    let result: api.Write;\n    if (mutation instanceof SetMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.value)\n      };\n    } else if (mutation instanceof DeleteMutation) {\n      result = { delete: this.toName(mutation.key) };\n    } else if (mutation instanceof PatchMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.data),\n        updateMask: this.toDocumentMask(mutation.fieldMask)\n      };\n    } else if (mutation instanceof TransformMutation) {\n      result = {\n        transform: {\n          document: this.toName(mutation.key),\n          fieldTransforms: mutation.fieldTransforms.map(transform =>\n            this.toFieldTransform(transform)\n          )\n        }\n      };\n    } else if (mutation instanceof VerifyMutation) {\n      result = {\n        verify: this.toName(mutation.key)\n      };\n    } else {\n      return fail('Unknown mutation type ' + mutation.type);\n    }\n\n    if (!mutation.precondition.isNone) {\n      result.currentDocument = this.toPrecondition(mutation.precondition);\n    }\n\n    return result;\n  }\n\n  fromMutation(proto: api.Write): Mutation {\n    const precondition = proto.currentDocument\n      ? this.fromPrecondition(proto.currentDocument)\n      : Precondition.NONE;\n\n    if (proto.update) {\n      assertPresent(proto.update.name, 'name');\n      const key = this.fromName(proto.update.name);\n      const value = new ObjectValue({\n        mapValue: { fields: proto.update.fields }\n      });\n      if (proto.updateMask) {\n        const fieldMask = this.fromDocumentMask(proto.updateMask);\n        return new PatchMutation(key, value, fieldMask, precondition);\n      } else {\n        return new SetMutation(key, value, precondition);\n      }\n    } else if (proto.delete) {\n      const key = this.fromName(proto.delete);\n      return new DeleteMutation(key, precondition);\n    } else if (proto.transform) {\n      const key = this.fromName(proto.transform.document!);\n      const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n        this.fromFieldTransform(transform)\n      );\n      hardAssert(\n        precondition.exists === true,\n        'Transforms only support precondition \"exists == true\"'\n      );\n      return new TransformMutation(key, fieldTransforms);\n    } else if (proto.verify) {\n      const key = this.fromName(proto.verify);\n      return new VerifyMutation(key, precondition);\n    } else {\n      return fail('unknown mutation proto: ' + JSON.stringify(proto));\n    }\n  }\n\n  private toPrecondition(precondition: Precondition): api.Precondition {\n    debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n    if (precondition.updateTime !== undefined) {\n      return {\n        updateTime: this.toVersion(precondition.updateTime)\n      };\n    } else if (precondition.exists !== undefined) {\n      return { exists: precondition.exists };\n    } else {\n      return fail('Unknown precondition');\n    }\n  }\n\n  private fromPrecondition(precondition: api.Precondition): Precondition {\n    if (precondition.updateTime !== undefined) {\n      return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n    } else if (precondition.exists !== undefined) {\n      return Precondition.exists(precondition.exists);\n    } else {\n      return Precondition.NONE;\n    }\n  }\n\n  private fromWriteResult(\n    proto: api.WriteResult,\n    commitTime: api.Timestamp\n  ): MutationResult {\n    // NOTE: Deletes don't have an updateTime.\n    let version = proto.updateTime\n      ? this.fromVersion(proto.updateTime)\n      : this.fromVersion(commitTime);\n\n    if (version.isEqual(SnapshotVersion.MIN)) {\n      // The Firestore Emulator currently returns an update time of 0 for\n      // deletes of non-existing documents (rather than null). This breaks the\n      // test \"get deleted doc while offline with source=cache\" as NoDocuments\n      // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n      // TODO(#2149): Remove this when Emulator is fixed\n      version = this.fromVersion(commitTime);\n    }\n\n    let transformResults: api.Value[] | null = null;\n    if (proto.transformResults && proto.transformResults.length > 0) {\n      transformResults = proto.transformResults;\n    }\n    return new MutationResult(version, transformResults);\n  }\n\n  fromWriteResults(\n    protos: api.WriteResult[] | undefined,\n    commitTime?: api.Timestamp\n  ): MutationResult[] {\n    if (protos && protos.length > 0) {\n      hardAssert(\n        commitTime !== undefined,\n        'Received a write result without a commit time'\n      );\n      return protos.map(proto => this.fromWriteResult(proto, commitTime));\n    } else {\n      return [];\n    }\n  }\n\n  private toFieldTransform(fieldTransform: FieldTransform): api.FieldTransform {\n    const transform = fieldTransform.transform;\n    if (transform instanceof ServerTimestampTransform) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        setToServerValue: 'REQUEST_TIME'\n      };\n    } else if (transform instanceof ArrayUnionTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        appendMissingElements: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof ArrayRemoveTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        removeAllFromArray: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof NumericIncrementTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        increment: transform.operand\n      };\n    } else {\n      throw fail('Unknown transform: ' + fieldTransform.transform);\n    }\n  }\n\n  private fromFieldTransform(proto: api.FieldTransform): FieldTransform {\n    let transform: TransformOperation | null = null;\n    if ('setToServerValue' in proto) {\n      hardAssert(\n        proto.setToServerValue === 'REQUEST_TIME',\n        'Unknown server value transform proto: ' + JSON.stringify(proto)\n      );\n      transform = ServerTimestampTransform.instance;\n    } else if ('appendMissingElements' in proto) {\n      const values = proto.appendMissingElements!.values || [];\n      transform = new ArrayUnionTransformOperation(values);\n    } else if ('removeAllFromArray' in proto) {\n      const values = proto.removeAllFromArray!.values || [];\n      transform = new ArrayRemoveTransformOperation(values);\n    } else if ('increment' in proto) {\n      transform = new NumericIncrementTransformOperation(\n        this,\n        proto.increment!\n      );\n    } else {\n      fail('Unknown transform proto: ' + JSON.stringify(proto));\n    }\n    const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n    return new FieldTransform(fieldPath, transform!);\n  }\n\n  toDocumentsTarget(target: Target): api.DocumentsTarget {\n    return { documents: [this.toQueryPath(target.path)] };\n  }\n\n  fromDocumentsTarget(documentsTarget: api.DocumentsTarget): Target {\n    const count = documentsTarget.documents!.length;\n    hardAssert(\n      count === 1,\n      'DocumentsTarget contained other than 1 document: ' + count\n    );\n    const name = documentsTarget.documents![0];\n    return Query.atPath(this.fromQueryPath(name)).toTarget();\n  }\n\n  toQueryTarget(target: Target): api.QueryTarget {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const result: api.QueryTarget = { structuredQuery: {} };\n    const path = target.path;\n    if (target.collectionGroup !== null) {\n      debugAssert(\n        path.length % 2 === 0,\n        'Collection Group queries should be within a document path or root.'\n      );\n      result.parent = this.toQueryPath(path);\n      result.structuredQuery!.from = [\n        {\n          collectionId: target.collectionGroup,\n          allDescendants: true\n        }\n      ];\n    } else {\n      debugAssert(\n        path.length % 2 !== 0,\n        'Document queries with filters are not supported.'\n      );\n      result.parent = this.toQueryPath(path.popLast());\n      result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n    }\n\n    const where = this.toFilter(target.filters);\n    if (where) {\n      result.structuredQuery!.where = where;\n    }\n\n    const orderBy = this.toOrder(target.orderBy);\n    if (orderBy) {\n      result.structuredQuery!.orderBy = orderBy;\n    }\n\n    const limit = this.toInt32Proto(target.limit);\n    if (limit !== null) {\n      result.structuredQuery!.limit = limit;\n    }\n\n    if (target.startAt) {\n      result.structuredQuery!.startAt = this.toCursor(target.startAt);\n    }\n    if (target.endAt) {\n      result.structuredQuery!.endAt = this.toCursor(target.endAt);\n    }\n\n    return result;\n  }\n\n  fromQueryTarget(target: api.QueryTarget): Target {\n    let path = this.fromQueryPath(target.parent!);\n\n    const query = target.structuredQuery!;\n    const fromCount = query.from ? query.from.length : 0;\n    let collectionGroup: string | null = null;\n    if (fromCount > 0) {\n      hardAssert(\n        fromCount === 1,\n        'StructuredQuery.from with more than one collection is not supported.'\n      );\n      const from = query.from![0];\n      if (from.allDescendants) {\n        collectionGroup = from.collectionId!;\n      } else {\n        path = path.child(from.collectionId!);\n      }\n    }\n\n    let filterBy: Filter[] = [];\n    if (query.where) {\n      filterBy = this.fromFilter(query.where);\n    }\n\n    let orderBy: OrderBy[] = [];\n    if (query.orderBy) {\n      orderBy = this.fromOrder(query.orderBy);\n    }\n\n    let limit: number | null = null;\n    if (query.limit) {\n      limit = this.fromInt32Proto(query.limit);\n    }\n\n    let startAt: Bound | null = null;\n    if (query.startAt) {\n      startAt = this.fromCursor(query.startAt);\n    }\n\n    let endAt: Bound | null = null;\n    if (query.endAt) {\n      endAt = this.fromCursor(query.endAt);\n    }\n\n    return new Query(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    ).toTarget();\n  }\n\n  toListenRequestLabels(\n    targetData: TargetData\n  ): api.ApiClientObjectMap<string> | null {\n    const value = this.toLabel(targetData.purpose);\n    if (value == null) {\n      return null;\n    } else {\n      return {\n        'goog-listen-tags': value\n      };\n    }\n  }\n\n  private toLabel(purpose: TargetPurpose): string | null {\n    switch (purpose) {\n      case TargetPurpose.Listen:\n        return null;\n      case TargetPurpose.ExistenceFilterMismatch:\n        return 'existence-filter-mismatch';\n      case TargetPurpose.LimboResolution:\n        return 'limbo-document';\n      default:\n        return fail('Unrecognized query purpose: ' + purpose);\n    }\n  }\n\n  toTarget(targetData: TargetData): api.Target {\n    let result: api.Target;\n    const target = targetData.target;\n\n    if (target.isDocumentQuery()) {\n      result = { documents: this.toDocumentsTarget(target) };\n    } else {\n      result = { query: this.toQueryTarget(target) };\n    }\n\n    result.targetId = targetData.targetId;\n\n    if (targetData.resumeToken.approximateByteSize() > 0) {\n      result.resumeToken = this.toBytes(targetData.resumeToken);\n    }\n\n    return result;\n  }\n\n  private toFilter(filters: Filter[]): api.Filter | undefined {\n    if (filters.length === 0) {\n      return;\n    }\n    const protos = filters.map(filter => {\n      if (filter instanceof FieldFilter) {\n        return this.toUnaryOrFieldFilter(filter);\n      } else {\n        return fail('Unrecognized filter: ' + JSON.stringify(filter));\n      }\n    });\n    if (protos.length === 1) {\n      return protos[0];\n    }\n    return { compositeFilter: { op: 'AND', filters: protos } };\n  }\n\n  private fromFilter(filter: api.Filter | undefined): Filter[] {\n    if (!filter) {\n      return [];\n    } else if (filter.unaryFilter !== undefined) {\n      return [this.fromUnaryFilter(filter)];\n    } else if (filter.fieldFilter !== undefined) {\n      return [this.fromFieldFilter(filter)];\n    } else if (filter.compositeFilter !== undefined) {\n      return filter.compositeFilter\n        .filters!.map(f => this.fromFilter(f))\n        .reduce((accum, current) => accum.concat(current));\n    } else {\n      return fail('Unknown filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  private toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n    if (orderBys.length === 0) {\n      return;\n    }\n    return orderBys.map(order => this.toPropertyOrder(order));\n  }\n\n  private fromOrder(orderBys: api.Order[]): OrderBy[] {\n    return orderBys.map(order => this.fromPropertyOrder(order));\n  }\n\n  private toCursor(cursor: Bound): api.Cursor {\n    return {\n      before: cursor.before,\n      values: cursor.position\n    };\n  }\n\n  private fromCursor(cursor: api.Cursor): Bound {\n    const before = !!cursor.before;\n    const position = cursor.values || [];\n    return new Bound(position, before);\n  }\n\n  // visible for testing\n  toDirection(dir: Direction): api.OrderDirection {\n    return DIRECTIONS[dir.name];\n  }\n\n  // visible for testing\n  fromDirection(dir: api.OrderDirection | undefined): Direction | undefined {\n    switch (dir) {\n      case 'ASCENDING':\n        return Direction.ASCENDING;\n      case 'DESCENDING':\n        return Direction.DESCENDING;\n      default:\n        return undefined;\n    }\n  }\n\n  // visible for testing\n  toOperatorName(op: Operator): api.FieldFilterOp {\n    return OPERATORS[op.name];\n  }\n\n  fromOperatorName(op: api.FieldFilterOp): Operator {\n    switch (op) {\n      case 'EQUAL':\n        return Operator.EQUAL;\n      case 'GREATER_THAN':\n        return Operator.GREATER_THAN;\n      case 'GREATER_THAN_OR_EQUAL':\n        return Operator.GREATER_THAN_OR_EQUAL;\n      case 'LESS_THAN':\n        return Operator.LESS_THAN;\n      case 'LESS_THAN_OR_EQUAL':\n        return Operator.LESS_THAN_OR_EQUAL;\n      case 'ARRAY_CONTAINS':\n        return Operator.ARRAY_CONTAINS;\n      case 'IN':\n        return Operator.IN;\n      case 'ARRAY_CONTAINS_ANY':\n        return Operator.ARRAY_CONTAINS_ANY;\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified operator');\n      default:\n        return fail('Unknown operator');\n    }\n  }\n\n  toFieldPathReference(path: FieldPath): api.FieldReference {\n    return { fieldPath: path.canonicalString() };\n  }\n\n  fromFieldPathReference(fieldReference: api.FieldReference): FieldPath {\n    return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n  }\n\n  // visible for testing\n  toPropertyOrder(orderBy: OrderBy): api.Order {\n    return {\n      field: this.toFieldPathReference(orderBy.field),\n      direction: this.toDirection(orderBy.dir)\n    };\n  }\n\n  fromPropertyOrder(orderBy: api.Order): OrderBy {\n    return new OrderBy(\n      this.fromFieldPathReference(orderBy.field!),\n      this.fromDirection(orderBy.direction)\n    );\n  }\n\n  fromFieldFilter(filter: api.Filter): Filter {\n    return FieldFilter.create(\n      this.fromFieldPathReference(filter.fieldFilter!.field!),\n      this.fromOperatorName(filter.fieldFilter!.op!),\n      filter.fieldFilter!.value!\n    );\n  }\n\n  // visible for testing\n  toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n    if (filter.op === Operator.EQUAL) {\n      if (isNanValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NAN'\n          }\n        };\n      } else if (isNullValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NULL'\n          }\n        };\n      }\n    }\n    return {\n      fieldFilter: {\n        field: this.toFieldPathReference(filter.field),\n        op: this.toOperatorName(filter.op),\n        value: filter.value\n      }\n    };\n  }\n\n  fromUnaryFilter(filter: api.Filter): Filter {\n    switch (filter.unaryFilter!.op!) {\n      case 'IS_NAN':\n        const nanField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nanField, Operator.EQUAL, {\n          doubleValue: NaN\n        });\n      case 'IS_NULL':\n        const nullField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nullField, Operator.EQUAL, {\n          nullValue: 'NULL_VALUE'\n        });\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified filter');\n      default:\n        return fail('Unknown filter');\n    }\n  }\n\n  toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n    const canonicalFields: string[] = [];\n    fieldMask.fields.forEach(field =>\n      canonicalFields.push(field.canonicalString())\n    );\n    return {\n      fieldPaths: canonicalFields\n    };\n  }\n\n  fromDocumentMask(proto: api.DocumentMask): FieldMask {\n    const paths = proto.fieldPaths || [];\n    const fields = paths.map(path => FieldPath.fromServerFormat(path));\n    return FieldMask.fromArray(fields);\n  }\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\n\n/**\n * Provides a common interface to load anything platform dependent, e.g.\n * the connection implementation.\n *\n * An implementation of this must be provided at compile time for the platform.\n */\n// TODO: Consider only exposing the APIs of 'document' and 'window' that we\n// use in our client.\nexport interface Platform {\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection>;\n  newConnectivityMonitor(): ConnectivityMonitor;\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer;\n\n  /** Formats an object as a JSON string, suitable for logging. */\n  formatJSON(value: unknown): string;\n\n  /** Converts a Base64 encoded string to a binary string. */\n  atob(encoded: string): string;\n\n  /** Converts a binary string to a Base64 encoded string. */\n  btoa(raw: string): string;\n\n  /** The Platform's 'window' implementation or null if not available. */\n  readonly window: Window | null;\n\n  /** The Platform's 'document' implementation or null if not available. */\n  readonly document: Document | null;\n\n  /** True if and only if the Base64 conversion functions are available. */\n  readonly base64Available: boolean;\n}\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nexport class PlatformSupport {\n  private static platform: Platform;\n  static setPlatform(platform: Platform): void {\n    if (PlatformSupport.platform) {\n      fail('Platform already defined');\n    }\n    PlatformSupport.platform = platform;\n  }\n\n  static getPlatform(): Platform {\n    if (!PlatformSupport.platform) {\n      fail('Platform not set');\n    }\n    return PlatformSupport.platform;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    for (let i = 0; i < 20; i++) {\n      autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    debugAssert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Equatable } from './misc';\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType extends Equatable<KeyType>, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(private mapKeyFn: (key: KeyType) => string) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (otherKey.isEqual(key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport { ByteString } from '../util/byte_string';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { Mutation, MutationResult } from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) => l.isEqual(r)) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        l.isEqual(r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    readonly streamToken: ByteString,\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[],\n    streamToken: ByteString\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(\n      batch,\n      commitVersion,\n      results,\n      streamToken,\n      versionMap\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.MIN, return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (query.isDocumentQuery()) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (query.isCollectionGroupQuery()) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = query.asCollectionQueryAtPath(\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = mutation.applyToLocalView(\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!query.matches(doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport interface CancelablePromise<T> {\n  // We are not extending Promise, since Node's Promise API require us to\n  // implement 'finally', which is not fully supported on Web.\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2>;\n  catch<TResult = never>(\n    onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<T | TResult>;\n  cancel(): void;\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\nimport { CancelablePromise } from '../util/promise';\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: CancelablePromise<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { CancelablePromise, Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { PlatformSupport } from '../platform/platform';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n */\nclass DelayedOperation<T extends unknown> implements CancelablePromise<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  // Promise implementation.\n  readonly [Symbol.toStringTag]: 'Promise';\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n  catch = this.deferred.promise.catch.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // The last retryable operation. Retryable operation are run in order and\n  // retried with backoff.\n  private retryableTail: Promise<void> = Promise.resolve();\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.runDelayedOperationsEarly(TimerId.AsyncQueueRetry);\n  };\n\n  constructor() {\n    const window = PlatformSupport.getPlatform().window;\n    if (window) {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = PlatformSupport.getPlatform().window;\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.verifyNotFailed();\n\n    if (this._isShuttingDown) {\n      return;\n    }\n\n    this.retryableTail = this.retryableTail.then(() => {\n      const deferred = new Deferred<void>();\n      const retryingOp = async (): Promise<void> => {\n        try {\n          await op();\n          deferred.resolve();\n          this.backoff.reset();\n        } catch (e) {\n          if (e.name === 'IndexedDbTransactionError') {\n            logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n            this.backoff.backoffAndRun(retryingOp);\n          } else {\n            deferred.resolve();\n            throw e; // Failure will be handled by AsyncQueue\n          }\n        }\n      };\n      this.enqueueAndForget(retryingOp);\n      return deferred.promise;\n    });\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = error.stack || error.message || '';\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel\n   * the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): CancelablePromise<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail(\n        'AsyncQueue is already failed: ' +\n          (this.failure.stack || this.failure.message)\n      );\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Throws if no such operation exists. Pass TimerId.All to run\n   *  all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runDelayedOperationsEarly(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { CancelablePromise } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport class LruParams {\n  static readonly COLLECTION_DISABLED = -1;\n  static readonly MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n  static readonly DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LruParams.DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LruParams.COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: CancelablePromise<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LruParams.COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        return localStore\n          .collectGarbage(this.garbageCollector)\n          .then(() => this.scheduleGC(localStore))\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (\n      this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED\n    ) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, PatchMutation, Precondition } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { ByteString } from '../util/byte_string';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\n\nconst LOG_TAG = 'LocalStore';\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nexport class LocalStore {\n  /**\n   * The maximum time to leave a resume token buffered without writing it out.\n   * This value is arbitrary: it's long enough to avoid several writes\n   * (possibly indefinitely if updates come more frequently than this) but\n   * short enough that restarting after crashing will still have a pretty\n   * recent resume token.\n   */\n  private static readonly RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  protected mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  protected remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  protected localDocuments: LocalDocumentsView;\n\n  /**\n   * The set of document references maintained by any local views.\n   */\n  private localViewReferences = new ReferenceSet();\n\n  /** Maps a target to its `TargetData`. */\n  protected targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  protected targetDataByTarget = new SortedMap<TargetId, TargetData>(\n    primitiveComparator\n  );\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  private targetIdByTarget = new ObjectMap<Target, TargetId>(t =>\n    t.canonicalId()\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  protected lastDocumentChangeReadTime = SnapshotVersion.MIN;\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    protected persistence: Persistence,\n    private queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.persistence.referenceDelegate.setInMemoryPins(\n      this.localViewReferences\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Tells the LocalStore that the currently authenticated user has changed.\n   *\n   * In response the local store switches the mutation queue to the new user and\n   * returns any resulting document changes.\n   */\n  // PORTING NOTE: Android and iOS only return the documents affected by the\n  // change.\n  async handleUserChange(user: User): Promise<UserChangeResult> {\n    let newMutationQueue = this.mutationQueue;\n    let newLocalDocuments = this.localDocuments;\n\n    const result = await this.persistence.runTransaction(\n      'Handle user change',\n      'readonly',\n      txn => {\n        // Swap out the mutation queue, grabbing the pending mutation batches\n        // before and after.\n        let oldBatches: MutationBatch[];\n        return this.mutationQueue\n          .getAllMutationBatches(txn)\n          .next(promisedOldBatches => {\n            oldBatches = promisedOldBatches;\n\n            newMutationQueue = this.persistence.getMutationQueue(user);\n\n            // Recreate our LocalDocumentsView using the new\n            // MutationQueue.\n            newLocalDocuments = new LocalDocumentsView(\n              this.remoteDocuments,\n              newMutationQueue,\n              this.persistence.getIndexManager()\n            );\n            return newMutationQueue.getAllMutationBatches(txn);\n          })\n          .next(newBatches => {\n            const removedBatchIds: BatchId[] = [];\n            const addedBatchIds: BatchId[] = [];\n\n            // Union the old/new changed keys.\n            let changedKeys = documentKeySet();\n\n            for (const batch of oldBatches) {\n              removedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            for (const batch of newBatches) {\n              addedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            // Return the set of all (potentially) changed documents and the list\n            // of mutation batch IDs that were affected by change.\n            return newLocalDocuments\n              .getDocuments(txn, changedKeys)\n              .next(affectedDocuments => {\n                return {\n                  affectedDocuments,\n                  removedBatchIds,\n                  addedBatchIds\n                };\n              });\n          });\n      }\n    );\n\n    this.mutationQueue = newMutationQueue;\n    this.localDocuments = newLocalDocuments;\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n\n    return result;\n  }\n\n  /* Accept locally generated Mutations and commit them to storage. */\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult> {\n    const localWriteTime = Timestamp.now();\n    const keys = mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n\n    let existingDocs: MaybeDocumentMap;\n\n    return this.persistence\n      .runTransaction('Locally write mutations', 'readwrite', txn => {\n        // Load and apply all existing mutations. This lets us compute the\n        // current base state for all non-idempotent transforms before applying\n        // any additional user-provided writes.\n        return this.localDocuments.getDocuments(txn, keys).next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = mutation.extractBaseValue(\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  baseValue.fieldMask(),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return this.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n      })\n      .then(batch => {\n        const changes = batch.applyToLocalDocumentSet(existingDocs);\n        return { batchId: batch.batchId, changes };\n      });\n  }\n\n  /**\n   * Acknowledge the given batch.\n   *\n   * On the happy path when a batch is acknowledged, the local store will\n   *\n   *  + remove the batch from the mutation queue;\n   *  + apply the changes to the remote document cache;\n   *  + recalculate the latency compensated view implied by those changes (there\n   *    may be mutations in the queue that affect the documents but haven't been\n   *    acknowledged yet); and\n   *  + give the changed documents back the sync engine\n   *\n   * @returns The resulting (modified) documents.\n   */\n  acknowledgeBatch(\n    batchResult: MutationBatchResult\n  ): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Acknowledge batch',\n      'readwrite-primary',\n      txn => {\n        const affected = batchResult.batch.keys();\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n        return this.mutationQueue\n          .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n          .next(() =>\n            this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer)\n          )\n          .next(() => documentBuffer.apply(txn))\n          .next(() => this.mutationQueue.performConsistencyCheck(txn))\n          .next(() => this.localDocuments.getDocuments(txn, affected));\n      }\n    );\n  }\n\n  /**\n   * Remove mutations from the MutationQueue for the specified batch;\n   * LocalDocuments will be recalculated.\n   *\n   * @returns The resulting modified documents.\n   */\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Reject batch',\n      'readwrite-primary',\n      txn => {\n        let affectedKeys: DocumentKeySet;\n        return this.mutationQueue\n          .lookupMutationBatch(txn, batchId)\n          .next((batch: MutationBatch | null) => {\n            hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n            affectedKeys = batch.keys();\n            return this.mutationQueue.removeMutationBatch(txn, batch);\n          })\n          .next(() => {\n            return this.mutationQueue.performConsistencyCheck(txn);\n          })\n          .next(() => {\n            return this.localDocuments.getDocuments(txn, affectedKeys);\n          });\n      }\n    );\n  }\n\n  /**\n   * Returns the largest (latest) batch id in mutation queue that is pending server response.\n   * Returns `BATCHID_UNKNOWN` if the queue is empty.\n   */\n  getHighestUnacknowledgedBatchId(): Promise<BatchId> {\n    return this.persistence.runTransaction(\n      'Get highest unacknowledged batch id',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n      }\n    );\n  }\n\n  /** Returns the last recorded stream token for the current user. */\n  getLastStreamToken(): Promise<ByteString> {\n    return this.persistence.runTransaction(\n      'Get last stream token',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getLastStreamToken(txn);\n      }\n    );\n  }\n\n  /**\n   * Sets the stream token for the current user without acknowledging any\n   * mutation batch. This is usually only useful after a stream handshake or in\n   * response to an error that requires clearing the stream token.\n   */\n  setLastStreamToken(streamToken: ByteString): Promise<void> {\n    return this.persistence.runTransaction(\n      'Set last stream token',\n      'readwrite-primary',\n      txn => {\n        return this.mutationQueue.setLastStreamToken(txn, streamToken);\n      }\n    );\n  }\n\n  /**\n   * Returns the last consistent snapshot processed (used by the RemoteStore to\n   * determine whether to buffer incoming snapshots from the backend).\n   */\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion> {\n    return this.persistence.runTransaction(\n      'Get last remote snapshot version',\n      'readonly',\n      txn => this.targetCache.getLastRemoteSnapshotVersion(txn)\n    );\n  }\n\n  /**\n   * Update the \"ground-state\" (remote) documents. We assume that the remote\n   * event reflects any write batches that have been acknowledged or rejected\n   * (i.e. we do not re-apply local mutations to updates from this event).\n   *\n   * LocalDocuments are re-calculated if there are remaining mutations in the\n   * queue.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap> {\n    const remoteVersion = remoteEvent.snapshotVersion;\n    let newTargetDataByTargetMap = this.targetDataByTarget;\n\n    return this.persistence\n      .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n        newTargetDataByTargetMap = this.targetDataByTarget;\n\n        const promises = [] as Array<PersistencePromise<void>>;\n        remoteEvent.targetChanges.forEach((change, targetId) => {\n          const oldTargetData = newTargetDataByTargetMap.get(targetId);\n          if (!oldTargetData) {\n            return;\n          }\n\n          // Only update the remote keys if the target is still active. This\n          // ensures that we can persist the updated target data along with\n          // the updated assignment.\n          promises.push(\n            this.targetCache\n              .removeMatchingKeys(txn, change.removedDocuments, targetId)\n              .next(() => {\n                return this.targetCache.addMatchingKeys(\n                  txn,\n                  change.addedDocuments,\n                  targetId\n                );\n              })\n          );\n\n          const resumeToken = change.resumeToken;\n          // Update the resume token if the change includes one.\n          if (resumeToken.approximateByteSize() > 0) {\n            const newTargetData = oldTargetData\n              .withResumeToken(resumeToken, remoteVersion)\n              .withSequenceNumber(txn.currentSequenceNumber);\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n              targetId,\n              newTargetData\n            );\n\n            // Update the target data if there are target changes (or if\n            // sufficient time has passed since the last update).\n            if (\n              LocalStore.shouldPersistTargetData(\n                oldTargetData,\n                newTargetData,\n                change\n              )\n            ) {\n              promises.push(\n                this.targetCache.updateTargetData(txn, newTargetData)\n              );\n            }\n          }\n        });\n\n        let changedDocs = maybeDocumentMap();\n        let updatedKeys = documentKeySet();\n        remoteEvent.documentUpdates.forEach((key, doc) => {\n          updatedKeys = updatedKeys.add(key);\n        });\n\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n        // documents in advance in a single call.\n        promises.push(\n          documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n            remoteEvent.documentUpdates.forEach((key, doc) => {\n              const existingDoc = existingDocs.get(key);\n\n              // Note: The order of the steps below is important, since we want\n              // to ensure that rejected limbo resolutions (which fabricate\n              // NoDocuments with SnapshotVersion.MIN) never add documents to\n              // cache.\n              if (\n                doc instanceof NoDocument &&\n                doc.version.isEqual(SnapshotVersion.MIN)\n              ) {\n                // NoDocuments with SnapshotVersion.MIN are used in manufactured\n                // events. We remove these documents from cache since we lost\n                // access.\n                documentBuffer.removeEntry(key, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else if (\n                existingDoc == null ||\n                doc.version.compareTo(existingDoc.version) > 0 ||\n                (doc.version.compareTo(existingDoc.version) === 0 &&\n                  existingDoc.hasPendingWrites)\n              ) {\n                debugAssert(\n                  !SnapshotVersion.MIN.isEqual(remoteVersion),\n                  'Cannot add a document when the remote version is zero'\n                );\n                documentBuffer.addEntry(doc, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else {\n                logDebug(\n                  LOG_TAG,\n                  'Ignoring outdated watch update for ',\n                  key,\n                  '. Current version:',\n                  existingDoc.version,\n                  ' Watch version:',\n                  doc.version\n                );\n              }\n\n              if (remoteEvent.resolvedLimboDocuments.has(key)) {\n                promises.push(\n                  this.persistence.referenceDelegate.updateLimboDocument(\n                    txn,\n                    key\n                  )\n                );\n              }\n            });\n          })\n        );\n\n        // HACK: The only reason we allow a null snapshot version is so that we\n        // can synthesize remote events when we get permission denied errors while\n        // trying to resolve the state of a locally cached document that is in\n        // limbo.\n        if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {\n          const updateRemoteVersion = this.targetCache\n            .getLastRemoteSnapshotVersion(txn)\n            .next(lastRemoteSnapshotVersion => {\n              debugAssert(\n                remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n                'Watch stream reverted to previous snapshot?? ' +\n                  remoteVersion +\n                  ' < ' +\n                  lastRemoteSnapshotVersion\n              );\n              return this.targetCache.setTargetsMetadata(\n                txn,\n                txn.currentSequenceNumber,\n                remoteVersion\n              );\n            });\n          promises.push(updateRemoteVersion);\n        }\n\n        return PersistencePromise.waitFor(promises)\n          .next(() => documentBuffer.apply(txn))\n          .next(() => {\n            return this.localDocuments.getLocalViewOfDocuments(\n              txn,\n              changedDocs\n            );\n          });\n      })\n      .then(changedDocs => {\n        this.targetDataByTarget = newTargetDataByTargetMap;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Returns true if the newTargetData should be persisted during an update of\n   * an active target. TargetData should always be persisted when a target is\n   * being released and should not call this function.\n   *\n   * While the target is active, TargetData updates can be omitted when nothing\n   * about the target has changed except metadata like the resume token or\n   * snapshot version. Occasionally it's worth the extra write to prevent these\n   * values from getting too stale after a crash, but this doesn't have to be\n   * too frequent.\n   */\n  private static shouldPersistTargetData(\n    oldTargetData: TargetData,\n    newTargetData: TargetData,\n    change: TargetChange\n  ): boolean {\n    hardAssert(\n      newTargetData.resumeToken.approximateByteSize() > 0,\n      'Attempted to persist target data with no resume token'\n    );\n\n    // Always persist target data if we don't already have a resume token.\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n      return true;\n    }\n\n    // Don't allow resume token changes to be buffered indefinitely. This\n    // allows us to be reasonably up-to-date after a crash and avoids needing\n    // to loop over all active queries on shutdown. Especially in the browser\n    // we may not get time to do anything interesting while the current tab is\n    // closing.\n    const timeDelta =\n      newTargetData.snapshotVersion.toMicroseconds() -\n      oldTargetData.snapshotVersion.toMicroseconds();\n    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) {\n      return true;\n    }\n\n    // Otherwise if the only thing that has changed about a target is its resume\n    // token it's not worth persisting. Note that the RemoteStore keeps an\n    // in-memory view of the currently active targets which includes the current\n    // resume token, so stream failure or user changes will still use an\n    // up-to-date resume token regardless of what we do here.\n    const changes =\n      change.addedDocuments.size +\n      change.modifiedDocuments.size +\n      change.removedDocuments.size;\n    return changes > 0;\n  }\n\n  /**\n   * Notify local store of the changed views to locally pin documents.\n   */\n  notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void> {\n    for (const viewChange of viewChanges) {\n      const targetId = viewChange.targetId;\n\n      this.localViewReferences.addReferences(viewChange.addedKeys, targetId);\n      this.localViewReferences.removeReferences(\n        viewChange.removedKeys,\n        targetId\n      );\n\n      if (!viewChange.fromCache) {\n        const targetData = this.targetDataByTarget.get(targetId);\n        debugAssert(\n          targetData !== null,\n          `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n        );\n\n        // Advance the last limbo free snapshot version\n        const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n        const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n          lastLimboFreeSnapshotVersion\n        );\n        this.targetDataByTarget = this.targetDataByTarget.insert(\n          targetId,\n          updatedTargetData\n        );\n      }\n    }\n    return this.persistence.runTransaction(\n      'notifyLocalViewChanges',\n      'readwrite',\n      txn => {\n        return PersistencePromise.forEach(\n          viewChanges,\n          (viewChange: LocalViewChanges) => {\n            return PersistencePromise.forEach(\n              viewChange.removedKeys,\n              (key: DocumentKey) =>\n                this.persistence.referenceDelegate.removeReference(txn, key)\n            );\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Gets the mutation batch after the passed in batchId in the mutation queue\n   * or null if empty.\n   * @param afterBatchId If provided, the batch to search after.\n   * @returns The next mutation or null if there wasn't one.\n   */\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null> {\n    return this.persistence.runTransaction(\n      'Get next mutation batch',\n      'readonly',\n      txn => {\n        if (afterBatchId === undefined) {\n          afterBatchId = BATCHID_UNKNOWN;\n        }\n        return this.mutationQueue.getNextMutationBatchAfterBatchId(\n          txn,\n          afterBatchId\n        );\n      }\n    );\n  }\n\n  /**\n   * Read the current value of a Document with a given key or null if not\n   * found - used for testing.\n   */\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null> {\n    return this.persistence.runTransaction('read document', 'readonly', txn => {\n      return this.localDocuments.getDocument(txn, key);\n    });\n  }\n\n  /**\n   * Assigns the given target an internal ID so that its results can be pinned so\n   * they don't get GC'd. A target must be allocated in the local store before\n   * the store can be used to manage its view.\n   *\n   * Allocating an already allocated `Target` will return the existing `TargetData`\n   * for that `Target`.\n   */\n  allocateTarget(target: Target): Promise<TargetData> {\n    return this.persistence\n      .runTransaction('Allocate target', 'readwrite', txn => {\n        let targetData: TargetData;\n        return this.targetCache\n          .getTargetData(txn, target)\n          .next((cached: TargetData | null) => {\n            if (cached) {\n              // This target has been listened to previously, so reuse the\n              // previous targetID.\n              // TODO(mcg): freshen last accessed date?\n              targetData = cached;\n              return PersistencePromise.resolve(targetData);\n            } else {\n              return this.targetCache.allocateTargetId(txn).next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return this.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n            }\n          });\n      })\n      .then(targetData => {\n        if (this.targetDataByTarget.get(targetData.targetId) === null) {\n          this.targetDataByTarget = this.targetDataByTarget.insert(\n            targetData.targetId,\n            targetData\n          );\n          this.targetIdByTarget.set(target, targetData.targetId);\n        }\n        return targetData;\n      });\n  }\n\n  /**\n   * Returns the TargetData as seen by the LocalStore, including updates that may\n   * have not yet been persisted to the TargetCache.\n   */\n  // Visible for testing.\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetId = this.targetIdByTarget.get(target);\n    if (targetId !== undefined) {\n      return PersistencePromise.resolve<TargetData | null>(\n        this.targetDataByTarget.get(targetId)\n      );\n    } else {\n      return this.targetCache.getTargetData(transaction, target);\n    }\n  }\n\n  /**\n   * Unpin all the documents associated with the given target. If\n   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n   * directly removes the associated target data from the target cache.\n   *\n   * Releasing a non-existing `Target` is a no-op.\n   */\n  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n  releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void> {\n    const targetData = this.targetDataByTarget.get(targetId);\n    debugAssert(\n      targetData !== null,\n      `Tried to release nonexistent target: ${targetId}`\n    );\n\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n    return this.persistence\n      .runTransaction('Release target', mode, txn => {\n        // References for documents sent via Watch are automatically removed\n        // when we delete a target's data from the reference delegate.\n        // Since this does not remove references for locally mutated documents,\n        // we have to remove the target associations for these documents\n        // manually.\n        // This operation needs to be run inside the transaction since EagerGC\n        // uses the local view references during the transaction's commit.\n        // Fortunately, the operation is safe to be re-run in case the\n        // transaction fails since there are no side effects if the target has\n        // already been removed.\n        const removed = this.localViewReferences.removeReferencesForId(\n          targetId\n        );\n\n        if (!keepPersistedTargetData) {\n          return PersistencePromise.forEach(removed, (key: DocumentKey) =>\n            this.persistence.referenceDelegate.removeReference(txn, key)\n          ).next(() => {\n            this.persistence.referenceDelegate.removeTarget(txn, targetData!);\n          });\n        } else {\n          return PersistencePromise.resolve();\n        }\n      })\n      .then(() => {\n        this.targetDataByTarget = this.targetDataByTarget.remove(targetId);\n        this.targetIdByTarget.delete(targetData!.target);\n      });\n  }\n\n  /**\n   * Runs the specified query against the local store and returns the results,\n   * potentially taking advantage of query data from previous executions (such\n   * as the set of remote keys).\n   *\n   * @param usePreviousResults Whether results from previous executions can\n   * be used to optimize this query execution.\n   */\n  executeQuery(\n    query: Query,\n    usePreviousResults: boolean\n  ): Promise<QueryResult> {\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.MIN;\n    let remoteKeys = documentKeySet();\n\n    return this.persistence.runTransaction('Execute query', 'readonly', txn => {\n      return this.getTargetData(txn, query.toTarget())\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return this.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          this.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.MIN,\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    });\n  }\n\n  /**\n   * Returns the keys of the documents that are associated with the given\n   * target id in the remote table.\n   */\n  remoteDocumentKeys(targetId: TargetId): Promise<DocumentKeySet> {\n    return this.persistence.runTransaction(\n      'Remote document keys',\n      'readonly',\n      txn => {\n        return this.targetCache.getMatchingKeysForTargetId(txn, targetId);\n      }\n    );\n  }\n\n  private applyWriteToRemoteDocuments(\n    txn: PersistenceTransaction,\n    batchResult: MutationBatchResult,\n    documentBuffer: RemoteDocumentChangeBuffer\n  ): PersistencePromise<void> {\n    const batch = batchResult.batch;\n    const docKeys = batch.keys();\n    let promiseChain = PersistencePromise.resolve();\n    docKeys.forEach(docKey => {\n      promiseChain = promiseChain\n        .next(() => {\n          return documentBuffer.getEntry(txn, docKey);\n        })\n        .next((remoteDoc: MaybeDocument | null) => {\n          let doc = remoteDoc;\n          const ackVersion = batchResult.docVersions.get(docKey);\n          hardAssert(\n            ackVersion !== null,\n            'ackVersions should contain every doc in the write.'\n          );\n          if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n            if (!doc) {\n              debugAssert(\n                !remoteDoc,\n                'Mutation batch ' +\n                  batch +\n                  ' applied to document ' +\n                  remoteDoc +\n                  ' resulted in null'\n              );\n            } else {\n              // We use the commitVersion as the readTime rather than the\n              // document's updateTime since the updateTime is not advanced\n              // for updates that do not modify the underlying document.\n              documentBuffer.addEntry(doc, batchResult.commitVersion);\n            }\n          }\n        });\n    });\n    return promiseChain.next(() =>\n      this.mutationQueue.removeMutationBatch(txn, batch)\n    );\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\n/**\n * An implementation of LocalStore that provides additional functionality\n * for MultiTabSyncEngine.\n */\n// PORTING NOTE: Web only.\nexport class MultiTabLocalStore extends LocalStore {\n  protected mutationQueue: IndexedDbMutationQueue;\n  protected remoteDocuments: IndexedDbRemoteDocumentCache;\n  protected targetCache: IndexedDbTargetCache;\n\n  constructor(\n    protected persistence: IndexedDbPersistence,\n    queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    super(persistence, queryEngine, initialUser);\n\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return this.synchronizeLastDocumentChangeReadTime();\n  }\n\n  /** Returns the local view of the documents affected by a mutation batch. */\n  lookupMutationDocuments(batchId: BatchId): Promise<MaybeDocumentMap | null> {\n    return this.persistence.runTransaction(\n      'Lookup mutation documents',\n      'readonly',\n      txn => {\n        return this.mutationQueue\n          .lookupMutationKeys(txn, batchId)\n          .next(keys => {\n            if (keys) {\n              return this.localDocuments.getDocuments(\n                txn,\n                keys\n              ) as PersistencePromise<MaybeDocumentMap | null>;\n            } else {\n              return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n            }\n          });\n      }\n    );\n  }\n\n  removeCachedMutationBatchMetadata(batchId: BatchId): void {\n    this.mutationQueue.removeCachedMutationKeys(batchId);\n  }\n\n  setNetworkEnabled(networkEnabled: boolean): void {\n    this.persistence.setNetworkEnabled(networkEnabled);\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.persistence.getActiveClients();\n  }\n\n  getTarget(targetId: TargetId): Promise<Target | null> {\n    const cachedTargetData = this.targetDataByTarget.get(targetId);\n\n    if (cachedTargetData) {\n      return Promise.resolve(cachedTargetData.target);\n    } else {\n      return this.persistence.runTransaction(\n        'Get target data',\n        'readonly',\n        txn => {\n          return this.targetCache\n            .getTargetDataForTarget(txn, targetId)\n            .next(targetData => (targetData ? targetData.target : null));\n        }\n      );\n    }\n  }\n\n  /**\n   * Returns the set of documents that have been updated since the last call.\n   * If this is the first call, returns the set of changes since client\n   * initialization. Further invocations will return document changes since\n   * the point of rejection.\n   */\n  getNewDocumentChanges(): Promise<MaybeDocumentMap> {\n    return this.persistence\n      .runTransaction('Get new document changes', 'readonly', txn =>\n        this.remoteDocuments.getNewDocumentChanges(\n          txn,\n          this.lastDocumentChangeReadTime\n        )\n      )\n      .then(({ changedDocs, readTime }) => {\n        this.lastDocumentChangeReadTime = readTime;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Reads the newest document change from persistence and forwards the internal\n   * synchronization marker so that calls to `getNewDocumentChanges()`\n   * only return changes that happened after client initialization.\n   */\n  async synchronizeLastDocumentChangeReadTime(): Promise<void> {\n    this.lastDocumentChangeReadTime = await this.persistence.runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => this.remoteDocuments.getLastReadTime(txn)\n    );\n  }\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /**\n   * Registers a ReferenceSet of documents that should be considered 'referenced' and not eligible\n   * for removal during garbage collection.\n   */\n  setInMemoryPins(pins: ReferenceSet): void;\n\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a document is no longer being mutated by the user. */\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Arugment to validate.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: string[],\n  position: number,\n  argument: unknown\n): void {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function \"${functionName}()\" requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from './error';\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate<T extends Function>(\n  cls: T,\n  optionalMessage?: string\n): T {\n  function PublicConstructor(): never {\n    let error = 'This constructor is private.';\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  }\n\n  // Make sure instanceof checks work and all methods are exposed on the public\n  // constructor\n  PublicConstructor.prototype = cls.prototype;\n\n  // Copy any static methods/members\n  Object.assign(PublicConstructor, cls);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return PublicConstructor as any;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\nexport const PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath implements firestore.FieldPath {\n  /** Internal representation of a Firestore field path. */\n  _internalPath: InternalFieldPath;\n\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { makeConstructorPrivate } from '../util/api';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\nexport abstract class FieldValueImpl implements firestore.FieldValue {\n  protected constructor(readonly _methodName: string) {}\n\n  static delete(): FieldValueImpl {\n    validateNoArgs('FieldValue.delete', arguments);\n    return DeleteFieldValueImpl.instance;\n  }\n\n  static serverTimestamp(): FieldValueImpl {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return ServerTimestampFieldValueImpl.instance;\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValueImpl {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we need access to the Firestore instance.\n    return new ArrayUnionFieldValueImpl(elements);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValueImpl {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we need access to the Firestore instance.\n    return new ArrayRemoveFieldValueImpl(elements);\n  }\n\n  static increment(n: number): FieldValueImpl {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new NumericIncrementFieldValueImpl(n);\n  }\n\n  isEqual(other: FieldValueImpl): boolean {\n    return this === other;\n  }\n}\n\nexport class DeleteFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super('FieldValue.delete');\n  }\n  /** Singleton instance. */\n  static instance = new DeleteFieldValueImpl();\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super('FieldValue.serverTimestamp');\n  }\n  /** Singleton instance. */\n  static instance = new ServerTimestampFieldValueImpl();\n}\n\nexport class ArrayUnionFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _elements: unknown[]) {\n    super('FieldValue.arrayUnion');\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _elements: unknown[]) {\n    super('FieldValue.arrayRemove');\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends FieldValueImpl {\n  constructor(readonly _operand: number) {\n    super('FieldValue.increment');\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValueImpl,\n  'Use FieldValue.<field>() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue } from '../model/field_value';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { SortedSet } from '../util/sorted_set';\nimport { Blob } from './blob';\nimport {\n  FieldPath as ExternalFieldPath,\n  fromDotSeparatedString\n} from './field_path';\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  FieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  ServerTimestampFieldValueImpl\n} from './field_value';\nimport { GeoPoint } from './geo_point';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nconst enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** A \"context\" object passed around while parsing user data. */\nclass ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param dataSource Indicates what kind of API method this data came from.\n   * @param methodName The name of the method the user called to create this\n   *     ParseContext.\n   * @param path A path within the object being parsed. This could be an empty\n   *     path (in which case the context represents the root of the data being\n   *     parsed), or a nonempty path (indicating the context represents a nested\n   *     location within the data).\n   * @param arrayElement Whether or not this context corresponds to an element\n   *     of an array.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly dataSource: UserDataSource,\n    readonly methodName: string,\n    readonly path: FieldPath | null,\n    readonly arrayElement?: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path == null ? null : this.path.child(field);\n    const context = new ParseContext(\n      this.dataSource,\n      this.methodName,\n      childPath,\n      /*arrayElement=*/ false,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path == null ? null : this.path.child(field);\n    const context = new ParseContext(\n      this.dataSource,\n      this.methodName,\n      childPath,\n      /*arrayElement=*/ false,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // null.\n    return new ParseContext(\n      this.dataSource,\n      this.methodName,\n      /*path=*/ null,\n      /*arrayElement=*/ true,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  createError(reason: string): Error {\n    const fieldDescription =\n      this.path === null || this.path.isEmpty()\n        ? ''\n        : ` (found in field ${this.path.toString()})`;\n    return new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${this.methodName}() called with invalid data. ` +\n        reason +\n        fieldDescription\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (this.path === null) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n/**\n * An interface that allows arbitrary pre-converting of user data. This\n * abstraction allows for, e.g.:\n *  * The public API to convert DocumentReference objects to DocRef objects,\n *    avoiding a circular dependency between user_data_converter.ts and\n *    database.ts\n *  * Tests to convert test-only sentinels (e.g. '<DELETE>') into types\n *    compatible with UserDataReader.\n *\n * Returns the converted value (can return back the input to act as a no-op).\n *\n * It can also throw an Error which will be wrapped into a friendly message.\n */\nexport type DataPreConverter = (input: unknown) => unknown;\n\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nexport class DocumentKeyReference {\n  constructor(public databaseId: DatabaseId, public key: DocumentKey) {}\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    private readonly preConverter: DataPreConverter\n  ) {}\n\n  /** Parse document data from a non-merge set() call. */\n  parseSetData(methodName: string, input: unknown): ParsedSetData {\n    const context = new ParseContext(\n      UserDataSource.Set,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = this.parseObject(input, context)!;\n\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      /* fieldMask= */ null,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse document data from a set() call with '{merge:true}'. */\n  parseMergeData(\n    methodName: string,\n    input: unknown,\n    fieldPaths?: Array<string | firestore.FieldPath>\n  ): ParsedSetData {\n    const context = new ParseContext(\n      UserDataSource.MergeSet,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = this.parseObject(input, context);\n\n    let fieldMask: FieldMask;\n    let fieldTransforms: FieldTransform[];\n\n    if (!fieldPaths) {\n      fieldMask = FieldMask.fromArray(context.fieldMask);\n      fieldTransforms = context.fieldTransforms;\n    } else {\n      let validatedFieldPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n\n      for (const stringOrFieldPath of fieldPaths) {\n        let fieldPath: FieldPath;\n\n        if (stringOrFieldPath instanceof ExternalFieldPath) {\n          fieldPath = stringOrFieldPath._internalPath;\n        } else if (typeof stringOrFieldPath === 'string') {\n          fieldPath = fieldPathFromDotSeparatedString(\n            methodName,\n            stringOrFieldPath\n          );\n        } else {\n          throw fail(\n            'Expected stringOrFieldPath to be a string or a FieldPath'\n          );\n        }\n\n        if (!context.contains(fieldPath)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n          );\n        }\n\n        validatedFieldPaths = validatedFieldPaths.add(fieldPath);\n      }\n\n      fieldMask = FieldMask.fromSet(validatedFieldPaths);\n      fieldTransforms = context.fieldTransforms.filter(transform =>\n        fieldMask.covers(transform.field)\n      );\n    }\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      fieldMask,\n      fieldTransforms\n    );\n  }\n\n  /** Parse update data from an update() call. */\n  parseUpdateData(methodName: string, input: unknown): ParsedUpdateData {\n    const context = new ParseContext(\n      UserDataSource.Update,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n\n    let fieldMaskPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n    const updateData = ObjectValue.newBuilder();\n    forEach(input as Dict<unknown>, (key, value) => {\n      const path = fieldPathFromDotSeparatedString(methodName, key);\n\n      const childContext = context.childContextForFieldPath(path);\n      value = this.runPreConverter(value, childContext);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths = fieldMaskPaths.add(path);\n      } else {\n        const parsedValue = this.parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths = fieldMaskPaths.add(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    });\n\n    const mask = FieldMask.fromSet(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse update data from a list of field/value arguments. */\n  parseUpdateVarargs(\n    methodName: string,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    moreFieldsAndValues: unknown[]\n  ): ParsedUpdateData {\n    const context = new ParseContext(\n      UserDataSource.Update,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    const keys = [fieldPathFromArgument(methodName, field)];\n    const values = [value];\n\n    if (moreFieldsAndValues.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${methodName}() needs to be called with an even number ` +\n          'of arguments that alternate between field names and values.'\n      );\n    }\n\n    for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n      keys.push(\n        fieldPathFromArgument(\n          methodName,\n          moreFieldsAndValues[i] as string | ExternalFieldPath\n        )\n      );\n      values.push(moreFieldsAndValues[i + 1]);\n    }\n\n    let fieldMaskPaths = new SortedSet<FieldPath>(FieldPath.comparator);\n    const updateData = ObjectValue.newBuilder();\n\n    for (let i = 0; i < keys.length; ++i) {\n      const path = keys[i];\n      const childContext = context.childContextForFieldPath(path);\n      const value = this.runPreConverter(values[i], childContext);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths = fieldMaskPaths.add(path);\n      } else {\n        const parsedValue = this.parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths = fieldMaskPaths.add(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n\n    const mask = FieldMask.fromSet(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /**\n   * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n   * bound).\n   *\n   * @param allowArrays Whether the query value is an array that may directly\n   * contain additional arrays (e.g. the operand of an `in` query).\n   */\n  parseQueryValue(\n    methodName: string,\n    input: unknown,\n    allowArrays = false\n  ): api.Value {\n    const context = new ParseContext(\n      allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n      methodName,\n      FieldPath.EMPTY_PATH\n    );\n    const parsed = this.parseData(input, context);\n    debugAssert(parsed != null, 'Parsed data should not be null.');\n    debugAssert(\n      context.fieldTransforms.length === 0,\n      'Field transforms should have been disallowed.'\n    );\n    return parsed;\n  }\n\n  /** Sends data through this.preConverter, handling any thrown errors. */\n  private runPreConverter(input: unknown, context: ParseContext): unknown {\n    try {\n      return this.preConverter(input);\n    } catch (e) {\n      const message = errorMessage(e);\n      throw context.createError(message);\n    }\n  }\n\n  /**\n   * Internal helper for parsing user data.\n   *\n   * @param input Data to be parsed.\n   * @param context A context object representing the current path being parsed,\n   * the source of the data being parsed, etc.\n   * @return The parsed value, or null if the value was a FieldValue sentinel\n   * that should not be included in the resulting parsed data.\n   */\n  private parseData(input: unknown, context: ParseContext): api.Value | null {\n    input = this.runPreConverter(input, context);\n    if (looksLikeJsonObject(input)) {\n      validatePlainObject('Unsupported field value:', context, input);\n      return this.parseObject(input, context);\n    } else if (input instanceof FieldValueImpl) {\n      // FieldValues usually parse into transforms (except FieldValue.delete())\n      // in which case we do not want to include this field in our parsed data\n      // (as doing so will overwrite the field directly prior to the transform\n      // trying to transform it). So we don't add this location to\n      // context.fieldMask and we return null as our parsing result.\n      this.parseSentinelFieldValue(input, context);\n      return null;\n    } else {\n      // If context.path is null we are inside an array and we don't support\n      // field mask paths more granular than the top-level array.\n      if (context.path) {\n        context.fieldMask.push(context.path);\n      }\n\n      if (input instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (\n          context.arrayElement &&\n          context.dataSource !== UserDataSource.ArrayArgument\n        ) {\n          throw context.createError('Nested arrays are not supported');\n        }\n        return this.parseArray(input as unknown[], context);\n      } else {\n        return this.parseScalarValue(input, context);\n      }\n    }\n  }\n\n  private parseObject(\n    obj: Dict<unknown>,\n    context: ParseContext\n  ): { mapValue: api.MapValue } {\n    const fields: Dict<api.Value> = {};\n\n    if (isEmpty(obj)) {\n      // If we encounter an empty object, we explicitly add it to the update\n      // mask to ensure that the server creates a map entry.\n      if (context.path && context.path.length > 0) {\n        context.fieldMask.push(context.path);\n      }\n    } else {\n      forEach(obj, (key: string, val: unknown) => {\n        const parsedValue = this.parseData(\n          val,\n          context.childContextForField(key)\n        );\n        if (parsedValue != null) {\n          fields[key] = parsedValue;\n        }\n      });\n    }\n\n    return { mapValue: { fields } };\n  }\n\n  private parseArray(array: unknown[], context: ParseContext): api.Value {\n    const values: api.Value[] = [];\n    let entryIndex = 0;\n    for (const entry of array) {\n      let parsedEntry = this.parseData(\n        entry,\n        context.childContextForArray(entryIndex)\n      );\n      if (parsedEntry == null) {\n        // Just include nulls in the array for fields being replaced with a\n        // sentinel.\n        parsedEntry = { nullValue: 'NULL_VALUE' };\n      }\n      values.push(parsedEntry);\n      entryIndex++;\n    }\n    return { arrayValue: { values } };\n  }\n\n  /**\n   * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n   * context.fieldTransforms.\n   */\n  private parseSentinelFieldValue(\n    value: FieldValueImpl,\n    context: ParseContext\n  ): void {\n    // Sentinels are only supported with writes, and not within arrays.\n    if (!isWrite(context.dataSource)) {\n      throw context.createError(\n        `${value._methodName}() can only be used with update() and set()`\n      );\n    }\n    if (context.path === null) {\n      throw context.createError(\n        `${value._methodName}() is not currently supported inside arrays`\n      );\n    }\n\n    if (value instanceof DeleteFieldValueImpl) {\n      if (context.dataSource === UserDataSource.MergeSet) {\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        context.fieldMask.push(context.path);\n      } else if (context.dataSource === UserDataSource.Update) {\n        debugAssert(\n          context.path.length > 0,\n          'FieldValue.delete() at the top level should have already' +\n            ' been handled.'\n        );\n        throw context.createError(\n          'FieldValue.delete() can only appear at the top level ' +\n            'of your update data'\n        );\n      } else {\n        // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n        throw context.createError(\n          'FieldValue.delete() cannot be used with set() unless you pass ' +\n            '{merge:true}'\n        );\n      }\n    } else if (value instanceof ServerTimestampFieldValueImpl) {\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, ServerTimestampTransform.instance)\n      );\n    } else if (value instanceof ArrayUnionFieldValueImpl) {\n      const parsedElements = this.parseArrayTransformElements(\n        value._methodName,\n        value._elements\n      );\n      const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, arrayUnion)\n      );\n    } else if (value instanceof ArrayRemoveFieldValueImpl) {\n      const parsedElements = this.parseArrayTransformElements(\n        value._methodName,\n        value._elements\n      );\n      const arrayRemove = new ArrayRemoveTransformOperation(parsedElements);\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, arrayRemove)\n      );\n    } else if (value instanceof NumericIncrementFieldValueImpl) {\n      const operand = this.parseQueryValue(\n        'FieldValue.increment',\n        value._operand\n      );\n      const numericIncrement = new NumericIncrementTransformOperation(\n        this.serializer,\n        operand\n      );\n      context.fieldTransforms.push(\n        new FieldTransform(context.path, numericIncrement)\n      );\n    } else {\n      fail('Unknown FieldValue type: ' + value);\n    }\n  }\n\n  /**\n   * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n   *\n   * @return The parsed value\n   */\n  private parseScalarValue(value: unknown, context: ParseContext): api.Value {\n    if (value === null) {\n      return { nullValue: 'NULL_VALUE' };\n    } else if (typeof value === 'number') {\n      return this.serializer.toNumber(value);\n    } else if (typeof value === 'boolean') {\n      return { booleanValue: value };\n    } else if (typeof value === 'string') {\n      return { stringValue: value };\n    } else if (value instanceof Date) {\n      const timestamp = Timestamp.fromDate(value);\n      return { timestampValue: this.serializer.toTimestamp(timestamp) };\n    } else if (value instanceof Timestamp) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      const timestamp = new Timestamp(\n        value.seconds,\n        Math.floor(value.nanoseconds / 1000) * 1000\n      );\n      return { timestampValue: this.serializer.toTimestamp(timestamp) };\n    } else if (value instanceof GeoPoint) {\n      return {\n        geoPointValue: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    } else if (value instanceof Blob) {\n      return { bytesValue: this.serializer.toBytes(value) };\n    } else if (value instanceof DocumentKeyReference) {\n      return {\n        referenceValue: this.serializer.toResourceName(\n          value.key.path,\n          value.databaseId\n        )\n      };\n    } else {\n      throw context.createError(\n        `Unsupported field value: ${valueDescription(value)}`\n      );\n    }\n  }\n\n  private parseArrayTransformElements(\n    methodName: string,\n    elements: unknown[]\n  ): api.Value[] {\n    return elements.map((element, i) => {\n      // Although array transforms are used with writes, the actual elements\n      // being unioned or removed are not considered writes since they cannot\n      // contain any FieldValue sentinels, etc.\n      const context = new ParseContext(\n        UserDataSource.Argument,\n        methodName,\n        FieldPath.EMPTY_PATH\n      );\n      return this.parseData(element, context.childContextForArray(i))!;\n    });\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof FieldValueImpl)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | ExternalFieldPath\n): FieldPath {\n  if (path instanceof ExternalFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nimport { CancelablePromise } from '../util/promise';\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport { JsonProtoSerializer } from './serializer';\nimport { WatchChange } from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends api.ListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends api.WriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: CancelablePromise<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  api.ListenRequest,\n  api.ListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.ListenRequest, api.ListenResponse> {\n    return this.connection.openStream<api.ListenRequest, api.ListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: api.ListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = this.serializer.fromWatchChange(watchChangeProto);\n    const snapshot = this.serializer.versionFromListenResponse(\n      watchChangeProto\n    );\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.addTarget = this.serializer.toTarget(targetData);\n\n    const labels = this.serializer.toListenRequestLabels(targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  api.WriteRequest,\n  api.WriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.WriteRequest, api.WriteResponse> {\n    return this.connection.openStream<api.WriteRequest, api.WriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: api.WriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = this.serializer.fromBytes(responseProto.streamToken);\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = this.serializer.fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = this.serializer.fromVersion(\n        responseProto.commitTime!\n      );\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      this.lastStreamToken.approximateByteSize() > 0,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: this.serializer.toBytes(this.lastStreamToken),\n      writes: mutations.map(mutation => this.serializer.toMutation(mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { maybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  WatchStreamListener,\n  WriteStreamListener,\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\n\nimport { JsonProtoSerializer } from './serializer';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface BatchGetDocumentsRequest extends api.BatchGetDocumentsRequest {\n  database?: string;\n}\ninterface CommitRequest extends api.CommitRequest {\n  database?: string;\n}\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nexport class Datastore {\n  constructor(\n    private queue: AsyncQueue,\n    private connection: Connection,\n    private credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer\n  ) {}\n\n  newPersistentWriteStream(\n    listener: WriteStreamListener\n  ): PersistentWriteStream {\n    return new PersistentWriteStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer,\n      listener\n    );\n  }\n\n  newPersistentWatchStream(\n    listener: WatchStreamListener\n  ): PersistentListenStream {\n    return new PersistentListenStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer,\n      listener\n    );\n  }\n\n  commit(mutations: Mutation[]): Promise<MutationResult[]> {\n    const params: CommitRequest = {\n      database: this.serializer.encodedDatabaseId,\n      writes: mutations.map(m => this.serializer.toMutation(m))\n    };\n    return this.invokeRPC<CommitRequest, api.CommitResponse>(\n      'Commit',\n      params\n    ).then(response => {\n      return this.serializer.fromWriteResults(\n        response.writeResults,\n        response.commitTime\n      );\n    });\n  }\n\n  lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    const params: BatchGetDocumentsRequest = {\n      database: this.serializer.encodedDatabaseId,\n      documents: keys.map(k => this.serializer.toName(k))\n    };\n    return this.invokeStreamingRPC<\n      BatchGetDocumentsRequest,\n      api.BatchGetDocumentsResponse\n    >('BatchGetDocuments', params).then(response => {\n      let docs = maybeDocumentMap();\n      response.forEach(proto => {\n        const doc = this.serializer.fromMaybeDocument(proto);\n        docs = docs.insert(doc.key, doc);\n      });\n      const result: MaybeDocument[] = [];\n      keys.forEach(key => {\n        const doc = docs.get(key);\n        hardAssert(!!doc, 'Missing entity in write response for ' + key);\n        result.push(doc);\n      });\n      return result;\n    });\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  private invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  private invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { documentVersionMap } from '../model/collections';\nimport { Document, NoDocument, MaybeDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport { Datastore } from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = documentVersionMap();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await this.datastore.lookup(keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    let unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten = unwritten.remove(mutation.key);\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((key, _version) => {\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await this.datastore.commit(this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.forDeletedDoc();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key);\n    if (existingVersion !== null) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions = this.readVersions.insert(doc.key, docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key);\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.NONE;\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key);\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.forDeletedDoc())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { CancelablePromise } from '../util/promise';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: CancelablePromise<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState, TargetId } from '../core/types';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { DocumentKeySet } from '../model/collections';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport { Datastore } from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentError, isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  TargetMetadataProvider,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport class RemoteStore implements TargetMetadataProvider {\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  private writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  private listenTargets = new Map<TargetId, TargetData>();\n\n  private connectivityMonitor: ConnectivityMonitor;\n  private watchStream: PersistentListenStream;\n  private writeStream: PersistentWriteStream;\n  private watchChangeAggregator: WatchChangeAggregator | null = null;\n\n  /**\n   * Set to true by enableNetwork() and false by disableNetwork() and indicates\n   * the user-preferred network state.\n   */\n  private networkEnabled = false;\n\n  private isPrimary = false;\n\n  private onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    private localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    private datastore: Datastore,\n    asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((status: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        if (this.canUseNetwork()) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await this.restartNetwork();\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n\n    // Create streams (but note they're not started yet).\n    this.watchStream = this.datastore.newPersistentWatchStream({\n      onOpen: this.onWatchStreamOpen.bind(this),\n      onClose: this.onWatchStreamClose.bind(this),\n      onWatchChange: this.onWatchStreamChange.bind(this)\n    });\n\n    this.writeStream = this.datastore.newPersistentWriteStream({\n      onOpen: this.onWriteStreamOpen.bind(this),\n      onClose: this.onWriteStreamClose.bind(this),\n      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n      onMutationResult: this.onMutationResult.bind(this)\n    });\n  }\n\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  syncEngine!: RemoteSyncer;\n\n  /**\n   * Starts up the remote store, creating streams, restoring state from\n   * LocalStore, etc.\n   */\n  start(): Promise<void> {\n    return this.enableNetwork();\n  }\n\n  /** Re-enables the network. Idempotent. */\n  async enableNetwork(): Promise<void> {\n    this.networkEnabled = true;\n\n    if (this.canUseNetwork()) {\n      this.writeStream.lastStreamToken = await this.localStore.getLastStreamToken();\n\n      if (this.shouldStartWatchStream()) {\n        this.startWatchStream();\n      } else {\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n\n      // This will start the write stream if necessary.\n      await this.fillWritePipeline();\n    }\n  }\n\n  /**\n   * Temporarily disables the network. The network can be re-enabled using\n   * enableNetwork().\n   */\n  async disableNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n\n    // Set the OnlineState to Offline so get()s return from cache, etc.\n    this.onlineStateTracker.set(OnlineState.Offline);\n  }\n\n  private async disableNetworkInternal(): Promise<void> {\n    await this.writeStream.stop();\n    await this.watchStream.stop();\n\n    if (this.writePipeline.length > 0) {\n      logDebug(\n        LOG_TAG,\n        `Stopping write stream with ${this.writePipeline.length} pending writes`\n      );\n      this.writePipeline = [];\n    }\n\n    this.cleanUpWatchStreamState();\n  }\n\n  async shutdown(): Promise<void> {\n    logDebug(LOG_TAG, 'RemoteStore shutting down.');\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.connectivityMonitor.shutdown();\n\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n    // triggering spurious listener events with cached data, etc.\n    this.onlineStateTracker.set(OnlineState.Unknown);\n  }\n\n  /**\n   * Starts new listen for the given target. Uses resume token if provided. It\n   * is a no-op if the target of given `TargetData` is already being listened to.\n   */\n  listen(targetData: TargetData): void {\n    if (this.listenTargets.has(targetData.targetId)) {\n      return;\n    }\n\n    // Mark this as something the client is currently listening for.\n    this.listenTargets.set(targetData.targetId, targetData);\n\n    if (this.shouldStartWatchStream()) {\n      // The listen will be sent in onWatchStreamOpen\n      this.startWatchStream();\n    } else if (this.watchStream.isOpen()) {\n      this.sendWatchRequest(targetData);\n    }\n  }\n\n  /**\n   * Removes the listen from server. It is a no-op if the given target id is\n   * not being listened to.\n   */\n  unlisten(targetId: TargetId): void {\n    debugAssert(\n      this.listenTargets.has(targetId),\n      `unlisten called on target no currently watched: ${targetId}`\n    );\n\n    this.listenTargets.delete(targetId);\n    if (this.watchStream.isOpen()) {\n      this.sendUnwatchRequest(targetId);\n    }\n\n    if (this.listenTargets.size === 0) {\n      if (this.watchStream.isOpen()) {\n        this.watchStream.markIdle();\n      } else if (this.canUseNetwork()) {\n        // Revert to OnlineState.Unknown if the watch stream is not open and we\n        // have no listeners, since without any listens to send we cannot\n        // confirm if the stream is healthy and upgrade to OnlineState.Online.\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n    }\n  }\n\n  /** {@link TargetMetadataProvider.getTargetDataForTarget} */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null {\n    return this.listenTargets.get(targetId) || null;\n  }\n\n  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    return this.syncEngine.getRemoteKeysForTarget(targetId);\n  }\n\n  /**\n   * We need to increment the the expected number of pending responses we're due\n   * from watch so we wait for the ack to process any messages from this target.\n   */\n  private sendWatchRequest(targetData: TargetData): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetData.targetId);\n    this.watchStream.watch(targetData);\n  }\n\n  /**\n   * We need to increment the expected number of pending responses we're due\n   * from watch so we wait for the removal on the server before we process any\n   * messages from this target.\n   */\n  private sendUnwatchRequest(targetId: TargetId): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n    this.watchStream.unwatch(targetId);\n  }\n\n  private startWatchStream(): void {\n    debugAssert(\n      this.shouldStartWatchStream(),\n      'startWatchStream() called when shouldStartWatchStream() is false.'\n    );\n\n    this.watchChangeAggregator = new WatchChangeAggregator(this);\n    this.watchStream.start();\n    this.onlineStateTracker.handleWatchStreamStart();\n  }\n\n  /**\n   * Returns whether the watch stream should be started because it's necessary\n   * and has not yet been started.\n   */\n  private shouldStartWatchStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.watchStream.isStarted() &&\n      this.listenTargets.size > 0\n    );\n  }\n\n  canUseNetwork(): boolean {\n    return this.isPrimary && this.networkEnabled;\n  }\n\n  private cleanUpWatchStreamState(): void {\n    this.watchChangeAggregator = null;\n  }\n\n  private async onWatchStreamOpen(): Promise<void> {\n    this.listenTargets.forEach((targetData, targetId) => {\n      this.sendWatchRequest(targetData);\n    });\n  }\n\n  private async onWatchStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWatchStream(),\n        'Watch stream was stopped gracefully while still needed.'\n      );\n    }\n\n    this.cleanUpWatchStreamState();\n\n    // If we still need the watch stream, retry the connection.\n    if (this.shouldStartWatchStream()) {\n      this.onlineStateTracker.handleWatchStreamFailure(error!);\n\n      this.startWatchStream();\n    } else {\n      // No need to restart watch stream because there are no active targets.\n      // The online state is set to unknown because there is no active attempt\n      // at establishing a connection\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n\n  private async onWatchStreamChange(\n    watchChange: WatchChange,\n    snapshotVersion: SnapshotVersion\n  ): Promise<void> {\n    // Mark the client as online since we got a message from the server\n    this.onlineStateTracker.set(OnlineState.Online);\n\n    if (\n      watchChange instanceof WatchTargetChange &&\n      watchChange.state === WatchTargetChangeState.Removed &&\n      watchChange.cause\n    ) {\n      // There was an error on a target, don't wait for a consistent snapshot\n      // to raise events\n      return this.handleTargetError(watchChange);\n    }\n\n    if (watchChange instanceof DocumentWatchChange) {\n      this.watchChangeAggregator!.handleDocumentChange(watchChange);\n    } else if (watchChange instanceof ExistenceFilterChange) {\n      this.watchChangeAggregator!.handleExistenceFilter(watchChange);\n    } else {\n      debugAssert(\n        watchChange instanceof WatchTargetChange,\n        'Expected watchChange to be an instance of WatchTargetChange'\n      );\n      this.watchChangeAggregator!.handleTargetChange(watchChange);\n    }\n\n    if (!snapshotVersion.isEqual(SnapshotVersion.MIN)) {\n      const lastRemoteSnapshotVersion = await this.localStore.getLastRemoteSnapshotVersion();\n      if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n        // We have received a target change with a global snapshot if the snapshot\n        // version is not equal to SnapshotVersion.MIN.\n        await this.raiseWatchSnapshot(snapshotVersion);\n      }\n    }\n  }\n\n  /**\n   * Takes a batch of changes from the Datastore, repackages them as a\n   * RemoteEvent, and passes that on to the listener, which is typically the\n   * SyncEngine.\n   */\n  private raiseWatchSnapshot(snapshotVersion: SnapshotVersion): Promise<void> {\n    debugAssert(\n      !snapshotVersion.isEqual(SnapshotVersion.MIN),\n      \"Can't raise event for unknown SnapshotVersion\"\n    );\n    const remoteEvent = this.watchChangeAggregator!.createRemoteEvent(\n      snapshotVersion\n    );\n\n    // Update in-memory resume tokens. LocalStore will update the\n    // persistent view of these when applying the completed RemoteEvent.\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      if (change.resumeToken.approximateByteSize() > 0) {\n        const targetData = this.listenTargets.get(targetId);\n        // A watched target might have been removed already.\n        if (targetData) {\n          this.listenTargets.set(\n            targetId,\n            targetData.withResumeToken(change.resumeToken, snapshotVersion)\n          );\n        }\n      }\n    });\n\n    // Re-establish listens for the targets that have been invalidated by\n    // existence filter mismatches.\n    remoteEvent.targetMismatches.forEach(targetId => {\n      const targetData = this.listenTargets.get(targetId);\n      if (!targetData) {\n        // A watched target might have been removed already.\n        return;\n      }\n\n      // Clear the resume token for the target, since we're in a known mismatch\n      // state.\n      this.listenTargets.set(\n        targetId,\n        targetData.withResumeToken(\n          ByteString.EMPTY_BYTE_STRING,\n          targetData.snapshotVersion\n        )\n      );\n\n      // Cause a hard reset by unwatching and rewatching immediately, but\n      // deliberately don't send a resume token so that we get a full update.\n      this.sendUnwatchRequest(targetId);\n\n      // Mark the target we send as being on behalf of an existence filter\n      // mismatch, but don't actually retain that in listenTargets. This ensures\n      // that we flag the first re-listen this way without impacting future\n      // listens of this target (that might happen e.g. on reconnect).\n      const requestTargetData = new TargetData(\n        targetData.target,\n        targetId,\n        TargetPurpose.ExistenceFilterMismatch,\n        targetData.sequenceNumber\n      );\n      this.sendWatchRequest(requestTargetData);\n    });\n\n    // Finally raise remote event\n    return this.syncEngine.applyRemoteEvent(remoteEvent);\n  }\n\n  /** Handles an error on a target */\n  private handleTargetError(watchChange: WatchTargetChange): Promise<void> {\n    debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n    const error = watchChange.cause!;\n    let promiseChain = Promise.resolve();\n    watchChange.targetIds.forEach(targetId => {\n      promiseChain = promiseChain.then(async () => {\n        // A watched target might have been removed already.\n        if (this.listenTargets.has(targetId)) {\n          this.listenTargets.delete(targetId);\n          this.watchChangeAggregator!.removeTarget(targetId);\n          return this.syncEngine.rejectListen(targetId, error);\n        }\n      });\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Attempts to fill our write pipeline with writes from the LocalStore.\n   *\n   * Called internally to bootstrap or refill the write pipeline and by\n   * SyncEngine whenever there are new mutations to process.\n   *\n   * Starts the write stream if necessary.\n   */\n  async fillWritePipeline(): Promise<void> {\n    if (this.canAddToWritePipeline()) {\n      const lastBatchIdRetrieved =\n        this.writePipeline.length > 0\n          ? this.writePipeline[this.writePipeline.length - 1].batchId\n          : BATCHID_UNKNOWN;\n      const batch = await this.localStore.nextMutationBatch(\n        lastBatchIdRetrieved\n      );\n\n      if (batch === null) {\n        if (this.writePipeline.length === 0) {\n          this.writeStream.markIdle();\n        }\n      } else {\n        this.addToWritePipeline(batch);\n        await this.fillWritePipeline();\n      }\n    }\n\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  /**\n   * Returns true if we can add to the write pipeline (i.e. the network is\n   * enabled and the write pipeline is not full).\n   */\n  private canAddToWritePipeline(): boolean {\n    return (\n      this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES\n    );\n  }\n\n  // For testing\n  outstandingWrites(): number {\n    return this.writePipeline.length;\n  }\n\n  /**\n   * Queues additional writes to be sent to the write stream, sending them\n   * immediately if the write stream is established.\n   */\n  private addToWritePipeline(batch: MutationBatch): void {\n    debugAssert(\n      this.canAddToWritePipeline(),\n      'addToWritePipeline called when pipeline is full'\n    );\n    this.writePipeline.push(batch);\n\n    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private shouldStartWriteStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.writeStream.isStarted() &&\n      this.writePipeline.length > 0\n    );\n  }\n\n  private startWriteStream(): void {\n    debugAssert(\n      this.shouldStartWriteStream(),\n      'startWriteStream() called when shouldStartWriteStream() is false.'\n    );\n    this.writeStream.start();\n  }\n\n  private async onWriteStreamOpen(): Promise<void> {\n    this.writeStream.writeHandshake();\n  }\n\n  private onWriteHandshakeComplete(): Promise<void> {\n    // Record the stream token.\n    return this.localStore\n      .setLastStreamToken(this.writeStream.lastStreamToken)\n      .then(() => {\n        // Send the write pipeline now that the stream is established.\n        for (const batch of this.writePipeline) {\n          this.writeStream.writeMutations(batch.mutations);\n        }\n      })\n      .catch(ignoreIfPrimaryLeaseLoss);\n  }\n\n  private onMutationResult(\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): Promise<void> {\n    // This is a response to a write containing mutations and should be\n    // correlated to the first write in our write pipeline.\n    debugAssert(\n      this.writePipeline.length > 0,\n      'Got result for empty write pipeline'\n    );\n    const batch = this.writePipeline.shift()!;\n    const success = MutationBatchResult.from(\n      batch,\n      commitVersion,\n      results,\n      this.writeStream.lastStreamToken\n    );\n    return this.syncEngine.applySuccessfulWrite(success).then(() => {\n      // It's possible that with the completion of this mutation another\n      // slot has freed up.\n      return this.fillWritePipeline();\n    });\n  }\n\n  private async onWriteStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWriteStream(),\n        'Write stream was stopped gracefully while still needed.'\n      );\n    }\n\n    // If the write stream closed due to an error, invoke the error callbacks if\n    // there are pending writes.\n    if (error && this.writePipeline.length > 0) {\n      // A promise that is resolved after we processed the error\n      let errorHandling: Promise<void>;\n      if (this.writeStream.handshakeComplete) {\n        // This error affects the actual write.\n        errorHandling = this.handleWriteError(error!);\n      } else {\n        // If there was an error before the handshake has finished, it's\n        // possible that the server is unable to process the stream token\n        // we're sending. (Perhaps it's too old?)\n        errorHandling = this.handleHandshakeError(error!);\n      }\n\n      return errorHandling.then(() => {\n        // The write stream might have been started by refilling the write\n        // pipeline for failed writes\n        if (this.shouldStartWriteStream()) {\n          this.startWriteStream();\n        }\n      });\n    }\n    // No pending writes, nothing to do\n  }\n\n  private async handleHandshakeError(error: FirestoreError): Promise<void> {\n    // Reset the token if it's a permanent error, signaling the write stream is\n    // no longer valid. Note that the handshake does not count as a write: see\n    // comments on isPermanentWriteError for details.\n    if (isPermanentError(error.code)) {\n      logDebug(\n        LOG_TAG,\n        'RemoteStore error before completed handshake; resetting stream token: ',\n        this.writeStream.lastStreamToken\n      );\n      this.writeStream.lastStreamToken = ByteString.EMPTY_BYTE_STRING;\n\n      return this.localStore\n        .setLastStreamToken(ByteString.EMPTY_BYTE_STRING)\n        .catch(ignoreIfPrimaryLeaseLoss);\n    } else {\n      // Some other error, don't reset stream token. Our stream logic will\n      // just retry with exponential backoff.\n    }\n  }\n\n  private async handleWriteError(error: FirestoreError): Promise<void> {\n    // Only handle permanent errors here. If it's transient, just let the retry\n    // logic kick in.\n    if (isPermanentWriteError(error.code)) {\n      // This was a permanent error, the request itself was the problem\n      // so it's not going to succeed if we resend it.\n      const batch = this.writePipeline.shift()!;\n\n      // In this case it's also unlikely that the server itself is melting\n      // down -- this was just a bad request so inhibit backoff on the next\n      // restart.\n      this.writeStream.inhibitBackoff();\n\n      return this.syncEngine\n        .rejectFailedWrite(batch.batchId, error)\n        .then(() => {\n          // It's possible that with the completion of this mutation\n          // another slot has freed up.\n          return this.fillWritePipeline();\n        });\n    } else {\n      // Transient error, just let the retry logic kick in.\n    }\n  }\n\n  createTransaction(): Transaction {\n    return new Transaction(this.datastore);\n  }\n\n  private async restartNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    await this.enableNetwork();\n  }\n\n  async handleCredentialChange(): Promise<void> {\n    if (this.canUseNetwork()) {\n      // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n      // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n      // (since mutations are per-user).\n      logDebug(LOG_TAG, 'RemoteStore restarting streams for new credential');\n      await this.restartNetwork();\n    }\n  }\n\n  /**\n   * Toggles the network state when the client gains or loses its primary lease.\n   */\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    this.isPrimary = isPrimary;\n\n    if (isPrimary && this.networkEnabled) {\n      await this.enableNetwork();\n    } else if (!isPrimary) {\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { Platform } from '../platform/platform';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  syncEngine: SharedClientStateSyncer | null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly queue: AsyncQueue,\n    private readonly platform: Platform,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    if (!WebStorageSharedClientState.isAvailable(this.platform)) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'LocalStorage is not available on this platform.'\n      );\n    }\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.platform.window!.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.platform.window!.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(platform: Platform): boolean {\n    return !!(platform.window && platform.window.localStorage != null);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.platform.window!.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.platform.window!.removeEventListener(\n        'storage',\n        this.storageListener\n      );\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: StorageEvent): void {\n    if (event.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', event.key, event.newValue);\n\n      if (event.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(event);\n          return;\n        }\n\n        if (event.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(event.key)) {\n          if (event.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              event.key,\n              event.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(event.key)!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              event.key,\n              event.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              event.key,\n              event.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (event.key === this.onlineStateKey) {\n          if (event.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(event.newValue);\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (event.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(event.newValue);\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { Query } from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.documentSet = new DocumentSet(query.docComparator.bind(query));\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      this.query.hasLimitToFirst() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      this.query.hasLimitToLast() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = this.query.matches(newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.query.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.query.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.hasLimitToFirst() || this.query.hasLimitToLast()) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = this.query.hasLimitToFirst()\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.query.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { RemoteStore } from '../remote/remote_store';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly remoteStore: RemoteStore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = this.remoteStore.createTransaction();\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  LocalWriteResult,\n  MultiTabLocalStore\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatchResult, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { RemoteStore } from '../remote/remote_store';\nimport { RemoteSyncer } from '../remote/remote_syncer';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport { Query, LimitType } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { Transaction } from './transaction';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange,\n  ViewDocumentChanges\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { AsyncQueue } from '../util/async_queue';\nimport { TransactionRunner } from './transaction_runner';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * Interface implemented by EventManager to handle notifications from\n * SyncEngine.\n */\nexport interface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError(query: Query, error: Error): void;\n\n  /** Handles a change in online state. */\n  onOnlineStateChange(onlineState: OnlineState): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nexport class SyncEngine implements RemoteSyncer {\n  protected syncEngineListener: SyncEngineListener | null = null;\n\n  protected queryViewsByQuery = new ObjectMap<Query, QueryView>(q =>\n    q.canonicalId()\n  );\n  protected queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  private enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  protected activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  protected activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  protected limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  private mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  private pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  private limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    protected localStore: LocalStore,\n    protected remoteStore: RemoteStore,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    protected sharedClientState: SharedClientState,\n    private currentUser: User,\n    private maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return true;\n  }\n\n  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */\n  subscribe(syncEngineListener: SyncEngineListener): void {\n    debugAssert(\n      syncEngineListener !== null,\n      'SyncEngine listener cannot be null'\n    );\n    debugAssert(\n      this.syncEngineListener === null,\n      'SyncEngine already has a subscriber.'\n    );\n\n    this.syncEngineListener = syncEngineListener;\n  }\n\n  /**\n   * Initiates the new listen, resolves promise when listen enqueued to the\n   * server. All the subsequent view snapshots or errors are sent to the\n   * subscribed handlers. Returns the targetId of the query.\n   */\n  async listen(query: Query): Promise<TargetId> {\n    this.assertSubscribed('listen()');\n\n    let targetId;\n    let viewSnapshot;\n\n    const queryView = this.queryViewsByQuery.get(query);\n    if (queryView) {\n      // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n      // already exists when EventManager calls us for the first time. This\n      // happens when the primary tab is already listening to this query on\n      // behalf of another tab and the user of the primary also starts listening\n      // to the query. EventManager will not have an assigned target ID in this\n      // case and calls `listen` to obtain this ID.\n      targetId = queryView.targetId;\n      this.sharedClientState.addLocalQueryTarget(targetId);\n      viewSnapshot = queryView.view.computeInitialSnapshot();\n    } else {\n      const targetData = await this.localStore.allocateTarget(query.toTarget());\n\n      const status = this.sharedClientState.addLocalQueryTarget(\n        targetData.targetId\n      );\n      targetId = targetData.targetId;\n      viewSnapshot = await this.initializeViewAndComputeSnapshot(\n        query,\n        targetId,\n        status === 'current'\n      );\n      if (this.isPrimaryClient) {\n        this.remoteStore.listen(targetData);\n      }\n    }\n\n    this.syncEngineListener!.onWatchChange([viewSnapshot]);\n    return targetId;\n  }\n\n  /**\n   * Registers a view for a previously unknown query and computes its initial\n   * snapshot.\n   */\n  protected async initializeViewAndComputeSnapshot(\n    query: Query,\n    targetId: TargetId,\n    current: boolean\n  ): Promise<ViewSnapshot> {\n    const queryResult = await this.localStore.executeQuery(\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n      targetId,\n      current && this.onlineState !== OnlineState.Offline\n    );\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ this.isPrimaryClient,\n      synthesizedTargetChange\n    );\n    this.updateTrackedLimbos(targetId, viewChange.limboChanges);\n\n    debugAssert(\n      !!viewChange.snapshot,\n      'applyChanges for new view should always return a snapshot'\n    );\n\n    const data = new QueryView(query, targetId, view);\n    this.queryViewsByQuery.set(query, data);\n    if (this.queriesByTarget.has(targetId)) {\n      this.queriesByTarget.get(targetId)!.push(query);\n    } else {\n      this.queriesByTarget.set(targetId, [query]);\n    }\n    return viewChange.snapshot!;\n  }\n\n  /** Stops listening to the query. */\n  async unlisten(query: Query): Promise<void> {\n    this.assertSubscribed('unlisten()');\n\n    const queryView = this.queryViewsByQuery.get(query)!;\n    debugAssert(!!queryView, 'Trying to unlisten on query not found:' + query);\n\n    // Only clean up the query view and target if this is the only query mapped\n    // to the target.\n    const queries = this.queriesByTarget.get(queryView.targetId)!;\n    if (queries.length > 1) {\n      this.queriesByTarget.set(\n        queryView.targetId,\n        queries.filter(q => !q.isEqual(query))\n      );\n      this.queryViewsByQuery.delete(query);\n      return;\n    }\n\n    // No other queries are mapped to the target, clean up the query and the target.\n    if (this.isPrimaryClient) {\n      // We need to remove the local query target first to allow us to verify\n      // whether any other client is still interested in this target.\n      this.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n      const targetRemainsActive = this.sharedClientState.isActiveQueryTarget(\n        queryView.targetId\n      );\n\n      if (!targetRemainsActive) {\n        await this.localStore\n          .releaseTarget(queryView.targetId, /*keepPersistedTargetData=*/ false)\n          .then(() => {\n            this.sharedClientState.clearQueryState(queryView.targetId);\n            this.remoteStore.unlisten(queryView.targetId);\n            this.removeAndCleanupTarget(queryView.targetId);\n          })\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    } else {\n      this.removeAndCleanupTarget(queryView.targetId);\n      await this.localStore.releaseTarget(\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ true\n      );\n    }\n  }\n\n  /**\n   * Initiates the write of local mutation batch which involves adding the\n   * writes to the mutation queue, notifying the remote store about new\n   * mutations and raising events for any changes this write caused.\n   *\n   * The promise returned by this call is resolved when the above steps\n   * have completed, *not* when the write was acked by the backend. The\n   * userCallback is resolved once the write was acked/rejected by the\n   * backend (or failed locally for any other reason).\n   */\n  async write(batch: Mutation[], userCallback: Deferred<void>): Promise<void> {\n    this.assertSubscribed('write()');\n\n    let result: LocalWriteResult;\n    try {\n      result = await this.localStore.localWrite(batch);\n    } catch (e) {\n      if (e.name === 'IndexedDbTransactionError') {\n        // If we can't persist the mutation, we reject the user callback and\n        // don't send the mutation. The user can then retry the write.\n        logError(LOG_TAG, 'Dropping write that cannot be persisted: ' + e);\n        userCallback.reject(\n          new FirestoreError(Code.UNAVAILABLE, 'Failed to persist write: ' + e)\n        );\n        return;\n      } else {\n        throw e;\n      }\n    }\n\n    this.sharedClientState.addPendingMutation(result.batchId);\n    this.addMutationCallback(result.batchId, userCallback);\n    await this.emitNewSnapsAndNotifyLocalStore(result.changes);\n    await this.remoteStore.fillWritePipeline();\n  }\n\n  /**\n   * Takes an updateFunction in which a set of reads and writes can be performed\n   * atomically. In the updateFunction, the client can read and write values\n   * using the supplied transaction object. After the updateFunction, all\n   * changes will be committed. If a retryable error occurs (ex: some other\n   * client has changed any of the data referenced), then the updateFunction\n   * will be called again after a backoff. If the updateFunction still fails\n   * after all retries, then the transaction will be rejected.\n   *\n   * The transaction object passed to the updateFunction contains methods for\n   * accessing documents and collections. Unlike other datastore access, data\n   * accessed with the transaction will not reflect local changes that have not\n   * been committed. For this reason, it is required that all reads are\n   * performed before any writes. Transactions must be performed while online.\n   *\n   * The Deferred input is resolved when the transaction is fully committed.\n   */\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void {\n    new TransactionRunner<T>(\n      asyncQueue,\n      this.remoteStore,\n      updateFunction,\n      deferred\n    ).run();\n  }\n\n  async applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void> {\n    this.assertSubscribed('applyRemoteEvent()');\n    try {\n      const changes = await this.localStore.applyRemoteEvent(remoteEvent);\n      // Update `receivedDocument` as appropriate for any limbo targets.\n      remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n        const limboResolution = this.activeLimboResolutionsByTarget.get(\n          targetId\n        );\n        if (limboResolution) {\n          // Since this is a limbo resolution lookup, it's for a single document\n          // and it could be added, modified, or removed, but not a combination.\n          hardAssert(\n            targetChange.addedDocuments.size +\n              targetChange.modifiedDocuments.size +\n              targetChange.removedDocuments.size <=\n              1,\n            'Limbo resolution for single document contains multiple changes.'\n          );\n          if (targetChange.addedDocuments.size > 0) {\n            limboResolution.receivedDocument = true;\n          } else if (targetChange.modifiedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received change for limbo target document without add.'\n            );\n          } else if (targetChange.removedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received remove for limbo target document without add.'\n            );\n            limboResolution.receivedDocument = false;\n          } else {\n            // This was probably just a CURRENT targetChange or similar.\n          }\n        }\n      });\n      await this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the sync engine and notifies any views of\n   * the change.\n   */\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    this.assertSubscribed('applyOnlineStateChange()');\n    const newViewSnapshots = [] as ViewSnapshot[];\n    this.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      debugAssert(\n        viewChange.limboChanges.length === 0,\n        'OnlineState should not affect limbo documents.'\n      );\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    this.syncEngineListener!.onOnlineStateChange(onlineState);\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    this.onlineState = onlineState;\n  }\n\n  async rejectListen(targetId: TargetId, err: FirestoreError): Promise<void> {\n    this.assertSubscribed('rejectListens()');\n\n    // PORTING NOTE: Multi-tab only.\n    this.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    const limboKey = limboResolution && limboResolution.key;\n    if (limboKey) {\n      // Since this query failed, we won't want to manually unlisten to it.\n      // So go ahead and remove it from bookkeeping.\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(\n        limboKey\n      );\n      this.activeLimboResolutionsByTarget.delete(targetId);\n      this.pumpEnqueuedLimboResolutions();\n\n      // TODO(klimt): We really only should do the following on permission\n      // denied errors, but we don't have the cause code here.\n\n      // It's a limbo doc. Create a synthetic event saying it was deleted.\n      // This is kind of a hack. Ideally, we would have a method in the local\n      // store to purge a document. However, it would be tricky to keep all of\n      // the local store's invariants with another method.\n      let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n        DocumentKey.comparator\n      );\n      documentUpdates = documentUpdates.insert(\n        limboKey,\n        new NoDocument(limboKey, SnapshotVersion.forDeletedDoc())\n      );\n      const resolvedLimboDocuments = documentKeySet().add(limboKey);\n      const event = new RemoteEvent(\n        SnapshotVersion.MIN,\n        /* targetChanges= */ new Map<TargetId, TargetChange>(),\n        /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n        documentUpdates,\n        resolvedLimboDocuments\n      );\n      return this.applyRemoteEvent(event);\n    } else {\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => this.removeAndCleanupTarget(targetId, err))\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n\n  async applySuccessfulWrite(\n    mutationBatchResult: MutationBatchResult\n  ): Promise<void> {\n    this.assertSubscribed('applySuccessfulWrite()');\n\n    const batchId = mutationBatchResult.batch.batchId;\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught\n    // up), so we raise user callbacks first so that they consistently happen\n    // before listen events.\n    this.processUserCallback(batchId, /*error=*/ null);\n\n    this.triggerPendingWritesCallbacks(batchId);\n\n    try {\n      const changes = await this.localStore.acknowledgeBatch(\n        mutationBatchResult\n      );\n      this.sharedClientState.updateMutationState(batchId, 'acknowledged');\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async rejectFailedWrite(\n    batchId: BatchId,\n    error: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('rejectFailedWrite()');\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught up),\n    // so we raise user callbacks first so that they consistently happen before\n    // listen events.\n    this.processUserCallback(batchId, error);\n\n    this.triggerPendingWritesCallbacks(batchId);\n\n    try {\n      const changes = await this.localStore.rejectBatch(batchId);\n      this.sharedClientState.updateMutationState(batchId, 'rejected', error);\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Registers a user callback that resolves when all pending mutations at the moment of calling\n   * are acknowledged .\n   */\n  async registerPendingWritesCallback(callback: Deferred<void>): Promise<void> {\n    if (!this.remoteStore.canUseNetwork()) {\n      logDebug(\n        LOG_TAG,\n        'The network is disabled. The task returned by ' +\n          \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n      );\n    }\n\n    const highestBatchId = await this.localStore.getHighestUnacknowledgedBatchId();\n    if (highestBatchId === BATCHID_UNKNOWN) {\n      // Trigger the callback right away if there is no pending writes at the moment.\n      callback.resolve();\n      return;\n    }\n\n    const callbacks = this.pendingWritesCallbacks.get(highestBatchId) || [];\n    callbacks.push(callback);\n    this.pendingWritesCallbacks.set(highestBatchId, callbacks);\n  }\n\n  /**\n   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n   * if there are any.\n   */\n  private triggerPendingWritesCallbacks(batchId: BatchId): void {\n    (this.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n      callback.resolve();\n    });\n\n    this.pendingWritesCallbacks.delete(batchId);\n  }\n\n  /** Reject all outstanding callbacks waiting for pending writes to complete. */\n  private rejectOutstandingPendingWritesCallbacks(errorMessage: string): void {\n    this.pendingWritesCallbacks.forEach(callbacks => {\n      callbacks.forEach(callback => {\n        callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n      });\n    });\n\n    this.pendingWritesCallbacks.clear();\n  }\n\n  private addMutationCallback(\n    batchId: BatchId,\n    callback: Deferred<void>\n  ): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n    if (!newCallbacks) {\n      newCallbacks = new SortedMap<BatchId, Deferred<void>>(\n        primitiveComparator\n      );\n    }\n    newCallbacks = newCallbacks.insert(batchId, callback);\n    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n  }\n\n  /**\n   * Resolves or rejects the user callback for the given batch and then discards\n   * it.\n   */\n  protected processUserCallback(batchId: BatchId, error: Error | null): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\n    // okay for there to be no callback for this ID.\n    if (newCallbacks) {\n      const callback = newCallbacks.get(batchId);\n      if (callback) {\n        debugAssert(\n          batchId === newCallbacks.minKey(),\n          'Mutation callbacks processed out-of-order?'\n        );\n        if (error) {\n          callback.reject(error);\n        } else {\n          callback.resolve();\n        }\n        newCallbacks = newCallbacks.remove(batchId);\n      }\n      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    }\n  }\n\n  protected removeAndCleanupTarget(\n    targetId: number,\n    error: Error | null = null\n  ): void {\n    this.sharedClientState.removeLocalQueryTarget(targetId);\n\n    debugAssert(\n      this.queriesByTarget.has(targetId) &&\n        this.queriesByTarget.get(targetId)!.length !== 0,\n      `There are no queries mapped to target id ${targetId}`\n    );\n\n    for (const query of this.queriesByTarget.get(targetId)!) {\n      this.queryViewsByQuery.delete(query);\n      if (error) {\n        this.syncEngineListener!.onWatchError(query, error);\n      }\n    }\n\n    this.queriesByTarget.delete(targetId);\n\n    if (this.isPrimaryClient) {\n      const limboKeys = this.limboDocumentRefs.referencesForId(targetId);\n      this.limboDocumentRefs.removeReferencesForId(targetId);\n      limboKeys.forEach(limboKey => {\n        const isReferenced = this.limboDocumentRefs.containsKey(limboKey);\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboKey);\n        }\n      });\n    }\n  }\n\n  private removeLimboTarget(key: DocumentKey): void {\n    // It's possible that the target already got removed because the query failed. In that case,\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n    const limboTargetId = this.activeLimboTargetsByKey.get(key);\n    if (limboTargetId === null) {\n      // This target already got removed, because the query failed.\n      return;\n    }\n\n    this.remoteStore.unlisten(limboTargetId);\n    this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(key);\n    this.activeLimboResolutionsByTarget.delete(limboTargetId);\n    this.pumpEnqueuedLimboResolutions();\n  }\n\n  protected updateTrackedLimbos(\n    targetId: TargetId,\n    limboChanges: LimboDocumentChange[]\n  ): void {\n    for (const limboChange of limboChanges) {\n      if (limboChange instanceof AddedLimboDocument) {\n        this.limboDocumentRefs.addReference(limboChange.key, targetId);\n        this.trackLimboChange(limboChange);\n      } else if (limboChange instanceof RemovedLimboDocument) {\n        logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n        this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n        const isReferenced = this.limboDocumentRefs.containsKey(\n          limboChange.key\n        );\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboChange.key);\n        }\n      } else {\n        fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n      }\n    }\n  }\n\n  private trackLimboChange(limboChange: AddedLimboDocument): void {\n    const key = limboChange.key;\n    if (!this.activeLimboTargetsByKey.get(key)) {\n      logDebug(LOG_TAG, 'New document in limbo: ' + key);\n      this.enqueuedLimboResolutions.push(key);\n      this.pumpEnqueuedLimboResolutions();\n    }\n  }\n\n  /**\n   * Starts listens for documents in limbo that are enqueued for resolution,\n   * subject to a maximum number of concurrent resolutions.\n   *\n   * Without bounding the number of concurrent resolutions, the server can fail\n   * with \"resource exhausted\" errors which can lead to pathological client\n   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n   */\n  private pumpEnqueuedLimboResolutions(): void {\n    while (\n      this.enqueuedLimboResolutions.length > 0 &&\n      this.activeLimboTargetsByKey.size < this.maxConcurrentLimboResolutions\n    ) {\n      const key = this.enqueuedLimboResolutions.shift()!;\n      const limboTargetId = this.limboTargetIdGenerator.next();\n      this.activeLimboResolutionsByTarget.set(\n        limboTargetId,\n        new LimboResolution(key)\n      );\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.insert(\n        key,\n        limboTargetId\n      );\n      this.remoteStore.listen(\n        new TargetData(\n          Query.atPath(key.path).toTarget(),\n          limboTargetId,\n          TargetPurpose.LimboResolution,\n          ListenSequence.INVALID\n        )\n      );\n    }\n  }\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId> {\n    return this.activeLimboTargetsByKey;\n  }\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[] {\n    return this.enqueuedLimboResolutions;\n  }\n\n  protected async emitNewSnapsAndNotifyLocalStore(\n    changes: MaybeDocumentMap,\n    remoteEvent?: RemoteEvent\n  ): Promise<void> {\n    const newSnaps: ViewSnapshot[] = [];\n    const docChangesInAllViews: LocalViewChanges[] = [];\n    const queriesProcessed: Array<Promise<void>> = [];\n\n    this.queryViewsByQuery.forEach((_, queryView) => {\n      queriesProcessed.push(\n        Promise.resolve()\n          .then(() => {\n            const viewDocChanges = queryView.view.computeDocChanges(changes);\n            if (!viewDocChanges.needsRefill) {\n              return viewDocChanges;\n            }\n            // The query has a limit and some docs were removed, so we need\n            // to re-run the query against the local store to make sure we\n            // didn't lose any good docs that had been past the limit.\n            return this.localStore\n              .executeQuery(queryView.query, /* usePreviousResults= */ false)\n              .then(({ documents }) => {\n                return queryView.view.computeDocChanges(\n                  documents,\n                  viewDocChanges\n                );\n              });\n          })\n          .then((viewDocChanges: ViewDocumentChanges) => {\n            const targetChange =\n              remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n            const viewChange = queryView.view.applyChanges(\n              viewDocChanges,\n              /* updateLimboDocuments= */ this.isPrimaryClient,\n              targetChange\n            );\n            this.updateTrackedLimbos(\n              queryView.targetId,\n              viewChange.limboChanges\n            );\n            if (viewChange.snapshot) {\n              if (this.isPrimaryClient) {\n                this.sharedClientState.updateQueryState(\n                  queryView.targetId,\n                  viewChange.snapshot.fromCache ? 'not-current' : 'current'\n                );\n              }\n\n              newSnaps.push(viewChange.snapshot);\n              const docChanges = LocalViewChanges.fromSnapshot(\n                queryView.targetId,\n                viewChange.snapshot\n              );\n              docChangesInAllViews.push(docChanges);\n            }\n          })\n      );\n    });\n\n    await Promise.all(queriesProcessed);\n    this.syncEngineListener!.onWatchChange(newSnaps);\n    await this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n  }\n\n  protected assertSubscribed(fnName: string): void {\n    debugAssert(\n      this.syncEngineListener !== null,\n      'Trying to call ' + fnName + ' before calling subscribe().'\n    );\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    const userChanged = !this.currentUser.isEqual(user);\n    this.currentUser = user;\n\n    if (userChanged) {\n      // Fails tasks waiting for pending writes requested by previous user.\n      this.rejectOutstandingPendingWritesCallbacks(\n        \"'waitForPendingWrites' promise is rejected due to a user change.\"\n      );\n\n      const result = await this.localStore.handleUserChange(user);\n      // TODO(b/114226417): Consider calling this only in the primary tab.\n      this.sharedClientState.handleUserChange(\n        user,\n        result.removedBatchIds,\n        result.addedBatchIds\n      );\n      await this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments);\n    }\n\n    await this.remoteStore.handleCredentialChange();\n  }\n\n  enableNetwork(): Promise<void> {\n    return this.remoteStore.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    return this.remoteStore.disableNetwork();\n  }\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    if (limboResolution && limboResolution.receivedDocument) {\n      return documentKeySet().add(limboResolution.key);\n    } else {\n      let keySet = documentKeySet();\n      const queries = this.queriesByTarget.get(targetId);\n      if (!queries) {\n        return keySet;\n      }\n      for (const query of queries) {\n        const queryView = this.queryViewsByQuery.get(query);\n        debugAssert(!!queryView, `No query view found for ${query}`);\n        keySet = keySet.unionWith(queryView.view.syncedDocuments);\n      }\n      return keySet;\n    }\n  }\n}\n\n/**\n * An impplementation of SyncEngine that implement SharedClientStateSyncer for\n * Multi-Tab synchronization.\n */\n// PORTING NOTE: Web only\nexport class MultiTabSyncEngine extends SyncEngine\n  implements SharedClientStateSyncer {\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  private isPrimary: undefined | boolean = undefined;\n\n  constructor(\n    protected localStore: MultiTabLocalStore,\n    remoteStore: RemoteStore,\n    sharedClientState: SharedClientState,\n    currentUser: User,\n    maxConcurrentLimboResolutions: number\n  ) {\n    super(\n      localStore,\n      remoteStore,\n      sharedClientState,\n      currentUser,\n      maxConcurrentLimboResolutions\n    );\n  }\n\n  get isPrimaryClient(): boolean {\n    return this.isPrimary === true;\n  }\n\n  enableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(true);\n    return super.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(false);\n    return super.disableNetwork();\n  }\n\n  /**\n   * Reconcile the list of synced documents in an existing view with those\n   * from persistence.\n   */\n  private async synchronizeViewAndComputeSnapshot(\n    queryView: QueryView\n  ): Promise<ViewChange> {\n    const queryResult = await this.localStore.executeQuery(\n      queryView.query,\n      /* usePreviousResults= */ true\n    );\n    const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n      queryResult\n    );\n    if (this.isPrimary) {\n      this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);\n    }\n    return viewSnapshot;\n  }\n\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    // If we are the primary client, the online state of all clients only\n    // depends on the online state of the local RemoteStore.\n    if (this.isPrimaryClient && source === OnlineStateSource.RemoteStore) {\n      super.applyOnlineStateChange(onlineState, source);\n      this.sharedClientState.setOnlineState(onlineState);\n    }\n\n    // If we are the secondary client, we explicitly ignore the remote store's\n    // online state (the local client may go offline, even though the primary\n    // tab remains online) and only apply the primary tab's online state from\n    // SharedClientState.\n    if (\n      !this.isPrimaryClient &&\n      source === OnlineStateSource.SharedClientState\n    ) {\n      super.applyOnlineStateChange(onlineState, source);\n    }\n  }\n\n  async applyBatchState(\n    batchId: BatchId,\n    batchState: MutationBatchState,\n    error?: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('applyBatchState()');\n    const documents = await this.localStore.lookupMutationDocuments(batchId);\n\n    if (documents === null) {\n      // A throttled tab may not have seen the mutation before it was completed\n      // and removed from the mutation queue, in which case we won't have cached\n      // the affected documents. In this case we can safely ignore the update\n      // since that means we didn't apply the mutation locally at all (if we\n      // had, we would have cached the affected documents), and so we will just\n      // see any resulting document changes via normal remote document updates\n      // as applicable.\n      logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n      return;\n    }\n\n    if (batchState === 'pending') {\n      // If we are the primary client, we need to send this write to the\n      // backend. Secondary clients will ignore these writes since their remote\n      // connection is disabled.\n      await this.remoteStore.fillWritePipeline();\n    } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n      // NOTE: Both these methods are no-ops for batches that originated from\n      // other clients.\n      this.processUserCallback(batchId, error ? error : null);\n      this.localStore.removeCachedMutationBatchMetadata(batchId);\n    } else {\n      fail(`Unknown batchState: ${batchState}`);\n    }\n\n    await this.emitNewSnapsAndNotifyLocalStore(documents);\n  }\n\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary === true && this.isPrimary !== true) {\n      this.isPrimary = true;\n      await this.remoteStore.applyPrimaryState(true);\n\n      // Secondary tabs only maintain Views for their local listeners and the\n      // Views internal state may not be 100% populated (in particular\n      // secondary tabs don't track syncedDocuments, the set of documents the\n      // server considers to be in the target). So when a secondary becomes\n      // primary, we need to need to make sure that all views for all targets\n      // match the state on disk.\n      const activeTargets = this.sharedClientState.getAllActiveQueryTargets();\n      const activeQueries = await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets.toArray()\n      );\n      for (const targetData of activeQueries) {\n        this.remoteStore.listen(targetData);\n      }\n    } else if (isPrimary === false && this.isPrimary !== false) {\n      this.isPrimary = false;\n\n      const activeTargets: TargetId[] = [];\n\n      let p = Promise.resolve();\n      this.queriesByTarget.forEach((_, targetId) => {\n        if (this.sharedClientState.isLocalQueryTarget(targetId)) {\n          activeTargets.push(targetId);\n        } else {\n          p = p.then(() => {\n            this.removeAndCleanupTarget(targetId);\n            return this.localStore.releaseTarget(\n              targetId,\n              /*keepPersistedTargetData=*/ true\n            );\n          });\n        }\n        this.remoteStore.unlisten(targetId);\n      });\n      await p;\n\n      await this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets);\n      this.resetLimboDocuments();\n      await this.remoteStore.applyPrimaryState(false);\n    }\n  }\n\n  private resetLimboDocuments(): void {\n    this.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n      this.remoteStore.unlisten(targetId);\n    });\n    this.limboDocumentRefs.removeAllReferences();\n    this.activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n    this.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n      DocumentKey.comparator\n    );\n  }\n\n  /**\n   * Reconcile the query views of the provided query targets with the state from\n   * persistence. Raises snapshots for any changes that affect the local\n   * client and returns the updated state of all target's query data.\n   */\n  private async synchronizeQueryViewsAndRaiseSnapshots(\n    targets: TargetId[]\n  ): Promise<TargetData[]> {\n    const activeQueries: TargetData[] = [];\n    const newViewSnapshots: ViewSnapshot[] = [];\n    for (const targetId of targets) {\n      let targetData: TargetData;\n      const queries = this.queriesByTarget.get(targetId);\n\n      if (queries && queries.length !== 0) {\n        // For queries that have a local View, we need to update their state\n        // in LocalStore (as the resume token and the snapshot version\n        // might have changed) and reconcile their views with the persisted\n        // state (the list of syncedDocuments may have gotten out of sync).\n        await this.localStore.releaseTarget(\n          targetId,\n          /*keepPersistedTargetData=*/ true\n        );\n        targetData = await this.localStore.allocateTarget(\n          queries[0].toTarget()\n        );\n\n        for (const query of queries) {\n          const queryView = this.queryViewsByQuery.get(query);\n          debugAssert(!!queryView, `No query view found for ${query}`);\n\n          const viewChange = await this.synchronizeViewAndComputeSnapshot(\n            queryView\n          );\n          if (viewChange.snapshot) {\n            newViewSnapshots.push(viewChange.snapshot);\n          }\n        }\n      } else {\n        debugAssert(\n          this.isPrimary === true,\n          'A secondary tab should never have an active target without an active query.'\n        );\n        // For queries that never executed on this client, we need to\n        // allocate the target in LocalStore and initialize a new View.\n        const target = await this.localStore.getTarget(targetId);\n        debugAssert(!!target, `Target for id ${targetId} not found`);\n        targetData = await this.localStore.allocateTarget(target);\n        await this.initializeViewAndComputeSnapshot(\n          this.synthesizeTargetToQuery(target!),\n          targetId,\n          /*current=*/ false\n        );\n      }\n\n      activeQueries.push(targetData!);\n    }\n\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    return activeQueries;\n  }\n\n  /**\n   * Creates a `Query` object from the specified `Target`. There is no way to\n   * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n   * object.\n   *\n   * The synthesized result might be different from the original `Query`, but\n   * since the synthesized `Query` should return the same results as the\n   * original one (only the presentation of results might differ), the potential\n   * difference will not cause issues.\n   */\n  private synthesizeTargetToQuery(target: Target): Query {\n    return new Query(\n      target.path,\n      target.collectionGroup,\n      target.orderBy,\n      target.filters,\n      target.limit,\n      LimitType.First,\n      target.startAt,\n      target.endAt\n    );\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.localStore.getActiveClients();\n  }\n\n  async applyTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): Promise<void> {\n    if (this.isPrimary) {\n      // If we receive a target state notification via WebStorage, we are\n      // either already secondary or another tab has taken the primary lease.\n      logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n      return;\n    }\n\n    if (this.queriesByTarget.has(targetId)) {\n      switch (state) {\n        case 'current':\n        case 'not-current': {\n          const changes = await this.localStore.getNewDocumentChanges();\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n            targetId,\n            state === 'current'\n          );\n          await this.emitNewSnapsAndNotifyLocalStore(\n            changes,\n            synthesizedRemoteEvent\n          );\n          break;\n        }\n        case 'rejected': {\n          await this.localStore.releaseTarget(\n            targetId,\n            /* keepPersistedTargetData */ true\n          );\n          this.removeAndCleanupTarget(targetId, error);\n          break;\n        }\n        default:\n          fail('Unexpected target state: ' + state);\n      }\n    }\n  }\n\n  async applyActiveTargetsChange(\n    added: TargetId[],\n    removed: TargetId[]\n  ): Promise<void> {\n    if (!this.isPrimary) {\n      return;\n    }\n\n    for (const targetId of added) {\n      if (this.queriesByTarget.has(targetId)) {\n        // A target might have been added in a previous attempt\n        logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n        continue;\n      }\n\n      const target = await this.localStore.getTarget(targetId);\n      debugAssert(\n        !!target,\n        `Query data for active target ${targetId} not found`\n      );\n      const targetData = await this.localStore.allocateTarget(target);\n      await this.initializeViewAndComputeSnapshot(\n        this.synthesizeTargetToQuery(target),\n        targetData.targetId,\n        /*current=*/ false\n      );\n      this.remoteStore.listen(targetData);\n    }\n\n    for (const targetId of removed) {\n      // Check that the target is still active since the target might have been\n      // removed if it has been rejected by the backend.\n      if (!this.queriesByTarget.has(targetId)) {\n        continue;\n      }\n\n      // Release queries that are still active.\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => {\n          this.remoteStore.unlisten(targetId);\n          this.removeAndCleanupTarget(targetId);\n        })\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Query } from './query';\nimport { SyncEngine, SyncEngineListener } from './sync_engine';\nimport { OnlineState, TargetId } from './types';\nimport { DocumentViewChange, ChangeType, ViewSnapshot } from './view_snapshot';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | null = null;\n  targetId: TargetId = 0;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager implements SyncEngineListener {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(q =>\n    q.canonicalId()\n  );\n\n  private onlineState = OnlineState.Unknown;\n\n  private snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(this);\n  }\n\n  listen(listener: QueryListener): Promise<TargetId> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n      this.queries.set(query, queryInfo);\n    }\n    queryInfo.listeners.push(listener);\n\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\n    const raisedEvent = listener.applyOnlineStateChange(this.onlineState);\n    debugAssert(\n      !raisedEvent,\n      \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n    );\n\n    if (queryInfo.viewSnap) {\n      const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n      if (raisedEvent) {\n        this.raiseSnapshotsInSyncEvent();\n      }\n    }\n\n    if (firstListen) {\n      return this.syncEngine.listen(query).then(targetId => {\n        queryInfo!.targetId = targetId;\n        return targetId;\n      });\n    } else {\n      return Promise.resolve(queryInfo.targetId);\n    }\n  }\n\n  async unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    }\n  }\n\n  onWatchChange(viewSnaps: ViewSnapshot[]): void {\n    let raisedEvent = false;\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          if (listener.onViewSnapshot(viewSnap)) {\n            raisedEvent = true;\n          }\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  onWatchError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChange(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        // Run global snapshot listeners if a consistent snapshot has been emitted.\n        if (listener.applyOnlineStateChange(onlineState)) {\n          raisedEvent = true;\n        }\n      }\n    });\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.add(observer);\n    // Immediately fire an initial event, indicating all existing listeners\n    // are in-sync.\n    observer.next();\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.delete(observer);\n  }\n\n  // Call all global snapshot listeners that have been set.\n  private raiseSnapshotsInSyncEvent(): void {\n    this.snapshotsInSyncListeners.forEach(observer => {\n      observer.next();\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { LimitType, Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (query.matchesAllDocuments()) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.MIN)) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (query.hasLimitToFirst() || query.hasLimitToLast()) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            query.toString()\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>((d1, d2) =>\n      query.docComparator(d1, d2)\n    );\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query: %s',\n        query.toString()\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.MIN\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { ByteString } from '../util/byte_string';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   */\n  private lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  acknowledgeBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch,\n    streamToken: ByteString\n  ): PersistencePromise<void> {\n    const batchId = batch.batchId;\n    const batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n    hardAssert(\n      batchIndex === 0,\n      'Can only acknowledge the first batch in the mutation queue'\n    );\n\n    // Verify that the batch in the queue is the one to be acknowledged.\n    const check = this.mutationQueue[batchIndex];\n    debugAssert(\n      batchId === check.batchId,\n      'Queue ordering failure: expected batch ' +\n        batchId +\n        ', got batch ' +\n        check.batchId\n    );\n\n    this.lastStreamToken = streamToken;\n    return PersistencePromise.resolve();\n  }\n\n  getLastStreamToken(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ByteString> {\n    return PersistencePromise.resolve(this.lastStreamToken);\n  }\n\n  setLastStreamToken(\n    transaction: PersistenceTransaction,\n    streamToken: ByteString\n  ): PersistencePromise<void> {\n    this.lastStreamToken = streamToken;\n    return PersistencePromise.resolve();\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.removeMutationReference(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport class MemoryRemoteDocumentCache implements RemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.MIN),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentCache.RemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    constructor(private readonly documentCache: MemoryRemoteDocumentCache) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n      this.changes.forEach((key, doc) => {\n        if (doc) {\n          promises.push(\n            this.documentCache.addEntry(transaction, doc, this.readTime)\n          );\n        } else {\n          this.documentCache.removeEntry(key);\n        }\n      });\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      return this.documentCache.getEntry(transaction, documentKey);\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      return this.documentCache.getEntries(transaction, documentKeys);\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(key => key.toString());\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { Target } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(t => t.canonicalId());\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.addReference(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.removeReference(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = new MemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  private inMemoryPins: ReferenceSet | null = null;\n  private _orphanedDocuments: Set<DocumentKey> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<DocumentKey> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  setInMemoryPins(inMemoryPins: ReferenceSet): void {\n    this.inMemoryPins = inMemoryPins;\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.delete(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<DocumentKey>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (key: DocumentKey) => {\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key);\n      } else {\n        this.orphanedDocuments.add(key);\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => PersistencePromise.resolve(this.inMemoryPins!.containsKey(key))\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private inMemoryPins: ReferenceSet | null = null;\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(k => encodeResourcePath(k.path));\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  setInMemoryPins(inMemoryPins: ReferenceSet): void {\n    this.inMemoryPins = inMemoryPins;\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  removeMutationReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => PersistencePromise.resolve(this.inMemoryPins!.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport { LocalStore, MultiTabLocalStore } from '../local/local_store';\nimport { MultiTabSyncEngine, SyncEngine } from './sync_engine';\nimport { RemoteStore } from '../remote/remote_store';\nimport { EventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseInfo } from './database_info';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { PersistenceSettings } from './firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  platform: Platform;\n  datastore: Datastore;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n  persistenceSettings: PersistenceSettings;\n}\n\n/**\n * Initializes and wires up all core components for Firestore. Implementations\n * override `initialize()` to provide all components.\n */\nexport interface ComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  syncEngine: SyncEngine;\n  gcScheduler: GarbageCollectionScheduler | null;\n  remoteStore: RemoteStore;\n  eventManager: EventManager;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  clearPersistence(databaseId: DatabaseInfo): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryComponentProvider implements ComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  syncEngine!: SyncEngine;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  remoteStore!: RemoteStore;\n  eventManager!: EventManager;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.syncEngine = this.createSyncEngine(cfg);\n    this.eventManager = this.createEventManager(cfg);\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      this.syncEngine.applyOnlineStateChange(\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n    this.remoteStore.syncEngine = this.syncEngine;\n\n    await this.localStore.start();\n    await this.sharedClientState.start();\n    await this.remoteStore.start();\n\n    await this.remoteStore.applyPrimaryState(this.syncEngine.isPrimaryClient);\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return new EventManager(this.syncEngine);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new LocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      !cfg.persistenceSettings.durable,\n      'Can only start memory persistence'\n    );\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return new RemoteStore(\n      this.localStore,\n      cfg.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        this.syncEngine.applyOnlineStateChange(\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      cfg.platform.newConnectivityMonitor()\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    return new SyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbComponentProvider extends MemoryComponentProvider {\n  persistence!: IndexedDbPersistence;\n\n  // TODO(tree-shaking): Create an IndexedDbComponentProvider and a\n  // MultiTabComponentProvider. The IndexedDbComponentProvider should depend\n  // on LocalStore and SyncEngine.\n  localStore!: MultiTabLocalStore;\n  syncEngine!: MultiTabSyncEngine;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await (this.syncEngine as MultiTabSyncEngine).applyPrimaryState(\n        isPrimary\n      );\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new MultiTabLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    const syncEngine = new MultiTabSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = syncEngine;\n    }\n    return syncEngine;\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      cfg.persistenceSettings.durable,\n      'Can only start durable persistence'\n    );\n\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      cfg.databaseInfo\n    );\n    const serializer = cfg.platform.newSerializer(cfg.databaseInfo.databaseId);\n    return new IndexedDbPersistence(\n      cfg.persistenceSettings.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      cfg.platform,\n      LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes),\n      cfg.asyncQueue,\n      serializer,\n      this.sharedClientState\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    if (\n      cfg.persistenceSettings.durable &&\n      cfg.persistenceSettings.synchronizeTabs\n    ) {\n      if (!WebStorageSharedClientState.isAvailable(cfg.platform)) {\n        throw new FirestoreError(\n          Code.UNIMPLEMENTED,\n          'IndexedDB persistence is only available on platforms that support LocalStorage.'\n        );\n      }\n      const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n        cfg.databaseInfo\n      );\n      return new WebStorageSharedClientState(\n        cfg.asyncQueue,\n        cfg.platform,\n        persistenceKey,\n        cfg.clientId,\n        cfg.initialUser\n      );\n    }\n    return new MemorySharedClientState();\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      databaseInfo\n    );\n    return IndexedDbPersistence.clearPersistence(persistenceKey);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { LocalStore } from '../local/local_store';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { View } from './view';\n\nimport { SharedClientState } from '../local/shared_client_state';\nimport { AutoId } from '../util/misc';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from './component_provider';\n\nconst LOG_TAG = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport type PersistenceSettings =\n  | {\n      readonly durable: false;\n    }\n  | {\n      readonly durable: true;\n      readonly cacheSizeBytes: number;\n      readonly synchronizeTabs: boolean;\n    };\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private eventMgr!: EventManager;\n  private persistence!: Persistence;\n  private localStore!: LocalStore;\n  private remoteStore!: RemoteStore;\n  private syncEngine!: SyncEngine;\n  private gcScheduler!: GarbageCollectionScheduler | null;\n\n  // PORTING NOTE: SharedClientState is only used for multi-tab web.\n  private sharedClientState!: SharedClientState;\n\n  private readonly clientId = AutoId.newId();\n\n  constructor(\n    private platform: Platform,\n    private databaseInfo: DatabaseInfo,\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param componentProvider Provider that returns all core components.\n   * @param persistenceSettings Settings object to configure offline\n   *     persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  start(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    this.verifyNotTerminated();\n    // We defer our initialization until we get the current user from\n    // setChangeListener(). We block the async queue until we got the initial\n    // user and the initialization is completed. This will prevent any scheduled\n    // work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        logDebug(LOG_TAG, 'Initializing. user=', user.uid);\n\n        return this.initializeComponents(\n          componentProvider,\n          persistenceSettings,\n          user,\n          persistenceResult\n        ).then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.enqueueAndForget(() => {\n          return this.handleCredentialChange(user);\n        });\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.enqueueAndForget(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  enableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param componentProvider The provider that provides all core componennts\n   *     for IndexedDB or memory-backed persistence\n   * @param persistenceSettings Settings object to configure offline persistence\n   * @param user The initial user\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private async initializeComponents(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings,\n    user: User,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    try {\n      // TODO(mrschmidt): Ideally, ComponentProvider would also initialize\n      // Datastore (without duplicating the initializing logic once per\n      // provider).\n\n      const connection = await this.platform.loadConnection(this.databaseInfo);\n      const serializer = this.platform.newSerializer(\n        this.databaseInfo.databaseId\n      );\n      const datastore = new Datastore(\n        this.asyncQueue,\n        connection,\n        this.credentials,\n        serializer\n      );\n\n      await componentProvider.initialize({\n        asyncQueue: this.asyncQueue,\n        databaseInfo: this.databaseInfo,\n        platform: this.platform,\n        datastore,\n        clientId: this.clientId,\n        initialUser: user,\n        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,\n        persistenceSettings\n      });\n\n      this.persistence = componentProvider.persistence;\n      this.sharedClientState = componentProvider.sharedClientState;\n      this.localStore = componentProvider.localStore;\n      this.remoteStore = componentProvider.remoteStore;\n      this.syncEngine = componentProvider.syncEngine;\n      this.gcScheduler = componentProvider.gcScheduler;\n      this.eventMgr = componentProvider.eventManager;\n\n      // When a user calls clearPersistence() in one client, all other clients\n      // need to be terminated to allow the delete to succeed.\n      this.persistence.setDatabaseDeletedListener(async () => {\n        await this.terminate();\n      });\n\n      persistenceResult.resolve();\n    } catch (error) {\n      // Regardless of whether or not the retry succeeds, from an user\n      // perspective, offline persistence has failed.\n      persistenceResult.reject(error);\n\n      // An unknown failure on the first stage shuts everything down.\n      if (!this.canFallback(error)) {\n        throw error;\n      }\n      console.warn(\n        'Error enabling offline persistence. Falling back to' +\n          ' persistence disabled: ' +\n          error\n      );\n      return this.initializeComponents(\n        new MemoryComponentProvider(),\n        { durable: false },\n        user,\n        persistenceResult\n      );\n    }\n  }\n\n  /**\n   * Decides whether the provided error allows us to gracefully disable\n   * persistence (as opposed to crashing the client).\n   */\n  private canFallback(error: FirestoreError | DOMException): boolean {\n    if (error.name === 'FirebaseError') {\n      return (\n        error.code === Code.FAILED_PRECONDITION ||\n        error.code === Code.UNIMPLEMENTED\n      );\n    } else if (\n      typeof DOMException !== 'undefined' &&\n      error instanceof DOMException\n    ) {\n      // There are a few known circumstances where we can open IndexedDb but\n      // trying to read/write will fail (e.g. quota exceeded). For\n      // well-understood cases, we attempt to detect these and then gracefully\n      // fall back to memory persistence.\n      // NOTE: Rather than continue to add to this list, we could decide to\n      // always fall back, with the risk that we might accidentally hide errors\n      // representing actual SDK bugs.\n      return (\n        // When the browser is out of quota we could get either quota exceeded\n        // or an aborted error depending on whether the error happened during\n        // schema migration.\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n        error.code === DOM_EXCEPTION_ABORTED ||\n        // Firefox Private Browsing mode disables IndexedDb and returns\n        // INVALID_STATE for any usage.\n        error.code === DOM_EXCEPTION_INVALID_STATE\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  private verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  private handleCredentialChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    logDebug(LOG_TAG, 'Credential Changed. Current user: ' + user.uid);\n    return this.syncEngine.handleCredentialChange(user);\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  disableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.disableNetwork();\n    });\n  }\n\n  terminate(): Promise<void> {\n    return this.asyncQueue.enqueueAndInitiateShutdown(async () => {\n      // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n      if (this.gcScheduler) {\n        this.gcScheduler.stop();\n      }\n\n      await this.remoteStore.shutdown();\n      await this.sharedClientState.shutdown();\n      await this.persistence.shutdown();\n\n      // `removeChangeListener` must be called after shutting down the\n      // RemoteStore as it will prevent the RemoteStore from retrieving\n      // auth tokens.\n      this.credentials.removeChangeListener();\n    });\n  }\n\n  /**\n   * Returns a Promise that resolves when all writes that were pending at the time this\n   * method was called received server acknowledgement. An acknowledgement can be either acceptance\n   * or rejection.\n   */\n  waitForPendingWrites(): Promise<void> {\n    this.verifyNotTerminated();\n\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.syncEngine.registerPendingWritesCallback(deferred);\n    });\n    return deferred.promise;\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    this.verifyNotTerminated();\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.listen(listener);\n    });\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    // Checks for termination but does not raise error, allowing unlisten after\n    // termination to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  getDocumentFromLocalCache(docKey: DocumentKey): Promise<Document | null> {\n    this.verifyNotTerminated();\n    return this.asyncQueue\n      .enqueue(() => {\n        return this.localStore.readDocument(docKey);\n      })\n      .then((maybeDoc: MaybeDocument | null) => {\n        if (maybeDoc instanceof Document) {\n          return maybeDoc;\n        } else if (maybeDoc instanceof NoDocument) {\n          return null;\n        } else {\n          throw new FirestoreError(\n            Code.UNAVAILABLE,\n            'Failed to get document from cache. (However, this document may ' +\n              \"exist on the server. Run again without setting 'source' in \" +\n              'the GetOptions to attempt to retrieve the document from the ' +\n              'server.)'\n          );\n        }\n      });\n  }\n\n  getDocumentsFromLocalCache(query: Query): Promise<ViewSnapshot> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(async () => {\n      const queryResult = await this.localStore.executeQuery(\n        query,\n        /* usePreviousResults= */ true\n      );\n      const view = new View(query, queryResult.remoteKeys);\n      const viewDocChanges = view.computeDocChanges(queryResult.documents);\n      return view.applyChanges(\n        viewDocChanges,\n        /* updateLimboDocuments= */ false\n      ).snapshot!;\n    });\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() =>\n      this.syncEngine.write(mutations, deferred)\n    );\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.verifyNotTerminated();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.addSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    // Checks for shutdown but does not raise error, allowing remove after\n    // shutdown to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.eventMgr.removeSnapshotsInSyncListener(observer);\n  }\n\n  get clientTerminated(): boolean {\n    // Technically, the asyncQueue is still running, but only accepting operations\n    // related to termination or supposed to be run after termination. It is effectively\n    // terminated to the eyes of users.\n    return this.asyncQueue.isShuttingDown;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<T>();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.syncEngine.runTransaction(this.asyncQueue, updateFunction, deferred);\n      return Promise.resolve();\n    });\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Observer<T>) {}\n\n  next(value: T): void {\n    this.scheduleEvent(this.observer.next, value);\n  }\n\n  error(error: Error): void {\n    this.scheduleEvent(this.observer.error, error);\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/field_value';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentReference, Firestore } from './database';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/field_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter<T = firestore.DocumentData> {\n  constructor(\n    private readonly firestore: Firestore,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior?: ServerTimestampBehavior,\n    private readonly converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return new GeoPoint(\n          value.geoPointValue!.latitude!,\n          value.geoPointValue!.longitude!\n        );\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(name: string): DocumentReference<T> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.firestore._databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.firestore._databaseId.projectId}/${this.firestore._databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return new DocumentReference(key, this.firestore, this.converter);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  Operator,\n  OrderBy,\n  Query as InternalQuery\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { logError, setLogLevel, LogLevel, getLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred, Rejecter, Resolver } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\n\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling === undefined\n        ? DEFAULT_FORCE_LONG_POLLING\n        : settings.experimentalForceLongPolling;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private readonly _componentProvider: ComponentProvider;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  readonly _dataReader: UserDataReader;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    componentProvider: ComponentProvider = new MemoryComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._componentProvider = componentProvider;\n    this._settings = new FirestoreSettings({});\n    this._dataReader = this.createDataReader(this._databaseId);\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n    }\n\n    return this.configureClient(this._componentProvider, {\n      durable: true,\n      cacheSizeBytes: this._settings.cacheSizeBytes,\n      synchronizeTabs\n    });\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence cannot be cleared after this Firestore instance is initialized.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        const databaseInfo = this.makeDatabaseInfo();\n        await this._componentProvider.clearPersistence(databaseInfo);\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return this.onSnapshotsInSyncInternal(arg as PartialObserver<void>);\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return this.onSnapshotsInSyncInternal(observer);\n    }\n  }\n\n  private onSnapshotsInSyncInternal(\n    observer: PartialObserver<void>\n  ): Unsubscribe {\n    const errHandler = (err: Error): void => {\n      throw fail('Uncaught Error in onSnapshotsInSync');\n    };\n    const asyncObserver = new AsyncObserver<void>({\n      next: () => {\n        if (observer.next) {\n          observer.next();\n        }\n      },\n      error: errHandler\n    });\n    this._firestoreClient!.addSnapshotsInSyncListener(asyncObserver);\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient!.removeSnapshotsInSyncListener(asyncObserver);\n    };\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(new MemoryComponentProvider(), {\n        durable: false\n      });\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(\n      PlatformSupport.getPlatform(),\n      databaseInfo,\n      this._credentials,\n      this._queue\n    );\n\n    return this._firestoreClient.start(componentProvider, persistenceSettings);\n  }\n\n  private createDataReader(databaseId: DatabaseId): UserDataReader {\n    const preConverter = (value: unknown): unknown => {\n      if (value instanceof DocumentReference) {\n        const thisDb = databaseId;\n        const otherDb = value.firestore._databaseId;\n        if (!otherDb.isEqual(thisDb)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Document reference is for database ' +\n              `${otherDb.projectId}/${otherDb.database} but should be ` +\n              `for database ${thisDb.projectId}/${thisDb.database}`\n          );\n        }\n        return new DocumentKeyReference(databaseId, value._key);\n      } else {\n        return value;\n      }\n    };\n    const serializer = PlatformSupport.getPlatform().newSerializer(databaseId);\n    return new UserDataReader(serializer, preConverter);\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(ResourcePath.fromString(pathString), this);\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      new InternalQuery(ResourcePath.EMPTY_PATH, collectionId),\n      this\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.SILENT:\n        return 'silent';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateArgType('Firestore.setLogLevel', 'non-empty string', 1, level);\n    switch (level) {\n      case 'debug':\n        setLogLevel(LogLevel.DEBUG);\n        break;\n      case 'error':\n        setLogLevel(LogLevel.ERROR);\n        break;\n      case 'silent':\n        setLogLevel(LogLevel.SILENT);\n        break;\n      default:\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid log level: ' + level\n        );\n    }\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'Transaction.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this._firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this._firestore._dataReader.parseSetData(\n            functionName,\n            convertedValue\n          );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'Transaction.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'Transaction.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'WriteBatch.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this._firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this._firestore._dataReader.parseSetData(\n            functionName,\n            convertedValue\n          );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.NONE)\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'WriteBatch.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'WriteBatch.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.NONE)\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter?: firestore.FirestoreDataConverter<U>\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(this._key.path.child(path), this.firestore);\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(\n    value: firestore.DocumentData,\n    options?: firestore.SetOptions\n  ): Promise<void>;\n  set(value: T, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      'DocumentReference.set'\n    );\n    const parsed =\n      options.merge || options.mergeFields\n        ? this.firestore._dataReader.parseMergeData(\n            functionName,\n            convertedValue,\n            options.mergeFields\n          )\n        : this.firestore._dataReader.parseSetData(functionName, convertedValue);\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.NONE)\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = this.firestore._dataReader.parseUpdateVarargs(\n        'DocumentReference.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = this.firestore._dataReader.parseUpdateData(\n        'DocumentReference.update',\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.NONE)\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: firestore.SnapshotListenOptions = {\n      includeMetadataChanges: false\n    };\n    let observer: PartialObserver<firestore.DocumentSnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.DocumentSnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    return this.onSnapshotInternal(internalOptions, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: snapshot => {\n        if (observer.next) {\n          debugAssert(\n            snapshot.docs.size <= 1,\n            'Too many documents returned on a document query'\n          );\n          const doc = snapshot.docs.get(this._key);\n\n          observer.next(\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              snapshot.fromCache,\n              snapshot.hasPendingWrites,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n    const internalListener = this._firestoreClient.listen(\n      InternalQuery.atPath(this._key.path),\n      asyncObserver,\n      options\n    );\n\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n    return new Promise(\n      (resolve: Resolver<firestore.DocumentSnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentFromLocalCache(this._key)\n            .then(doc => {\n              resolve(\n                new DocumentSnapshot(\n                  this.firestore,\n                  this._key,\n                  doc,\n                  /*fromCache=*/ true,\n                  doc instanceof Document ? doc.hasLocalMutations : false,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.DocumentSnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (snap: firestore.DocumentSnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (!snap.exists && snap.metadata.fromCache) {\n            // TODO(dimond): If we're online and the document doesn't\n            // exist then we resolve with a doc.exists set to false. If\n            // we're offline however, we reject the Promise in this\n            // case. Two options: 1) Cache the negative response from\n            // the server so we can deliver that even when you're\n            // offline 2) Actually reject the Promise in the online case\n            // if the document doesn't exist.\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document because the client is ' + 'offline.'\n              )\n            );\n          } else if (\n            snap.exists &&\n            snap.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document from server. (However, this ' +\n                  'document does exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached document.)'\n              )\n            );\n          } else {\n            resolve(snap);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n}\n\nclass SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps,\n          /* converter= */ undefined\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps,\n          this._converter\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // Enumerated from the WhereFilterOp type in index.d.ts.\n    const whereFilterOpEnums = [\n      '<',\n      '<=',\n      '==',\n      '>=',\n      '>',\n      'array-contains',\n      'in',\n      'array-contains-any'\n    ];\n    validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n\n    let fieldValue: api.Value;\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const operator = Operator.fromString(opStr);\n    if (fieldPath.isKeyField()) {\n      if (\n        operator === Operator.ARRAY_CONTAINS ||\n        operator === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid Query. You can't perform '${operator.toString()}' ` +\n            'queries on FieldPath.documentId().'\n        );\n      } else if (operator === Operator.IN) {\n        this.validateDisjunctiveFilterElements(value, operator);\n        const referenceList: api.Value[] = [];\n        for (const arrayValue of value as api.Value[]) {\n          referenceList.push(this.parseDocumentIdValue(arrayValue));\n        }\n        fieldValue = { arrayValue: { values: referenceList } };\n      } else {\n        fieldValue = this.parseDocumentIdValue(value);\n      }\n    } else {\n      if (\n        operator === Operator.IN ||\n        operator === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        this.validateDisjunctiveFilterElements(value, operator);\n      }\n      fieldValue = this.firestore._dataReader.parseQueryValue(\n        'Query.where',\n        value,\n        // We only allow nested arrays for IN queries.\n        /** allowArrays = */ operator === Operator.IN ? true : false\n      );\n    }\n    const filter = FieldFilter.create(fieldPath, operator, fieldValue);\n    this.validateNewFilter(filter);\n    return new Query(\n      this._query.addFilter(filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    if (this._query.startAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.startAt() or ' +\n          'Query.startAfter() before calling Query.orderBy().'\n      );\n    }\n    if (this._query.endAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.endAt() or ' +\n          'Query.endBefore() before calling Query.orderBy().'\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = new OrderBy(fieldPath, direction);\n    this.validateNewOrderBy(orderBy);\n    return new Query(\n      this._query.addOrderBy(orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      this._query.withLimitToFirst(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      this._query.withLimitToLast(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore && this._query.isEqual(other._query)\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Too many arguments provided to ${methodName}().`\n        );\n      }\n      const snap = docOrField;\n      if (!snap.exists) {\n        throw new FirestoreError(\n          Code.NOT_FOUND,\n          `Can't use a DocumentSnapshot that doesn't exist for ` +\n            `${methodName}().`\n        );\n      }\n      return this.boundFromDocument(snap._document!, before);\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return this.boundFromFields(methodName, allFields, before);\n    }\n  }\n\n  /**\n   * Create a Bound from a query and a document.\n   *\n   * Note that the Bound will always include the key of the document\n   * and so only the provided document will compare equal to the returned\n   * position.\n   *\n   * Will throw if the document does not contain all fields of the order by\n   * of the query or if any of the fields in the order by are an uncommitted\n   * server timestamp.\n   */\n  private boundFromDocument(doc: Document, before: boolean): Bound {\n    const components: api.Value[] = [];\n\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const orderBy of this._query.orderBy) {\n      if (orderBy.field.isKeyField()) {\n        components.push(refValue(this.firestore._databaseId, doc.key));\n      } else {\n        const value = doc.field(orderBy.field);\n        if (isServerTimestamp(value)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. You are trying to start or end a query using a ' +\n              'document for which the field \"' +\n              orderBy.field +\n              '\" is an uncommitted server timestamp. (Since the value of ' +\n              'this field is unknown, you cannot start/end a query with it.)'\n          );\n        } else if (value !== null) {\n          components.push(value);\n        } else {\n          const field = orderBy.field.canonicalString();\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. You are trying to start or end a query using a ` +\n              `document for which the field '${field}' (used as the ` +\n              `orderBy) does not exist.`\n          );\n        }\n      }\n    }\n    return new Bound(components, before);\n  }\n\n  /**\n   * Converts a list of field values to a Bound for the given query.\n   */\n  private boundFromFields(\n    methodName: string,\n    values: unknown[],\n    before: boolean\n  ): Bound {\n    // Use explicit order by's because it has to match the query the user made\n    const orderBy = this._query.explicitOrderBy;\n    if (values.length > orderBy.length) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Too many arguments provided to ${methodName}(). ` +\n          `The number of arguments must be less than or equal to the ` +\n          `number of Query.orderBy() clauses`\n      );\n    }\n\n    const components: api.Value[] = [];\n    for (let i = 0; i < values.length; i++) {\n      const rawValue = values[i];\n      const orderByComponent = orderBy[i];\n      if (orderByComponent.field.isKeyField()) {\n        if (typeof rawValue !== 'string') {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. Expected a string for document ID in ` +\n              `${methodName}(), but got a ${typeof rawValue}`\n          );\n        }\n        if (\n          !this._query.isCollectionGroupQuery() &&\n          rawValue.indexOf('/') !== -1\n        ) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n              `the value passed to ${methodName}() must be a plain document ID, but ` +\n              `'${rawValue}' contains a slash.`\n          );\n        }\n        const path = this._query.path.child(ResourcePath.fromString(rawValue));\n        if (!DocumentKey.isDocumentKey(path)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection group and ordering by ` +\n              `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n              `valid document path, but '${path}' is not because it contains an odd number ` +\n              `of segments.`\n          );\n        }\n        const key = new DocumentKey(path);\n        components.push(refValue(this.firestore._databaseId, key));\n      } else {\n        const wrapped = this.firestore._dataReader.parseQueryValue(\n          methodName,\n          rawValue\n        );\n        components.push(wrapped);\n      }\n    }\n\n    return new Bound(components, before);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: firestore.SnapshotListenOptions = {};\n    let observer: PartialObserver<firestore.QuerySnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<firestore.QuerySnapshot<T>>;\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.QuerySnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return this.onSnapshotInternal(options, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: (result: ViewSnapshot): void => {\n        if (observer.next) {\n          observer.next(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              result,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    const internalListener = firestoreClient.listen(\n      this._query,\n      asyncObserver,\n      options\n    );\n    return (): void => {\n      asyncObserver.mute();\n      firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  private validateHasExplicitOrderByForLimitToLast(query: InternalQuery): void {\n    if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'limitToLast() queries require specifying at least one orderBy() clause'\n      );\n    }\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return new Promise(\n      (resolve: Resolver<firestore.QuerySnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentsFromLocalCache(this._query)\n            .then((viewSnap: ViewSnapshot) => {\n              resolve(\n                new QuerySnapshot(\n                  this.firestore,\n                  this._query,\n                  viewSnap,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.QuerySnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (result: firestore.QuerySnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (\n            result.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get documents from server. (However, these ' +\n                  'documents may exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached documents.)'\n              )\n            );\n          } else {\n            resolve(result);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  /**\n   * Parses the given documentIdValue into a ReferenceValue, throwing\n   * appropriate errors if the value is anything other than a DocumentReference\n   * or String, or if the string is malformed.\n   */\n  private parseDocumentIdValue(documentIdValue: unknown): api.Value {\n    if (typeof documentIdValue === 'string') {\n      if (documentIdValue === '') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. When querying with FieldPath.documentId(), you ' +\n            'must provide a valid document ID, but it was an empty string.'\n        );\n      }\n      if (\n        !this._query.isCollectionGroupQuery() &&\n        documentIdValue.indexOf('/') !== -1\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection by ` +\n            `FieldPath.documentId(), you must provide a plain document ID, but ` +\n            `'${documentIdValue}' contains a '/' character.`\n        );\n      }\n      const path = this._query.path.child(\n        ResourcePath.fromString(documentIdValue)\n      );\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group by ` +\n            `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n            `but '${path}' is not because it has an odd number of segments (${path.length}).`\n        );\n      }\n      return refValue(this.firestore._databaseId, new DocumentKey(path));\n    } else if (documentIdValue instanceof DocumentReference) {\n      const ref = documentIdValue as DocumentReference<T>;\n      return refValue(this.firestore._databaseId, ref._key);\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n          `string or a DocumentReference, but it was: ` +\n          `${valueDescription(documentIdValue)}.`\n      );\n    }\n  }\n\n  /**\n   * Validates that the value passed into a disjunctrive filter satisfies all\n   * array requirements.\n   */\n  private validateDisjunctiveFilterElements(\n    value: unknown,\n    operator: Operator\n  ): void {\n    if (!Array.isArray(value) || value.length === 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid Query. A non-empty array is required for ' +\n          `'${operator.toString()}' filters.`\n      );\n    }\n    if (value.length > 10) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters support a ` +\n          'maximum of 10 elements in the value array.'\n      );\n    }\n    if (value.indexOf(null) >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n          'in the value array.'\n      );\n    }\n    if (value.filter(element => Number.isNaN(element)).length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n          'in the value array.'\n      );\n    }\n  }\n\n  private validateNewFilter(filter: Filter): void {\n    if (filter instanceof FieldFilter) {\n      const arrayOps = [Operator.ARRAY_CONTAINS, Operator.ARRAY_CONTAINS_ANY];\n      const disjunctiveOps = [Operator.IN, Operator.ARRAY_CONTAINS_ANY];\n      const isArrayOp = arrayOps.indexOf(filter.op) >= 0;\n      const isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;\n\n      if (filter.isInequality()) {\n        const existingField = this._query.getInequalityFilterField();\n        if (existingField !== null && !existingField.isEqual(filter.field)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. All where filters with an inequality' +\n              ' (<, <=, >, or >=) must be on the same field. But you have' +\n              ` inequality filters on '${existingField.toString()}'` +\n              ` and '${filter.field.toString()}'`\n          );\n        }\n\n        const firstOrderByField = this._query.getFirstOrderByField();\n        if (firstOrderByField !== null) {\n          this.validateOrderByAndInequalityMatch(\n            filter.field,\n            firstOrderByField\n          );\n        }\n      } else if (isDisjunctiveOp || isArrayOp) {\n        // You can have at most 1 disjunctive filter and 1 array filter. Check if\n        // the new filter conflicts with an existing one.\n        let conflictingOp: Operator | null = null;\n        if (isDisjunctiveOp) {\n          conflictingOp = this._query.findFilterOperator(disjunctiveOps);\n        }\n        if (conflictingOp === null && isArrayOp) {\n          conflictingOp = this._query.findFilterOperator(arrayOps);\n        }\n        if (conflictingOp != null) {\n          // We special case when it's a duplicate op to give a slightly clearer error message.\n          if (conflictingOp === filter.op) {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              'Invalid query. You cannot use more than one ' +\n                `'${filter.op.toString()}' filter.`\n            );\n          } else {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n                `with '${conflictingOp.toString()}' filters.`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private validateNewOrderBy(orderBy: OrderBy): void {\n    if (this._query.getFirstOrderByField() === null) {\n      // This is the first order by. It must match any inequality.\n      const inequalityField = this._query.getInequalityFilterField();\n      if (inequalityField !== null) {\n        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n      }\n    }\n  }\n\n  private validateOrderByAndInequalityMatch(\n    inequality: FieldPath,\n    orderBy: FieldPath\n  ): void {\n    if (!orderBy.isEqual(inequality)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You have a where filter with an inequality ` +\n          `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n          `and so you must also use '${inequality.toString()}' ` +\n          `as your first Query.orderBy(), but your first Query.orderBy() ` +\n          `is on field '${orderBy.toString()}' instead.`\n      );\n    }\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, this.convertToDocumentImpl(doc));\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<T>(\n        this._firestore,\n        includeMetadataChanges,\n        this._snapshot,\n        this._converter\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      this._originalQuery.isEqual(other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(doc: Document): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      this.metadata.fromCache,\n      this._snapshot.mutatedKeys.has(doc.key),\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter?: firestore.FirestoreDataConverter<T>\n  ) {\n    super(InternalQuery.atPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (pathString === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Document path must be a non-empty string'\n      );\n    }\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentReference<T> {\n  if (!(documentRef instanceof DocumentReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot<T>(\n  firestore: Firestore,\n  includeMetadataChanges: boolean,\n  snapshot: ViewSnapshot,\n  converter?: firestore.FirestoreDataConverter<T>\n): Array<firestore.DocumentChange<T>> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot<T>(\n        firestore,\n        change.doc.key,\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key),\n        converter\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || snapshot.query.docComparator(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = new QueryDocumentSnapshot<T>(\n          firestore,\n          change.doc.key,\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key),\n          converter\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nfunction applyFirestoreDataConverter<T>(\n  converter: firestore.FirestoreDataConverter<T> | undefined,\n  value: T,\n  functionName: string\n): [firestore.DocumentData, string] {\n  let convertedValue;\n  if (converter) {\n    convertedValue = converter.toFirestore(value);\n    functionName = 'toFirestore() in ' + functionName;\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return [convertedValue, functionName];\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\nexport const PublicFirestore = makeConstructorPrivate(\n  Firestore,\n  'Use firebase.firestore() instead.'\n);\nexport const PublicTransaction = makeConstructorPrivate(\n  Transaction,\n  'Use firebase.firestore().runTransaction() instead.'\n);\nexport const PublicWriteBatch = makeConstructorPrivate(\n  WriteBatch,\n  'Use firebase.firestore().batch() instead.'\n);\nexport const PublicDocumentReference = makeConstructorPrivate(\n  DocumentReference,\n  'Use firebase.firestore().doc() instead.'\n);\nexport const PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport const PublicQueryDocumentSnapshot = makeConstructorPrivate(\n  QueryDocumentSnapshot\n);\nexport const PublicQuery = makeConstructorPrivate(Query);\nexport const PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport const PublicCollectionReference = makeConstructorPrivate(\n  CollectionReference,\n  'Use firebase.firestore().collection() instead.'\n);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport { PublicBlob } from '../api/blob';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  Firestore,\n  PublicCollectionReference,\n  PublicDocumentReference,\n  PublicDocumentSnapshot,\n  PublicFirestore,\n  PublicQuery,\n  PublicQueryDocumentSnapshot,\n  PublicQuerySnapshot,\n  PublicTransaction,\n  PublicWriteBatch\n} from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { Timestamp } from '../api/timestamp';\n\nconst firestoreNamespace = {\n  Firestore: PublicFirestore,\n  GeoPoint,\n  Timestamp,\n  Blob: PublicBlob,\n  Transaction: PublicTransaction,\n  WriteBatch: PublicWriteBatch,\n  DocumentReference: PublicDocumentReference,\n  DocumentSnapshot: PublicDocumentSnapshot,\n  Query: PublicQuery,\n  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n  QuerySnapshot: PublicQuerySnapshot,\n  CollectionReference: PublicCollectionReference,\n  FieldPath,\n  FieldValue: PublicFieldValue,\n  setLogLevel: Firestore.setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from './../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../core/version';\nimport { Connection, Stream } from '../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Indexable } from '../util/misc';\nimport { Rejecter, Resolver } from '../util/promise';\nimport { StringMap } from '../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\nconst RPC_URL_VERSION = 'v1';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n * Uses Object Literal notation to avoid renaming.\n */\nconst RPC_NAME_REST_MAPPING: { [key: string]: string } = {};\nRPC_NAME_REST_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_REST_MAPPING['Commit'] = 'commit';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly forceLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n    this.forceLongPolling = info.forceLongPolling;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      // The database field is already encoded in URL. Specifying it again in\n      // the body is not necessary in production, and will cause duplicate field\n      // errors in the Firestore Emulator. Let's remove it.\n      const jsonObj = ({ ...request } as unknown) as Indexable;\n      delete jsonObj.database;\n\n      const requestString = JSON.stringify(jsonObj);\n      logDebug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the\n      // $httpOverwrite parameter supported by ESF to avoid\n      // triggering preflight requests.\n      const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n      this.modifyHeadersForRequest(headers, token);\n\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return (\n      this.baseUrl +\n      '/' +\n      RPC_URL_VERSION +\n      '/projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents:' +\n      urlRpcName\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Platform } from '../platform/platform';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\nimport { NoopConnectivityMonitor } from '../remote/connectivity_monitor_noop';\nimport { BrowserConnectivityMonitor } from './browser_connectivity_monitor';\nimport { WebChannelConnection } from './webchannel_connection';\n\n// Implements the Platform API for browsers and some browser-like environments\n// (including ReactNative).\nexport class BrowserPlatform implements Platform {\n  readonly base64Available: boolean;\n\n  constructor() {\n    this.base64Available = typeof atob !== 'undefined';\n  }\n\n  get document(): Document | null {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof document !== 'undefined' ? document : null;\n  }\n\n  get window(): Window | null {\n    // `window` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof window !== 'undefined' ? window : null;\n  }\n\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n    return Promise.resolve(new WebChannelConnection(databaseInfo));\n  }\n\n  newConnectivityMonitor(): ConnectivityMonitor {\n    if (BrowserConnectivityMonitor.isAvailable()) {\n      return new BrowserConnectivityMonitor();\n    } else {\n      return new NoopConnectivityMonitor();\n    }\n  }\n\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n    return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n  }\n\n  formatJSON(value: unknown): string {\n    return JSON.stringify(value);\n  }\n\n  atob(encoded: string): string {\n    return atob(encoded);\n  }\n\n  btoa(raw: string): string {\n    return btoa(raw);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore } from './src/api/database';\nimport { MemoryComponentProvider } from './src/core/component_provider';\nimport { configureForFirebase } from './src/platform/config';\n\nimport './register-module';\nimport './src/platform_browser/browser_init';\n\nimport { name, version } from './package.json';\n\n/**\n * Registers the memory-only Firestore build with the components framework.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) => new Firestore(app, auth, new MemoryComponentProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n"],"names":["SDK_VERSION","firebase","User","[object Object]","uid","this","__PRIVATE_otherUser","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FirestoreError","Error","code","message","super","toString","name","value","user","Promise","resolve","__PRIVATE_changeListener","__PRIVATE_authProvider","currentUser","auth","getImmediate","optional","addAuthTokenListener","get","then","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","__PRIVATE_hardAssert","accessToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_gapi","__PRIVATE_sessionIndex","o","headers","X-Goog-AuthUser","__PRIVATE_authHeader","Timestamp","seconds","nanoseconds","fromMillis","Date","now","date","getTime","milliseconds","Math","floor","toMillis","other","__PRIVATE_primitiveComparator","__PRIVATE_adjustedSeconds","String","padStart","timestamp","__PRIVATE_SnapshotVersion","MIN","isEqual","segments","offset","length","undefined","fail","__PRIVATE_BasePath","__PRIVATE_nameOrPath","slice","limit","forEach","__PRIVATE_segment","push","size","index","__PRIVATE_i","__PRIVATE_potentialChild","fn","end","p1","p2","__PRIVATE_len","min","left","right","ResourcePath","join","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","map","str","replace","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","collectionId","k1","k2","__PRIVATE_DocumentKey","__PRIVATE_comparator","root","__PRIVATE_LLRBNode","EMPTY","key","remove","node","cmp","__PRIVATE_prunedNodes","action","k","v","__PRIVATE_descriptions","__PRIVATE_startKey","__PRIVATE_isReverse","pop","result","color","RED","n","__PRIVATE_smallest","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","pow","data","__PRIVATE_elem","cb","range","__PRIVATE_iter","start","has","add","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","targetId","obj","count","Object","prototype","hasOwnProperty","call","__PRIVATE_binaryString","base64","__PRIVATE_PlatformSupport","atob","array","fromCharCode","__PRIVATE_binaryStringFromUint8Array","btoa","buffer","Uint8Array","charCodeAt","__PRIVATE_uint8ArrayFromBinaryString","__PRIVATE_ByteString","mapValue","fields","stringValue","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_isServerTimestamp","__PRIVATE_leftType","__PRIVATE_typeOrder","booleanValue","__PRIVATE_getLocalWriteTime","timestampValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_timestampEquals","__PRIVATE_normalizeByteString","__PRIVATE_blobEquals","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","__PRIVATE_geoPointEquals","integerValue","__PRIVATE_n1","__PRIVATE_n2","__PRIVATE_isNegativeZero","isNaN","__PRIVATE_numberEquals","__PRIVATE_arrayEquals","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_objectSize","__PRIVATE_valueEquals","__PRIVATE_objectEquals","__PRIVATE_haystack","__PRIVATE_needle","find","__PRIVATE_rightType","__PRIVATE_leftNumber","doubleValue","__PRIVATE_rightNumber","__PRIVATE_compareNumbers","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareBlobs","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_compareReferences","__PRIVATE_compareGeoPoints","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_valueCompare","__PRIVATE_compareArrays","__PRIVATE_leftKeys","keys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","__PRIVATE_compareMaps","canonicalId","__PRIVATE_canonifyValue","__PRIVATE_normalizedTimestamp","__PRIVATE_canonifyTimestamp","toBase64","__PRIVATE_geoPoint","first","__PRIVATE_canonifyArray","__PRIVATE_sortedKeys","__PRIVATE_canonifyMap","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","Number","__PRIVATE_parsedDate","blob","fromBase64String","fromUint8Array","__PRIVATE_databaseId","projectId","database","isInteger","isArray","previousValue","__type__","__local_write_time__","serverTimestamp","__PRIVATE_transformResult","__PRIVATE_ServerTimestampTransform","elements","apply","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_toRemove","serializer","__PRIVATE_operand","__PRIVATE_baseValue","__PRIVATE_sum","asNumber","__PRIVATE_isDouble","__PRIVATE_fieldsAsSet","fieldPath","found","__PRIVATE_fieldMaskPath","FieldTransform","field","transform","version","transformResults","Precondition","updateTime","exists","zt","__PRIVATE_maybeDoc","Document","__PRIVATE_Mutation","__PRIVATE_precondition","__PRIVATE_mutationResult","hasCommittedMutations","__PRIVATE_baseDoc","te","__PRIVATE_fieldMask","__PRIVATE_newData","__PRIVATE_ObjectValue","__PRIVATE_builder","newValue","set","delete","fieldTransforms","doc","__PRIVATE_baseObject","__PRIVATE_fieldTransform","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_l","r","__PRIVATE_serverTransformResults","proto","__PRIVATE_isMapValue","__PRIVATE_currentPath","__PRIVATE_nestedFields","__PRIVATE_nestedPath","child","__PRIVATE_FieldMask","Map","__PRIVATE_currentLevel","__PRIVATE_currentSegment","currentValue","entries","__PRIVATE_mergedResult","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_MaybeDocument","__PRIVATE_objectValue","options","hasPendingWrites","v1","v2","Target","collectionGroup","orderBy","filters","startAt","endAt","f","__PRIVATE_isNullOrUndefined","Query","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","__PRIVATE_inequalityField","__PRIVATE_firstOrderByField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","dir","__PRIVATE_Direction","ASCENDING","__PRIVATE_newFilters","concat","__PRIVATE_newOrderBy","bound","__PRIVATE_comparedOnKeyField","__PRIVATE_comp","FieldFilter","__PRIVATE_operators","op","__PRIVATE_orderBys","DESCENDING","position","before","__PRIVATE_docPath","matches","__PRIVATE_Operator","LESS_THAN","LESS_THAN_OR_EQUAL","EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","ARRAY_CONTAINS","IN","ARRAY_CONTAINS_ANY","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_arrayValueContains","val","p","__PRIVATE_orderByComponent","component","__PRIVATE_KEY_ORDERING_ASC","__PRIVATE_KEY_ORDERING_DESC","target","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","ExistenceFilter","__PRIVATE_logError","__PRIVATE_RpcCode","RpcCode","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_documentMap","__PRIVATE_oldSet","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_newSet","__PRIVATE_change","__PRIVATE_oldChange","type","__PRIVATE_changes","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_DocumentSet","__PRIVATE_otherChanges","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","TargetChange","__PRIVATE_targetIdSet","__PRIVATE_documentKeySet","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_existenceFilter","state","targetIds","cause","__PRIVATE_snapshotChangesMap","As","Ns","$s","__PRIVATE_changeType","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","targetChange","__PRIVATE_targetState","removeTarget","__PRIVATE__","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_remoteEvent","document","__PRIVATE_updatedDocument","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_logDebug","__PRIVATE_DIRECTIONS","__PRIVATE_dirs","__PRIVATE_OPERATORS","__PRIVATE_ops","status","__PRIVATE_mapCodeFromRpcCode","Infinity","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isSafeInteger","toISOString","bytes","toUint8Array","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_resourceName","gi","fromVersion","missing","readTime","targetChangeType","__PRIVATE_causeProto","documentChange","__PRIVATE_entityChange","documentDelete","__PRIVATE_docDelete","documentRemove","__PRIVATE_docRemove","__PRIVATE_mutation","update","updateMask","verify","currentDocument","NONE","toVersion","commitTime","__PRIVATE_protos","setToServerValue","appendMissingElements","removeAllFromArray","increment","instance","__PRIVATE_documentsTarget","structuredQuery","parent","from","allDescendants","where","__PRIVATE_fromCount","__PRIVATE_filterBy","goog-listen-tags","compositeFilter","unaryFilter","fieldFilter","reduce","__PRIVATE_accum","order","cursor","__PRIVATE_fieldReference","direction","create","__PRIVATE_nanField","NaN","__PRIVATE_nullField","nullValue","__PRIVATE_canonicalFields","fieldPaths","platform","__PRIVATE_logClient","Logger","logLevel","setLogLevel","__PRIVATE_newLevel","msg","LogLevel","DEBUG","args","debug","ERROR","error","e","__PRIVATE_failure","assertion","__PRIVATE_chars","__PRIVATE_autoId","charAt","random","every","persistenceKey","host","ssl","forceLongPolling","En","__PRIVATE_mapKeyFn","id","__PRIVATE_otherKey","splice","__PRIVATE_isEmpty","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","__PRIVATE_m","__PRIVATE_mutatedDocument","batch","__PRIVATE_commitVersion","streamToken","__PRIVATE_docVersions","results","__PRIVATE_versionMap","__PRIVATE_documentVersionMap","__PRIVATE_DocReference","ref","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_firstRef","__PRIVATE_targetOrBatchId","PersistencePromise","callback","__PRIVATE_nextFn","__PRIVATE_catchFn","reject","all","__PRIVATE_resolvedCount","done","__PRIVATE_err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","s","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","transaction","__PRIVATE_batches","__PRIVATE_inBatches","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_localView","getEntries","__PRIVATE_baseDocs","__PRIVATE_sinceReadTime","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_mutationBatches","__PRIVATE_queryResults","__PRIVATE_matchingMutationBatches","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_sequenceNumberSyncer","__PRIVATE_externalPreviousValue","max","__PRIVATE_nextValue","__PRIVATE_ListenSequence","promise","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_delaySoFarMs","__PRIVATE_remainingDelayMs","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","bind","catch","__PRIVATE_delayMs","__PRIVATE_targetTime","__PRIVATE_delayedOp","setTimeout","reason","clearTimeout","window","addEventListener","Jr","enqueue","removeEventListener","__PRIVATE_deferred","__PRIVATE_retryingOp","async","__PRIVATE_newTail","stack","__PRIVATE_DelayedOperation","__PRIVATE_removedOp","__PRIVATE_currentTail","__PRIVATE_lastTimerId","a","b","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_LruParams","__PRIVATE_lastId","collectionPath","parentPath","__PRIVATE_existingParents","__PRIVATE_added","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","t","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","runTransaction","txn","__PRIVATE_oldBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_affectedDocuments","Qh","Wh","jh","__PRIVATE_existingDocs","Hh","__PRIVATE_affected","__PRIVATE_documentBuffer","Xh","__PRIVATE_affectedKeys","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_oldTargetData","__PRIVATE_newTargetData","__PRIVATE_LocalStore","__PRIVATE_changedDocs","__PRIVATE_updatedKeys","__PRIVATE_existingDoc","__PRIVATE_updateRemoteVersion","lastRemoteSnapshotVersion","__PRIVATE_viewChanges","__PRIVATE_viewChange","__PRIVATE_updatedTargetData","__PRIVATE_afterBatchId","__PRIVATE_cached","__PRIVATE_keepPersistedTargetData","mode","__PRIVATE_removed","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","Do","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_remoteDoc","__PRIVATE_ackVersion","__PRIVATE_garbageCollector","functionName","__PRIVATE_formatPlural","__PRIVATE_numberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_maxNumberOfArgs","__PRIVATE_argument","__PRIVATE_validateType","__PRIVATE_ordinal","__PRIVATE_validateArgType","__PRIVATE_optionName","__PRIVATE_validateNamedType","__PRIVATE_typeDescription","__PRIVATE_validator","Array","__PRIVATE_valueDescription","__PRIVATE_validateArrayElements","__PRIVATE_inputName","input","__PRIVATE_expected","__PRIVATE_expectedDescription","__PRIVATE_actualDescription","__PRIVATE_validateNamedPropertyEquals","valid","__PRIVATE_isPlainObject","description","getPrototypeOf","substring","JSON","stringify","__PRIVATE_customObjectName","constructor","__PRIVATE_tryGetCustomObjectType","__PRIVATE_optionNames","num","__PRIVATE_cls","__PRIVATE_optionalMessage","__PRIVATE_PublicConstructor","assign","Blob","__PRIVATE_byteString","__PRIVATE_assertBase64Available","__PRIVATE_validateExactNumberOfArgs","arguments","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_invalidClassError","__PRIVATE_PublicBlob","__PRIVATE_makeConstructorPrivate","fieldNames","__PRIVATE_minNumberOfElements","__PRIVATE_validateNamedArrayAtLeastNumberOfElements","__PRIVATE_InternalFieldPath","__PRIVATE_RESERVED","__PRIVATE__methodName","__PRIVATE_validateNoArgs","__PRIVATE_DeleteFieldValueImpl","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_FieldValueImpl","__PRIVATE__elements","__PRIVATE__operand","__PRIVATE_PublicFieldValue","GeoPoint","isFinite","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE_dataSource","methodName","__PRIVATE_arrayElement","__PRIVATE_childPath","context","__PRIVATE_fieldDescription","__PRIVATE_isWrite","__PRIVATE_preConverter","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","contains","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_parsedValue","mask","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_allowArrays","__PRIVATE_errorMessage","__PRIVATE_looksLikeJsonObject","__PRIVATE_entryIndex","__PRIVATE_entry","__PRIVATE_parsedEntry","__PRIVATE_parsedElements","arrayUnion","arrayRemove","__PRIVATE_numericIncrement","fromDate","bytesValue","search","__PRIVATE_fromDotSeparatedString","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","listener","close","stream","send","__PRIVATE_finalState","__PRIVATE_dispatchIfNotClosed","__PRIVATE_closeCount","token","__PRIVATE_rpcError","onMessage","__PRIVATE_startCloseCount","__PRIVATE_PersistentStream","credentials","__PRIVATE_watchChangeProto","snapshot","request","addTarget","labels","La","__PRIVATE_responseProto","lastStreamToken","writeResults","writes","__PRIVATE_params","response","__PRIVATE_rpcName","Transaction","__PRIVATE_datastore","Set","write","__PRIVATE_unwritten","__PRIVATE__version","commit","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_onlineStateHandler","__PRIVATE_newState","details","__PRIVATE_localStore","__PRIVATE_connectivityMonitor","Da","ga","Fa","qa","Ma","enableNetwork","networkEnabled","stop","isPrimary","__PRIVATE_requestTargetData","__PRIVATE_lastBatchIdRetrieved","shift","__PRIVATE_success","__PRIVATE_MutationBatchResult","__PRIVATE_errorHandling","__PRIVATE_isPermanentError","activeTargetIds","updateTimeMs","onlineState","__PRIVATE__syncedDocuments","Tc","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","last","__PRIVATE_firstDocInLimit","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","wc","Ic","Rc","ls","__PRIVATE_updateLimboDocuments","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_compareChangeType","__PRIVATE_limboChanges","__PRIVATE_newSyncState","pc","__PRIVATE_oldLimboDocuments","__PRIVATE_queryResult","__PRIVATE_ViewSnapshot","__PRIVATE_remoteStore","updateFunction","__PRIVATE_userPromise","__PRIVATE_commitError","__PRIVATE_userPromiseError","view","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","q","__PRIVATE_TargetIdGenerator","zc","__PRIVATE_syncEngineListener","__PRIVATE_queryView","listen","__PRIVATE_viewDocChanges","__PRIVATE_synthesizedTargetChange","__PRIVATE_queries","__PRIVATE_userCallback","__PRIVATE_limboResolution","__PRIVATE_ignoreIfPrimaryLeaseLoss","source","__PRIVATE_newViewSnapshots","__PRIVATE_limboKey","event","__PRIVATE_mutationBatchResult","__PRIVATE_highestBatchId","__PRIVATE_callbacks","clear","__PRIVATE_newCallbacks","__PRIVATE_limboKeys","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_LocalViewChanges","__PRIVATE_fnName","__PRIVATE_userChanged","disableNetwork","__PRIVATE_keySet","__PRIVATE_syncEngine","subscribe","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_lastListen","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","__PRIVATE_viewSnap","onError","observer","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_maybeOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_localDocuments","__PRIVATE_previousResults","__PRIVATE_getLogLevel","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_referenceDelegate","__PRIVATE_batchIndex","__PRIVATE_nextBatchId","__PRIVATE_rawIndex","__PRIVATE_documentKey","POSITIVE_INFINITY","__PRIVATE_documentKeys","__PRIVATE_uniqueBatchIDs","prefix","__PRIVATE_immediateChildrenPathLength","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_batchIDs","__PRIVATE_references","__PRIVATE_sizer","__PRIVATE_previousSize","__PRIVATE_currentSize","xl","iterator","__PRIVATE_maybeDocument","__PRIVATE_MemoryRemoteDocumentCache","__PRIVATE_bufferedEntry","__PRIVATE_documentCache","highestTargetId","highestListenSequenceNumber","targetCount","upperBound","__PRIVATE_removals","__PRIVATE_matchingKeys","__PRIVATE_referenceDelegateFactory","l_","__PRIVATE_transactionOperation","__PRIVATE_currentSequenceNumber","P_","__PRIVATE_inMemoryPins","cache","__PRIVATE_changeBuffer","__PRIVATE_isReferenced","__PRIVATE_cfg","__PRIVATE_MemoryEagerDelegate","__PRIVATE_databaseInfo","__PRIVATE_AutoId","__PRIVATE_componentProvider","__PRIVATE_persistenceSettings","__PRIVATE_initializationDone","__PRIVATE_persistenceResult","__PRIVATE_initialized","initialize","Nr","L_","Ga","clientId","N_","Mc","x_","terminate","console","warn","W_","DOMException","j_","muted","eventHandler","__PRIVATE_methods","object","method","__PRIVATE_implementsAnyMethods","firestore","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","converter","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","DocumentReference","CACHE_SIZE_UNLIMITED","settings","__PRIVATE_validateNamedOptionalType","__PRIVATE_validateOptionNames","cacheSizeBytes","experimentalForceLongPolling","Firestore","__PRIVATE_databaseIdOrApp","app","external","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","__PRIVATE_client","__PRIVATE_makeCredentialsProvider","synchronizeTabs","experimentalTabSynchronization","clearPersistence","_removeServiceInstance","mf","waitForPendingWrites","arg","__PRIVATE_isPartialObserver","__PRIVATE_asyncObserver","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_pathString","CollectionReference","WriteBatch","SILENT","level","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","DocumentSnapshot","__PRIVATE_validateBetweenNumberOfArgs","__PRIVATE_validateSetOptions","__PRIVATE_convertedValue","__PRIVATE_applyFirestoreDataConverter","__PRIVATE_parsed","merge","mergeFields","__PRIVATE_fieldOrUpdateData","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_currArg","__PRIVATE_internalOptions","__PRIVATE_validateOptionalArgType","complete","__PRIVATE_errHandler","__PRIVATE_internalListener","__PRIVATE_InternalQuery","__PRIVATE_validateGetOptions","__PRIVATE_unlisten","bl","metadata","SnapshotMetadata","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","__PRIVATE_validateSnapshotOptions","QueryDocumentSnapshot","fromFirestore","serverTimestamps","__PRIVATE__query","opStr","__PRIVATE_validateDefined","__PRIVATE_fieldValue","__PRIVATE_enums","__PRIVATE_validateStringEnum","operator","__PRIVATE_referenceList","directionStr","__PRIVATE_validatePositiveNumber","__PRIVATE_docOrField","__PRIVATE_allFields","components","__PRIVATE_refValue","__PRIVATE_rawValue","__PRIVATE_wrapped","QuerySnapshot","__PRIVATE_firestoreClient","__PRIVATE_documentIdValue","__PRIVATE_arrayOps","__PRIVATE_disjunctiveOps","__PRIVATE_isArrayOp","__PRIVATE_isDisjunctiveOp","__PRIVATE_existingField","__PRIVATE_conflictingOp","__PRIVATE_inequality","__PRIVATE__originalQuery","__PRIVATE__snapshot","empty","thisArg","__PRIVATE_lastDoc","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE_changesFromSnapshot","__PRIVATE__path","toFirestore","__PRIVATE_docRef","__PRIVATE_validateOptionalArrayElements","__PRIVATE_validateNamedOptionalPropertyEquals","__PRIVATE_PublicFirestore","__PRIVATE_PublicTransaction","__PRIVATE_PublicWriteBatch","__PRIVATE_PublicDocumentReference","__PRIVATE_PublicDocumentSnapshot","__PRIVATE_PublicQueryDocumentSnapshot","__PRIVATE_PublicQuery","__PRIVATE_PublicQuerySnapshot","__PRIVATE_PublicCollectionReference","__PRIVATE_firestoreNamespace","FieldValue","__PRIVATE_RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","__PRIVATE_X_GOOG_API_CLIENT_VALUE","info","__PRIVATE_header","url","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_mapCodeFromHttpResponseErrorStatus","__PRIVATE_jsonObj","__PRIVATE_requestString","Content-Type","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","rd","open","hd","__PRIVATE_unguardedEventListen","param","WebChannel","OPEN","CLOSE","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_mapCodeFromRpcStatus","__PRIVATE_urlRpcName","__PRIVATE_BrowserConnectivityMonitor","fi","__PRIVATE_encoded","raw","__PRIVATE_firestoreFactory","registerComponent","Component","container","getProvider","setServiceProps","__PRIVATE_configureForFirebase","registerVersion","__PRIVATE_registerFirestore"],"mappings":"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"}